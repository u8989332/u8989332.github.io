<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Algorithms] Dynamic Programming - 0/1 Knapsack Problem - Space Complexity Optimization</title>
    <url>/2020/05/01/algorithms-dynamic-programming-0-1-knapsack-problem-space-complexity-optimization/</url>
    <content><![CDATA[<h2 id="1-問題說明"><a href="#1-問題說明" class="headerlink" title="1. 問題說明"></a>1. 問題說明</h2><p> 本篇是講解使用動態規劃(DP)解決0&#x2F;1背包問題的空間優化，而問題本身和範例請再查閱<a href="http://glj8989332.blogspot.com/2020/04/algorithms-dynamic-programming-01-knapsackproblem.html">[Algorithms] Dynamic Programming - 0&#x2F;1 Knapsack Problem</a>。<br> 原本Bottom-Up動態規劃的解決方式，是需要空間複雜度O(NW)，但可以再優化，只需要O(W)的空間做狀態轉移的計算。  </p>
<h2 id="2-空間複雜度優化"><a href="#2-空間複雜度優化" class="headerlink" title="2. 空間複雜度優化"></a>2. 空間複雜度優化</h2><p> 原本空間複雜度O(NW)的二維度狀態dp[i][j]，優化成一維度的動態規劃，定義狀態，  </p>
<p>dp[j] : 從前i種物品選擇之後，背包重量不超過j的最大總價值</p>
<p> 這狀態很特別，會一直覆蓋掉之前的狀態，所以看不出目前是哪一種物品選擇。  </p>
<p> 而它的初始化  </p>
<p>dp[0…..W] &#x3D; 0，任何背包沒裝任何物品，所以總價值都是0</p>
<p> 狀態的轉移縮短成1種：在前i-1種物品選擇第i個物品或者不選擇第i個物品，因此它的狀態轉移程式為：<br>[dp[j] &#x3D;max(dp[j], dp[j-w_{i}] + v_{i}), w_{i} leq j]  </p>
<p> 在 wi&lt;&#x3D; j 的狀況，代表現在背包的重量足夠裝第i個物品，因此可以選擇它或不選擇它。但是因為只剩下一維度的狀態，在使用雙層迴圈的虛擬碼會是： [for ileftarrow 0 to N-1 for jleftarrow W to w_{i} dp[j] &#x3D;max(dp[j], dp[j-w_{i}] + v_{i})]  </p>
<p> 這段虛擬碼背後的二維度狀態轉移是<br>[dp[i][j] &#x3D;max(dp[i-1][j], v_{i} +dp[i-1][j-w_{i}]), w_{i}leq j]  </p>
<p> 不可以將j的執行順序從 wi to W，否則這樣會變成完全背包問題，二維度狀態轉移會是：<br>[dp[i][j] &#x3D;max(dp[i-1][j], v_{i} +dp[i][j-w_{i}]), w_{i}leq j]<br> 最後計算出的背包的最大總價值為dp[W]。  </p>
<h3 id="2-1-迴圈版-Bottom-Up-動態規劃"><a href="#2-1-迴圈版-Bottom-Up-動態規劃" class="headerlink" title="2.1 迴圈版(Bottom-Up)動態規劃"></a>2.1 迴圈版(Bottom-Up)動態規劃</h3><p> 以迴圈實作，如下範例程式。  </p>
<p> 在執行函數bottom_up_01knapsack_1d前，將變數dp都初始化為0，代表任何背包上限重的最大總價值都為0。函數參數 ：  </p>
<ol>
<li>n: 物品總類數</li>
<li>curW: 背包的上限重量</li>
</ol>
<p> 迴圈有2層, 最外層是0….n-1，代表先選擇1個物品；裡面那層是curW…wi，代表當前的背包上限重量。<br> 以下用圖片解說迴圈解題過程，一開始初始化的dp表格如圖1。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/1.png"></a></p>
<p>圖1</p>
<p> 在 i &#x3D; 0, j &#x3D; 10時，背包上限 j &gt;&#x3D; w[0]， 可以裝下金幣，所以dp[10] &#x3D; max(dp[10], dp[10 - 2] + 5) &#x3D; 5，直到 j &#x3D; 2都是一樣條件，如圖2，已經計算完在挑選第1種物品後的最佳解。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/2.png"></a></p>
<p>圖2</p>
<p> 接著選擇藥水，在 i &#x3D; 1， j &lt;&#x3D; 5時，都是金幣與藥水一起選為最佳解(5 + 3 &#x3D; 8)；但 3 &lt;&#x3D; j &lt;&#x3D; 4，只能選擇金幣或者藥水，所以只選金幣為最佳解(5)，如圖3與圖4。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/3.png"></a></p>
<p>圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/4.png"></a></p>
<p>圖4</p>
<p> 接著選擇書本，在 i &#x3D; 2， j &#x3D; 10時，金幣、藥水與書本一起選為最佳解(5 + 3 + 2 &#x3D; 10)；但 7 &lt;&#x3D; j &lt;&#x3D; 9，有選擇書本和金幣的總價值(5 + 2 &#x3D; 7) 比金幣和藥水的總價值(5 + 3 &#x3D; 8)還少，維持總價值為8；在5 &lt;&#x3D; j &lt;&#x3D; 6，只能選擇書本的總價值(2)比金幣和藥水的總價值(5 + 3 &#x3D; 8)還少，維持總價值為8，如圖5與圖6。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/5.png"></a></p>
<p>圖5 </p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/6.png"></p>
<p>圖6</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/6-1.png"></a><br><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/6-1.png"></a></p>
<p> 接著選擇木劍，在 i &#x3D; 3， j &#x3D; 10時，金幣與劍木的總價值(5 + 4 &#x3D; 9)比金幣、藥水與書本一起選的最佳解(5 + 3 + 2 &#x3D; 10)還少，所以維持總價值為10；但 8 &lt;&#x3D; j &lt;&#x3D; 9，有選擇木劍和金幣的總價值(5 + 4 &#x3D; 9) 比金幣和藥水的總價值(5 + 3 &#x3D; 8)還多，總價值更新為9；在6 &lt;&#x3D; j &lt;&#x3D; 7，只能選擇木劍的總價值(4)比金幣和藥水的總價值(5 + 3 &#x3D; 8)還少，維持總價值為8，如圖7至圖9。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/7-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/7.png"></a></p>
<p>圖7</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/8-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/8.png"></a></p>
<p>圖8</p>
<p> 計算完的狀態如圖10，最佳解為dp[W] &#x3D; dp[10] &#x3D; 10，它和二維度解法的dp[4][10]是相等的。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/05/10-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/05/10.png"></a></p>
<p>圖10</p>
<p><strong>3. 效能分析</strong>  </p>
<p> DP的時間複雜度仍是O(NW)，但空間複雜度只需O(W)。  </p>
<h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ol>
<li>演算法筆記-0&#x2F;1 Knapsack Problem <a href="http://www.csie.ntnu.edu.tw/~u91029/KnapsackProblem.html">http://www.csie.ntnu.edu.tw/~u91029&#x2F;KnapsackProblem.html</a></li>
<li>背包九講 - 01 背包问题  <a href="https://github.com/tianyicui/pack">https://github.com/tianyicui/pack</a></li>
</ol>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Dynamic Programming</category>
        <category>Knapsack Problem</category>
      </categories>
  </entry>
  <entry>
    <title>Dynamic Programming - 0/1 Knapsack Problem</title>
    <url>/2020/04/18/algorithms-dynamic-programming-0-1-knapsack-problem/</url>
    <content><![CDATA[<p>Dynamic Programming - 0&#x2F;1 Knapsack Problem</p>
<h4 id="1-問題說明"><a href="#1-問題說明" class="headerlink" title="1. 問題說明"></a>1. 問題說明</h4><p> 0&#x2F;1背包問題(Knapsack Problem)的描述：有1個背包可以裝上限W的總重量，從N種物品挑進這背包裡。每1種物品有各自的價值vi(0 ≤ i ≤ N - 1) 和重量wi(0 ≤ i ≤ N - 1)。每1種物品的數量只有1個，求不超過背包總重量，這些物品裝進背包的最高價值。  </p>
<p>以遊戲角色取寶物的狀況作為說明:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/backpack.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/backpack.png" alt="0/1 Knapsack Problem 背包"></a></p>
<p>背包上限W &#x3D; 10</p>
<p>寶物共4種，分別是</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/coin.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/coin.png" alt="0/1 Knapsack Problem 金幣"></a></p>
<p>金幣, v0 = 5, w0 = 2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/potionRed.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/potionRed.png" alt="0/1 Knapsack Problem 藥水"></a></p>
<p>藥水, v1 = 3, w1 = 3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/tome.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/tome.png" alt="0/1 Knapsack Problem 書本"></a></p>
<p>書本, v2 = 2, w2 = 5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/woodSword.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/woodSword.png" alt="0/1 Knapsack Problem 木劍"></a></p>
<p>木劍, v3 = 4, w3 = 6</p>
<p>那麼，要如何挑選寶物，使背包裡的總價值最高呢？<br>(圖片來源: <a href="https://opengameart.org/content/fantasy-icon-pack-by-ravenmore-0">https://opengameart.org/content/fantasy-icon-pack-by-ravenmore-0</a> )</p>
<h4 id="2-貪婪法-非最佳解"><a href="#2-貪婪法-非最佳解" class="headerlink" title="2. 貪婪法(非最佳解)"></a>2. 貪婪法(非最佳解)</h4><p>使用貪婪法，從最大價值的寶物開始挑，所以會選擇  </p>
<p>金幣、木劍，總價值與總重量分別是5 + 4 &#x3D; 9與 2 + 6 &#x3D; 8，背包已經無法再裝其他寶物。  </p>
<p>但實際上最佳解並非9，接著以動態規劃的方式來解題。</p>
<h4 id="3-動態規劃"><a href="#3-動態規劃" class="headerlink" title="3. 動態規劃"></a>3. 動態規劃</h4><p>使用動態規劃時，先定義狀態，<br>dp[i][j] : 從前i種物品選擇之後，背包重量不超過j的最大總價值</p>
<p>狀態的初始值，</p>
<ol>
<li>dp[0][0…..W] &#x3D; 0，任何背包沒裝任何物品，所以總價值都是0</li>
<li>dp[0….N][0] &#x3D; 0，背包的上限為0，裝不了任何物品，所以總價值都是0</li>
</ol>
<p>狀態的轉移有2種：在前i-1種物品選擇第i個物品或者不選擇第i個物品，因此它的狀態轉移程式為：<br>$$dp[i][j] &#x3D;begin{cases}max(dp[i-1][j], v_{i} +dp[i-1][j-w_{i}]) &amp; w_{i}leq jdp[i-1][j] &amp; w_{i} &gt; jend{cases}$$  </p>
<p>在 wi&lt;&#x3D; j 的狀況，代表現在背包的重量足夠裝第i個物品，因此可以選擇它或不選擇它。若是wi&gt; j，代表第i個物品的重量超過現在背包的重量，不能選擇它，仍保持前i -1個物品的最大價值。  </p>
<p>背包的最大總價值為dp[N][W]。</p>
<h5 id="3-1-遞迴版-Top-Down-動態規劃"><a href="#3-1-遞迴版-Top-Down-動態規劃" class="headerlink" title="3.1 遞迴版(Top-Down)動態規劃"></a>3.1 遞迴版(Top-Down)動態規劃</h5><p>首先以Top-Down的策略，從大問題切成小問題來解決，以遞迴實作，如下範例程式：</p>
<p>在執行函數top_down_01knapsack前，將變數dp都初始化為-1，代表每種物品選擇與任何背包上限重的最大總價值尚未被計算。函數參數 ：</p>
<ol>
<li>i: 選擇完前i種物品</li>
<li>curW: 目前背包的上限重量</li>
</ol>
<p>　　<br>判斷條件：</p>
<ol>
<li>dp[i][curW] !&#x3D; -1： 如果不等於 -1，代表在選過i種物品且這個背包上限的最大價值被計算過，因此直接回傳此答案。</li>
<li>i &#x3D;&#x3D; 0 curW &#x3D;&#x3D; 0：如前述狀態的初始值，價值都是0。</li>
<li>w[i-1] &gt; curW：狀態轉移的規則之一，只能從別種物品繼續選擇</li>
<li>w[i-1] &lt;&#x3D; curW：狀態轉移的規則之一，選擇或不選擇此i-1物品，挑最大價值。</li>
</ol>
<p>在狀態轉移的規則裡，將計算結果都存在dp[i][curW]，才能讓後續的計算重複使用。  </p>
<p>以圖片講解遞迴執行的狀態樹，一開始的狀態如圖1，進入判斷條件w[3] &lt;&#x3D; curW，先不選擇w[3]，狀態如圖2。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/1.png" alt="Dynamic Programming - 0/1 Knapsack Problem 狀態樹"></a></p>
<p>圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/2.png" alt="Dynamic Programming - 0/1 Knapsack Problem 狀態樹"></a></p>
<p>圖2</p>
<p>之後會依序進入判斷條件w[2] &lt;&#x3D; curW、w[1] &lt;&#x3D; curW、w[0] &lt;&#x3D; curW都不選擇物品的狀態，直到 i &#x3D;&#x3D; 0 (沒有任何物品) 回傳價值0，如圖3至圖5。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/3.png" alt="狀態樹"></a></p>
<p>圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/4.png" alt="Dynamic Programming - 0/1 Knapsack Problem 狀態樹"></a></p>
<p>圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/5.png" alt="0/1 Knapsack Problem 狀態樹"></a></p>
<p>圖5</p>
<p>換另一個狀態轉移 w[0] &lt;&#x3D; curW 選擇w[0]物品，也是因為 i &#x3D;&#x3D; 0 (沒有任何物品) 而回傳價值0，如圖6。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/6.png" alt="0/1 Knapsack Problem  狀態樹 圖6"></a></p>
<p>圖6</p>
<p>在 i &#x3D; 1, curW &#x3D; 10的狀態，將w[0] &lt;&#x3D; curW的狀態轉移規則取最大價值，所以是取有選擇w[0] 金幣為該狀態的最佳解 : dp[1][10] &#x3D; 0 + 5 &#x3D; 5，如圖7。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/7.png" alt="0/1 Knapsack Problem  狀態樹 圖7"></a></p>
<p>圖7</p>
<p>接著在 i &#x3D; 2, curW &#x3D; 10的狀態，往w[1] &lt;&#x3D; curW的另一個狀態轉移規則，計算取w[1]的最大價值，所以依序計算　</p>
<ul>
<li>i &#x3D; 1, curW &#x3D; 7 : 選擇w[1]</li>
<li>i &#x3D; 0, curW &#x3D; 5 : 選擇w[1]但不選擇w[0]</li>
<li>i &#x3D; 0, curW &#x3D; 5 : 選擇w[1]且選擇w[0]</li>
</ul>
<p> </p>
<p>最後i &#x3D; 2, curW的最大總價值 dp[2][10] &#x3D; 8，如圖8至圖12。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/8.png" alt="0/1 Knapsack Problem  狀態樹 圖8"></a></p>
<p>圖8</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/9.png" alt=" 狀態樹 圖9"></a></p>
<p>圖9</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/10.png" alt="  狀態樹 圖10"></a></p>
<p>圖10</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/11.png" alt="狀態樹 圖11"></a></p>
<p>圖11</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/12.png" alt=" 狀態樹 圖12"></a></p>
<p>圖12</p>
<p>最終，所有狀態樹如圖13，這0&#x2F;1背包問題答案為dp[4][10] &#x3D; 10。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/13.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/13.png" alt="狀態樹 圖13"></a></p>
<p>圖13</p>
<h5 id="3-2-迴圈版-Bottom-Up-動態規劃"><a href="#3-2-迴圈版-Bottom-Up-動態規劃" class="headerlink" title="3.2 迴圈版(Bottom-Up)動態規劃"></a>3.2 迴圈版(Bottom-Up)動態規劃</h5><p>和遞迴相反，Bottom-Up是從子問題的解答拼湊成大問題的解答，通常以迴圈實作，如下範例程式。<br>在執行函數bottom_up_01knapsack前，將變數dp都初始化為0，代表每種物品選擇與任何背包上限重的最大總價值都為0。函數參數 ：</p>
<ol>
<li>n: 物品總類數</li>
<li>curW: 背包的上限重量</li>
</ol>
<p>迴圈有2層, 最外層是0….n-1，代表先選擇1個物品；裡面那層是0….curW，代表當前的背包上限重量。<br>以下用圖片解說迴圈解題過程，一開始初始化的dp表格如圖14。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/1-1.png" alt=" 狀態樹 圖14"></a></p>
<p>圖14</p>
<p>在 i &#x3D; 0, j &#x3D; 2時，背包上限 j &gt;&#x3D; w[0]， 可以裝下金幣，所以dp[1][2] &#x3D; max(dp[0][2], dp[0][2 - 2] + 5) &#x3D; 5，直到 j &#x3D; 10都是一樣條件，如圖15至圖17，已經計算完在挑選第1種物品後的最佳解。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/2-1.png" alt="狀態樹 圖15"></a></p>
<p>圖15</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-6.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-6.png" alt="狀態樹 圖16"></a></p>
<p>圖16</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-7.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-7.png"></a></p>
<p>圖17</p>
<p>接著選擇藥水，在 i &#x3D; 1， j &lt;&#x3D; 2時，都是未達背包上限重而不能選擇藥水的最佳解，如圖18。  </p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-8.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-8.png"></a></p>
<p>圖18</p>
<p>到了 j &#x3D; 3，可以背包上限可選擇藥水，所以dp[2][3] &#x3D; max(dp[1][3], dp[1][3-3] + 3) &#x3D; max(5, 3) &#x3D; 5，仍是以沒選擇藥水為最佳解，如圖19。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-9.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-9.png"></a></p>
<p>圖19</p>
<p>到了 j &#x3D; 5，背包可以裝金幣和藥水，因此dp[2][5] &#x3D; max(dp[1][5], dp[1][5-3]+3) &#x3D; max(5, 5 + 3) &#x3D; 8，之後 j &#x3D; 6~10也是如此，如圖20與圖21。  </p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-10.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-10.png"></a></p>
<p>圖20</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image.jpeg"></a></p>
<p>圖21</p>
<p>接著選擇書本，在 i &#x3D; 2， j &lt;&#x3D; 4時，都是未達背包上限重而不能選擇書本的最佳解，如圖22。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-1.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-1.jpeg"></a></p>
<p>圖22</p>
<p>到了 j &#x3D; 5，可以背包上限可選擇書本，所以dp[3][5] &#x3D; max(dp[2][5], dp[2][5-5] + 2) &#x3D; max(8, 2) &#x3D; 8，仍是以沒選擇書本為最佳解，如圖23。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-2.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-2.jpeg"></a></p>
<p>圖23</p>
<p>到了 j &#x3D; 7，背包可以裝金幣和書本，因此dp[3][7] &#x3D; max(dp[2][7], dp[2][7-5]+2) &#x3D; max(8, 5 + 2) &#x3D; 7，仍是金幣和藥水組合為最佳解，之後 j &#x3D; 8~9也是如此，如圖24。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-3.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-3.jpeg"></a></p>
<p>圖24</p>
<p>到了 j &#x3D; 10，dp[3][10] &#x3D; max(dp[2][10], dp[2][10-5]+2) &#x3D; max(8, 8 + 2) &#x3D; 10，金幣、藥水與書本組合為最佳解，如圖25。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-4.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-4.jpeg"></a></p>
<p>圖25</p>
<p>接著選擇木劍，在 i &#x3D; 3， j &lt;&#x3D; 5時，都是未達背包上限重而不能選擇木劍的最佳解，如圖26。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-5.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-5.jpeg"></a></p>
<p>圖26</p>
<p>到了 j &#x3D; 6，可以背包上限可選擇木劍，所以dp[4][6] &#x3D; max(dp[3][6], dp[3][6-6] + 4) &#x3D; max(8, 4) &#x3D; 8，仍是以沒選擇木劍為最佳解，如圖27。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-6.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-6.jpeg"></a></p>
<p>圖27</p>
<p>到了 j &#x3D; 8，背包可以裝金幣和木劍，因此dp[4][8] &#x3D; max(dp[3][8], dp[3][8-6]+4) &#x3D; max(8, 5 + 4) &#x3D; 9，金幣和木劍組合為最佳解，之後 j &#x3D; 9也是如此，如圖28。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-7.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-7.jpeg"></a></p>
<p>圖28</p>
<p>最後在 j &#x3D; 10，dp[4][10] &#x3D; max(dp[3][10], dp[3][10-6]+4) &#x3D; max(10, 5 + 4) &#x3D; 10，仍以金幣、藥水和書本組合為最佳解，也計算完所有條件的最佳解，回傳dp[4][10]，如圖29。</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-8.jpeg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-8.jpeg"></a></p>
<p>圖29</p>
<h4 id="4-效能分析"><a href="#4-效能分析" class="headerlink" title="4. 效能分析"></a><strong>4. 效能分析</strong></h4><p>在尚未採用DP的方法之前，狀態樹會以2的N次方(選與不選)計算，時間複雜度會是O(2n)。<br>採用DP的方法，時間複雜度降低為O(NW)，且空間複雜度是O(NW)。<br>還有一種壓縮成1維陣列的DP狀態算法，後續會在講解。</p>
<p><strong>5. 心得</strong></p>
<p>很久沒在做DP之類的演算法題目，解題的靈感（壓）漸漸消失～～畫個圖做筆記，加深對演算法的印象。<br>之後沒意外，會繼續寫解題報告、應用開發的文章～參考文獻</p>
<ol>
<li>演算法筆記-Dynamic Programming 0&#x2F;1 Knapsack Problem　<a href="http://www.csie.ntnu.edu.tw/~u91029/KnapsackProblem.html">http://www.csie.ntnu.edu.tw/~u91029&#x2F;KnapsackProblem.html</a></li>
<li>背包九講 - 01 背包问题 <a href="https://github.com/tianyicui/pack">https://github.com/tianyicui/pack</a></li>
</ol>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Dynamic Programming</category>
        <category>Knapsack Problem</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET  Core 網站！系列文章 - (8) 建立商品列表的頁面 - 1</title>
    <url>/2020/09/23/containerized-asp-net-core-catalog-page-part-1/</url>
    <content><![CDATA[<p>前幾篇文章已完成商品列表的Web Api，這篇開始建立網頁介面，串接商品的Ｗeb Api並呈現商品列表。</p>
<h4 id="1-建立Web網頁專案"><a href="#1-建立Web網頁專案" class="headerlink" title="1. 建立Web網頁專案"></a>1. 建立Web網頁專案</h4><p>開啟VS，在RPGShop方案的src新增Presentation的方案資料夾，並在Presentation資料夾加入新的ASP.NET Core專案，專案名稱為WebMvc，選擇專案類型Web應用程式(模型-檢視-控制器)，先不要用任何HTTPS、Docker與驗證，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/create2Bproject-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/create2Bproject.png" alt="容器化 ASP.NET  Core 新增專案"></a></p>
<p>圖1</p>
<p>按下建立，會產生預設的HomeController和Model、View，如圖2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/webmvc2Bproject-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/webmvc2Bproject.png" alt="容器化 ASP.NET  Core default project"></a></p>
<p>圖2</p>
<h4 id="2-新增HttpClient與商品服務Api互動的基礎模組"><a href="#2-新增HttpClient與商品服務Api互動的基礎模組" class="headerlink" title="2. 新增HttpClient與商品服務Api互動的基礎模組"></a>2. 新增HttpClient與商品服務Api互動的基礎模組</h4><p>在WebMvc專案新增資料夾Infrastructure，會將一些HttpClient的抽象與實作，以及定義與商品服務Api的Url Pattern，建立在這個資料夾內。</p>
<h5 id="2-1-新增介面-IHttpClient"><a href="#2-1-新增介面-IHttpClient" class="headerlink" title="2.1 新增介面: IHttpClient"></a>2.1 新增介面: IHttpClient</h5><p>定義常用的Http Get&#x2F;Post&#x2F;Put&#x2F;Delete的非同步函式：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebMvc.Infrastructure</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHttpClient</span> &#123;</span><br><span class="line">Task &lt; <span class="built_in">string</span> &gt; GetStringAsync(<span class="built_in">string</span> uri);</span><br><span class="line">Task &lt; HttpResponseMessage &gt; PostAsync &lt; T &gt; (<span class="built_in">string</span> uri, T item);</span><br><span class="line">Task &lt; HttpResponseMessage &gt; DeleteAsync(<span class="built_in">string</span> uri);</span><br><span class="line">Task &lt; HttpResponseMessage &gt; PutAsync &lt; T &gt; (<span class="built_in">string</span> uri, T item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-新增IHttpClient的實作-CustomHttpClient"><a href="#2-2-新增IHttpClient的實作-CustomHttpClient" class="headerlink" title="2.2 新增IHttpClient的實作: CustomHttpClient"></a>2.2 新增IHttpClient的實作: CustomHttpClient</h5><p>　　建立一個CustomHttpClient類別並實作IHttpClient，會從Constructor注入System.Net.Http的HttpClient和logger。 　　其中Post和Put的方法有大部分共通的寫法，於是可以寫成共同的函式DoPostPutAsync，而要放在Body的資料，使用Newtonsoft.Json序列化成Json。 　　</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebMvc.Infrastructure</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomHttpClient</span>: <span class="title">IHttpClient</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HttpClient _client;</span><br><span class="line"><span class="keyword">private</span> ILogger &lt; CustomHttpClient &gt; _logger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomHttpClient</span>(<span class="params">HttpClient client, ILogger &lt; CustomHttpClient &gt; logger</span>)</span> &#123;</span><br><span class="line">_client = client;</span><br><span class="line">_logger = logger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; HttpResponseMessage &gt; DeleteAsync(<span class="built_in">string</span> uri) &#123;</span><br><span class="line"><span class="keyword">var</span> requestMessage = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Delete, uri);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> _client.SendAsync(requestMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; <span class="built_in">string</span> &gt; GetStringAsync(<span class="built_in">string</span> uri) &#123;</span><br><span class="line"><span class="keyword">var</span> requestMessage = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, uri);</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(requestMessage);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span> &lt; HttpResponseMessage &gt; <span class="title">PostAsync</span> &lt; T &gt; (<span class="params"><span class="built_in">string</span> uri, T item</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> DoPostPutAsync(HttpMethod.Post, uri, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span> &lt; HttpResponseMessage &gt; <span class="title">PutAsync</span> &lt; T &gt; (<span class="params"><span class="built_in">string</span> uri, T item</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> DoPostPutAsync(HttpMethod.Put, uri, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="title">Task</span> &lt; HttpResponseMessage &gt; <span class="title">DoPostPutAsync</span> &lt; T &gt; (<span class="params">HttpMethod method, <span class="built_in">string</span> uri, T item</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (method != HttpMethod.Post &amp;&amp; method != HttpMethod.Put) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Value must be either post or put.&quot;</span>, <span class="keyword">nameof</span>(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> requestMessage = <span class="keyword">new</span> HttpRequestMessage(method, uri) &#123;</span><br><span class="line">Content = <span class="keyword">new</span> StringContent(JsonConvert.SerializeObject(item), System.Text.Encoding.UTF8, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(requestMessage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (response.StatusCode == System.Net.HttpStatusCode.InternalServerError) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpRequestException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-新增ApiPaths類別"><a href="#2-3-新增ApiPaths類別" class="headerlink" title="2.3 新增ApiPaths類別"></a>2.3 新增ApiPaths類別</h5><p>　　所有跟Api互動的Url Pattern，都在此類別規範，而我們這商品列表的頁面需要</p>
<ol>
<li>商品類型列表</li>
<li>商品分頁列表</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WebMvc.Infrastructure</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ApiPaths</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Catalog</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAllCatalogItems</span>(<span class="params"><span class="built_in">string</span> baseUri, <span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, <span class="built_in">int</span> ? type</span>)</span> &#123;</span><br><span class="line"><span class="built_in">string</span> typeQueryString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (type.HasValue) &#123;</span><br><span class="line">typeQueryString = type.Value.ToString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $ <span class="string">&quot;&#123;baseUri&#125;items?catalogTypeId=&#123;typeQueryString&#125;&amp;pageIndex=&#123;pageIndex&#125;&amp;pageSize=&#123;pageSize&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAllTypes</span>(<span class="params"><span class="built_in">string</span> baseUri</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> $ <span class="string">&quot;&#123;baseUri&#125;catalogTypes&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-—————————————–</p>
<p>下一篇將寫從Api互動的Service與網頁呈現的內容</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET  Core網站！系列文章 - (3) 建立商品服務的Api - 1</title>
    <url>/2020/09/18/containerized-asp-net-core-catalog-part-1/</url>
    <content><![CDATA[<h4 id="1-開發環境"><a href="#1-開發環境" class="headerlink" title="1. 開發環境"></a>1. 開發環境</h4><p>　　本系列文章所需的開發環境如下：</p>
<ul>
<li>Visual Studio 2019（以下簡稱VS），安裝的模組須包含ASP.NET與.NET Core開發</li>
<li>.NET Core SDK 3.1.401 (支援Runtime 3.1.7) ，官網連結: <a href="https://dotnet.microsoft.com/download/dotnet-core/3.1">https://dotnet.microsoft.com/download/dotnet-core/3.1</a></li>
<li>Docker，官網連結：<a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a></li>
<li>Visual Studio Code (可選)，如果習慣用VS Code + dotnet CLI可以改用這個</li>
<li>SQL Server Management Studio (SSMS) (可選)，用來連Docker啟用的SQL Server資料庫</li>
<li>我的作業系統是Windows 10，如果是別的作業系統請自行確認開發套件是否可用</li>
</ul>
<h4 id="2-建立專案"><a href="#2-建立專案" class="headerlink" title="2. 建立專案"></a>2. 建立專案</h4><p>　　開啟VS，建立一個空白方案，名稱叫RPGShop。在該方案新增src和下層的Services方案資料夾，並在Services資料夾加入新的ASP.NET Core專案，專案名稱為CatalogApi，選擇專案類型API，先不要用任何HTTPS、Docker與驗證，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/new2Bproject-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/new2Bproject.png"></a></p>
<p>圖1</p>
<p>　　按下建立，會產生預設的WeatherController和相關Model，如圖2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/25E52588259D25E525A7258B25E525B0258825E625A12588-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/25E52588259D25E525A7258B25E525B0258825E625A12588.png"></a></p>
<p>圖2</p>
<h4 id="3-新增Entity"><a href="#3-新增Entity" class="headerlink" title="3. 新增Entity"></a>3. 新增Entity</h4><p>　　在CatalogApi專案新增資料夾Domain，新增CatalogType類別，代表商品的類型名稱和獨立的Id：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.Domain</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatalogType</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>　　一樣在資料夾Domain，新增CatalogItem類別，代表商品本身，其中CatalogTypeId和CatalogType是關聯，商品類別與商品是一對多：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.Domain</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatalogItem</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> PictureFileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> CatalogTypeId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> CatalogType CatalogType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-安裝Entity-Framework-Core"><a href="#4-安裝Entity-Framework-Core" class="headerlink" title="4. 安裝Entity Framework Core"></a>4. 安裝Entity Framework Core</h4><p>　　在CatalogApi專案右鍵&#x3D;&gt;選擇[管理NuGet套件]，安裝Entity Framework Core的相關套件，包含這些：</p>
<ul>
<li>Microsoft.EntityFrameworkCore , 版本 3.1.7</li>
<li>Microsoft.EntityFrameworkCore.Design , 版本 3.1.7</li>
<li>Microsoft.EntityFrameworkCore.Relational , 版本 3.1.7</li>
<li>Microsoft.EntityFrameworkCore.SqlServer , 版本 3.1.7</li>
</ul>
<p>-—————————————————–</p>
<p>先寫到這邊，下章開始使用Entity Framework Core建立DbContext、Docker啟用SQL Server，啟用Migrations&#x2F;Update database、載入初始化資料等。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET Core 網站！系列文章 - (6) 建立商品服務的Api - 4</title>
    <url>/2020/09/21/containerized-asp-net-core-catalog-part-2-2/</url>
    <content><![CDATA[<h4 id="1-安裝Swagger"><a href="#1-安裝Swagger" class="headerlink" title="1. 安裝Swagger"></a>1. 安裝Swagger</h4><p>　在CatalogApi專案右鍵[管理NuGet套件]，安裝Swagger相關的套件：</p>
<p>Swashbuckle.AspNetCore.SwaggerGen , 版本 5.6.1</p>
<p>Swashbuckle.AspNetCore.SwaggerUI , 版本 5.6.1 　</p>
<h4 id="2-在Startup-cs註冊與使用Swagger"><a href="#2-在Startup-cs註冊與使用Swagger" class="headerlink" title="2. 在Startup.cs註冊與使用Swagger"></a>2. 在Startup.cs註冊與使用Swagger</h4><h5 id="2-1-ConfigureServices的服務註冊"><a href="#2-1-ConfigureServices的服務註冊" class="headerlink" title="2.1 ConfigureServices的服務註冊"></a>2.1 ConfigureServices的服務註冊</h5><p>　　需使用SwaggerGen註冊Swagger的功能，並加上對此Api專案的描述。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span> &#123;</span><br><span class="line"><span class="comment">// other code...</span></span><br><span class="line">services.AddSwaggerGen(options = &gt;&#123;</span><br><span class="line">options.SwaggerDoc(<span class="string">&quot;v1&quot;</span>, <span class="keyword">new</span> Microsoft.OpenApi.Models.OpenApiInfo &#123;</span><br><span class="line">Version = <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">Title = <span class="string">&quot;Catalog API&quot;</span>,</span><br><span class="line">Description = <span class="string">&quot;Catalog apis&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-Configure加上Swagger的Middleware"><a href="#2-2-Configure加上Swagger的Middleware" class="headerlink" title="2.2 Configure加上Swagger的Middleware"></a>2.2 Configure加上Swagger的Middleware</h5><p>　　在Pipeline加上Swagger的Middleware，放在app.UseRouting之前，指定它的json endpoint與名稱。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span> &#123;</span><br><span class="line"><span class="comment">// other code...</span></span><br><span class="line">app.UseSwagger().UseSwaggerUI(c = &gt;&#123;</span><br><span class="line">c.SwaggerEndpoint(</span><br><span class="line">$ <span class="string">&quot;/swagger/v1/swagger.json&quot;</span>, <span class="string">&quot;CatalogAPI V1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.UseRouting();</span><br><span class="line"></span><br><span class="line"><span class="comment">// other code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-修改launchSettings-json"><a href="#3-修改launchSettings-json" class="headerlink" title="3. 修改launchSettings.json"></a>3. 修改launchSettings.json</h4><p>　　從VS執行程式的參數會依照launchSettings.json，包含URL與其他環境變數。而原先預設在IIS Express的launchUrl是weatherforecast，將它改成swagger，這樣VS啟用IIS的設定會用swagger： 　　而它主要是讀取商品的照片，並回傳File Result：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://json.schemastore.org/launchsettings.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;iisSettings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;windowsAuthentication&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;anonymousAuthentication&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iisExpress&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:13914&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;IIS Express&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span><span class="string">&quot;IISExpress&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;swagger&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Development&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;CatalogApi&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Development&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-移除預設專案的範例"><a href="#4-移除預設專案的範例" class="headerlink" title="4. 移除預設專案的範例"></a>4. 移除預設專案的範例</h4><p>　　 　　原先建立Web API專案時，會有WeatherForecast的Controller與Model，將這些都移除。</p>
<h4 id="5-新增商品的圖片"><a href="#5-新增商品的圖片" class="headerlink" title="5. 新增商品的圖片"></a>5. 新增商品的圖片</h4><p>　　本系列使用的商品圖片來自於 <a href="https://opengameart.org/content/game-icons-knight-armor">opengameart.org的Game Icons Knight Armor</a> ，裡面有10種裝備的圖片，在專案根目錄新增wwwroot資料夾和下一層的Pictures資料夾，將這10張圖片都放進此Pictures，如圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/wwwroot2Bpictures-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/wwwroot2Bpictures.png" alt="容器化 ASP.NET Core wwwroot"></a></p>
<p>圖1</p>
<h4 id="6-VS執行"><a href="#6-VS執行" class="headerlink" title="6. VS執行"></a>6. VS執行</h4><p>　　 　　開啟Debug，看到畫面是Swagger的介面，包含我們所寫的Controller的Action，如圖2。每個API都能點籍，並按下Try it out的按鈕，輸入參數做實際的API運作。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/swagger-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/swagger.png" alt="容器化 ASP.NET Core swagger"></a></p>
<p>圖2</p>
<p>　　比如點Http Get的&#x2F;api&#x2F;Catalog&#x2F;Items，輸入查詢的catalog type id、pagesize與pageIndex，將回傳一組Json物件，如圖3。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/swagger2Bitems2Bquery-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/swagger2Bitems2Bquery.png" alt="容器化 ASP.NET Core swagger api test"></a></p>
<p>圖3</p>
<p>點Http Post的&#x2F;api&#x2F;Catalog&#x2F;Items，輸入要新增CatalogItem的Json，送出後將回傳Statuc code 201的結果，也確認資料庫有新增這一筆資料，如圖4、圖5與圖6。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/http2Bpost2Bjson-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/http2Bpost2Bjson.png" alt="swagger return result"></a></p>
<p>圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/http2Bpost2Bjson2Bresponse-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/http2Bpost2Bjson2Bresponse.png" alt=" swagger return result"></a></p>
<p>圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/db2Bresult2Bafter2Bpost-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/db2Bresult2Bafter2Bpost.png" alt=" swagger return result"></a></p>
<p>圖6</p>
<p>　　其他的API都可以運作，這就不再舉例。</p>
<p>-————————————————————-</p>
<p>下一篇將把Catalog Api上到Docker，整合為容器化的服務。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Swagger</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (4) 建立商品服務的Api - 2</title>
    <url>/2020/09/19/containerized-asp-net-core-catalog-part-2/</url>
    <content><![CDATA[<h4 id="1-新增繼承DbContext的類別"><a href="#1-新增繼承DbContext的類別" class="headerlink" title="1. 新增繼承DbContext的類別"></a>1. 新增繼承DbContext的類別</h4><p>　在CatalogApi專案新增資料夾Data，新增CatalogContext類別，並繼承DbContext，要與DB存取資料都是以此物件。</p>
<p>　　前述的CatalogType和CatalogItem兩個Entity加入至CatalogContext的DbSet，才能對這兩個做CRUD的功能。 　　在這使用Fluent API，可以宣告資料庫的表格規範，包含欄位的限制、Relation的設計等。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> CatalogApi.Domain;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.Data</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatalogContext</span> : <span class="title">DbContext</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">CatalogContext</span>(<span class="params">DbContextOptions options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line"> builder.Entity&lt;CatalogType&gt;(x =&gt;</span><br><span class="line"> &#123;</span><br><span class="line"> x.ToTable(<span class="string">&quot;CatalogType&quot;</span>);</span><br><span class="line"> x.Property(c =&gt; c.Type)</span><br><span class="line"> .IsRequired()</span><br><span class="line"> .HasMaxLength(<span class="number">100</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> builder.Entity&lt;CatalogItem&gt;(x =&gt;</span><br><span class="line"> &#123;</span><br><span class="line"> x.ToTable(<span class="string">&quot;Catalog&quot;</span>);</span><br><span class="line"> x.Property(c =&gt; c.Name)</span><br><span class="line"> .IsRequired()</span><br><span class="line"> .HasMaxLength(<span class="number">50</span>);</span><br><span class="line"> x.Property(c =&gt; c.Price)</span><br><span class="line"> .IsRequired();</span><br><span class="line"> x.HasOne(c =&gt; c.CatalogType)</span><br><span class="line"> .WithMany()</span><br><span class="line"> .HasForeignKey(c =&gt; c.CatalogTypeId);</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> DbSet&lt;CatalogType&gt; CatalogTypes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> DbSet&lt;CatalogItem&gt; CatalogItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-新建Docker-Compose文件，並啟用Sql-Server"><a href="#2-新建Docker-Compose文件，並啟用Sql-Server" class="headerlink" title="2. 新建Docker Compose文件，並啟用Sql Server"></a>2. 新建Docker Compose文件，並啟用Sql Server</h4><p>　　在方案的根目錄，建立docker-compose.yml，並加入至方案。yml的內容如下，其中有幾個參數：</p>
<ul>
<li>networks：將資料庫規範在backend的網路區域，後續其他系統會歸類在其他區域</li>
<li>image：從Docker Hub要安裝的SQL Server Image，預設用目前最新的</li>
<li>ports：本機端的Port 1445映射Docker container的1433 port，由於本機已經裝過SQL Server，所以要用另外的Port 1445</li>
<li>container_name：建立本專案SQL Server的container名稱</li>
<li>environment：啟用SQL Server必須給定的參數有ACCEPT_EULA和SA_PASSWORD，前者參數必須指定Y，否則不給用；後者是SQL Server預設管理者SA的密碼</li>
</ul>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.4&quot;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line"> backend:</span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line"> mssqlserver:</span><br><span class="line"> image: <span class="string">&quot;microsoft/mssql-server-linux:latest&quot;</span></span><br><span class="line"> ports:</span><br><span class="line"> - <span class="string">&quot;1445:1433&quot;</span></span><br><span class="line"></span><br><span class="line"> container_name: rpgmssqlcontainer</span><br><span class="line"> environment:</span><br><span class="line"> - ACCEPT_EULA=Y</span><br><span class="line"> - SA_PASSWORD=JustTest!</span><br><span class="line"> networks:</span><br><span class="line"> - backend</span><br></pre></td></tr></table></figure>

<p>　　在docker-compose.yml啟用cmd，並執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>Docker將建立一個SQL Server的Container，此時開啟SSMS，登入的伺服器名稱為 localhost,1445 (要有逗號並串接port)，如圖1，代表Docker Container的SQL Server可使用。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/login2Bssms2Bto2Bdocker2Bsql2Bserver-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/login2Bssms2Bto2Bdocker2Bsql2Bserver.png"></a></p>
<p>圖1</p>
<h4 id="3-設定appsettings-json的連線字串"><a href="#3-設定appsettings-json的連線字串" class="headerlink" title="3. 設定appsettings.json的連線字串"></a>3. 設定appsettings.json的連線字串</h4><p>　　在appsettings.json增加4個屬性</p>
<p>“DatabaseServer”: “localhost,1445”,</p>
<p>“DatabaseName”: “CatalogDb”,<br>“DatabaseUser”: “sa”,</p>
<p>“DatabasePassword”: “JustTest!”</p>
<p>將連線字串的主要參數拆解，可以區分用VS和Dokcer的測試參數。</p>
<h4 id="4-設定Startup-cs"><a href="#4-設定Startup-cs" class="headerlink" title="4. 設定Startup.cs"></a>4. 設定Startup.cs</h4><p>　　在public void ConfigureServices(IServiceCollection services)，添加註冊Sql Server的連線資訊和DbContext的Services：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">// other code...</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">string</span> server = Configuration[<span class="string">&quot;DatabaseServer&quot;</span>];</span><br><span class="line"> <span class="built_in">string</span> database = Configuration[<span class="string">&quot;DatabaseName&quot;</span>];</span><br><span class="line"> <span class="built_in">string</span> user = Configuration[<span class="string">&quot;DatabaseUser&quot;</span>];</span><br><span class="line"> <span class="built_in">string</span> password = Configuration[<span class="string">&quot;DatabasePassword&quot;</span>];</span><br><span class="line"> <span class="built_in">string</span> connectionString = <span class="built_in">string</span>.Format(<span class="string">&quot;Server=&#123;0&#125;;Database=&#123;1&#125;;User=&#123;2&#125;;Password=&#123;3&#125;;&quot;</span>, server, database, user, password);</span><br><span class="line"></span><br><span class="line"> services.AddDbContext(options =&gt; options.UseSqlServer(connectionString));</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// other code...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-建立資料庫遷移"><a href="#5-建立資料庫遷移" class="headerlink" title="5. 建立資料庫遷移"></a>5. 建立資料庫遷移</h4><p>　　開啟cmd，將路徑切換到CatalogApi.csproj的目錄。假如尚未安裝dotnet ef的工具，在cmd執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet tool install --global dotnet-ef --version 3.1.7</span><br></pre></td></tr></table></figure>

<p>　　接著輸入第一次遷移的指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations add Initialize</span><br></pre></td></tr></table></figure>

<p>　　在專案內將產生Migrations的資料夾和遷移相關的.cs檔，如圖2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/add2Bmigrations-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/add2Bmigrations.png"></a></p>
<p>圖2</p>
<p>　　輸入此遷移的更新資料庫指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure>

<p>　　成功的話，用SSMS檢查，可看見資料庫CatalogDb和2個表格Catalog和CatalogType，如圖3。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/update2Bdatabase-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/update2Bdatabase.png"></a></p>
<p>圖3</p>
<h4 id="6-建立預設資料Seed"><a href="#6-建立預設資料Seed" class="headerlink" title="6. 建立預設資料Seed"></a>6. 建立預設資料Seed</h4><p>　　商品的類型與列表，在系統剛啟動時會先檢查資料庫是否有資料，如果沒有的話，建立一個Seed程式(或者是SQL腳本)，將預設的資料寫進資料庫。 　　首先在Data資料夾建立CatalogSeed.cs，建立一個非同步的SeedAsync函式，先檢查CatalogItem和CatalogType是否有任何值，沒有的話則寫入預設的資料。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CatalogApi.Domain;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.Data</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatalogSeed</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">SeedAsync</span>(<span class="params">CatalogContext context</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!context.CatalogTypes.Any()) &#123;</span><br><span class="line">context.CatalogTypes.AddRange(GetDefaultCatalogTypes());</span><br><span class="line"><span class="keyword">await</span> context.SaveChangesAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!context.CatalogItems.Any()) &#123;</span><br><span class="line">context.CatalogItems.AddRange(GetDefaultItems());</span><br><span class="line"><span class="keyword">await</span> context.SaveChangesAsync();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; CatalogType &gt; <span class="title">GetDefaultCatalogTypes</span>()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> List &lt; CatalogType &gt; () &#123;</span><br><span class="line"><span class="keyword">new</span> CatalogType() &#123;</span><br><span class="line">Type = <span class="string">&quot;Head&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogType() &#123;</span><br><span class="line">Type = <span class="string">&quot;Chest&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogType() &#123;</span><br><span class="line">Type = <span class="string">&quot;Hands&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogType() &#123;</span><br><span class="line">Type = <span class="string">&quot;Legs&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogType() &#123;</span><br><span class="line">Type = <span class="string">&quot;Feet&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">IEnumerable</span> &lt; CatalogItem &gt; <span class="title">GetDefaultItems</span>()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> List &lt; CatalogItem &gt; () &#123;</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">1</span>,</span><br><span class="line">Description = <span class="string">&quot;Normal Helmet&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Normal Helmet&quot;</span>,</span><br><span class="line">Price = <span class="number">10</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;1.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">1</span>,</span><br><span class="line">Description = <span class="string">&quot;Great Helmet&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Great Helmet&quot;</span>,</span><br><span class="line">Price = <span class="number">50</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;2.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">2</span>,</span><br><span class="line">Description = <span class="string">&quot;Normal Armor&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Normal Armor&quot;</span>,</span><br><span class="line">Price = <span class="number">15</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;3.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">2</span>,</span><br><span class="line">Description = <span class="string">&quot;Great Armor&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Great Armor&quot;</span>,</span><br><span class="line">Price = <span class="number">42</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;4.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">4</span>,</span><br><span class="line">Description = <span class="string">&quot;Normal Robe&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Normal Robe&quot;</span>,</span><br><span class="line">Price = <span class="number">12</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;5.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">4</span>,</span><br><span class="line">Description = <span class="string">&quot;Great Robe&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Great Robe&quot;</span>,</span><br><span class="line">Price = <span class="number">44</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;6.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">3</span>,</span><br><span class="line">Description = <span class="string">&quot;Normal Gloves&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Normal Gloves&quot;</span>,</span><br><span class="line">Price = <span class="number">5</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;7.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">3</span>,</span><br><span class="line">Description = <span class="string">&quot;Great Gloves&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Great Gloves&quot;</span>,</span><br><span class="line">Price = <span class="number">69</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;8.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">5</span>,</span><br><span class="line">Description = <span class="string">&quot;Normal Boots&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Normal Boots&quot;</span>,</span><br><span class="line">Price = <span class="number">13</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;9.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> CatalogItem() &#123;</span><br><span class="line">CatalogTypeId = <span class="number">5</span>,</span><br><span class="line">Description = <span class="string">&quot;Great Boots&quot;</span>,</span><br><span class="line">Name = <span class="string">&quot;Great Boots&quot;</span>,</span><br><span class="line">Price = <span class="number">55</span> M,</span><br><span class="line">PictureFileName = <span class="string">&quot;10.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　接著在Program.cs，使用GetRequiredService取的CatalogContext，並呼叫CatalogSeed做寫資料的功能：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CatalogApi.Data;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line"><span class="keyword">var</span> host = CreateHostBuilder(args).Build();</span><br><span class="line"><span class="keyword">using</span>(<span class="keyword">var</span> scope = host.Services.CreateScope()) &#123;</span><br><span class="line"><span class="keyword">var</span> services = scope.ServiceProvider;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> context = services.GetRequiredService &lt; CatalogContext &gt; ();</span><br><span class="line">CatalogSeed.SeedAsync(context).Wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line"><span class="keyword">var</span> logger = services.GetRequiredService &lt; ILogger &lt; Program &gt;&gt; ();</span><br><span class="line">logger.LogError(ex, <span class="string">&quot;An error occured while seeding the database&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> = &gt;Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(webBuilder = &gt;&#123;</span><br><span class="line">webBuilder.UseStartup &lt; Startup &gt; ();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　在VS啟用Debug，讓程式執行，再用SSMS確認有寫入預設資料，如圖4。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/seed2Bresult-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/seed2Bresult.png"></a></p>
<p>圖4</p>
<p>-————————————————————-</p>
<p>下一篇將撰寫ApiController對商品的CRUD功能設計。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET Core 網站！系列文章 - (5) 建立商品服務的Api - 3</title>
    <url>/2020/09/20/containerized-asp-net-core-catalog-part-3/</url>
    <content><![CDATA[<h4 id="1-新增CatalogSettings類別"><a href="#1-新增CatalogSettings類別" class="headerlink" title="1. 新增CatalogSettings類別"></a>1. 新增CatalogSettings類別</h4><p>　在CatalogApi專案的根目錄，新增CatalogSettings類別，裡面只有一個字串類型的ExternalCatalogBaseUrl Property，是用來從appSettings&#x2F;環境變數讀取該Catalog Api的Base Url。</p>
<p>　在Startup.cs將Configuration注入CatalogSettings參數：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  services.Configure&lt;CatalogSettings&gt;(Configuration);</span><br><span class="line"></span><br><span class="line"><span class="comment">// other code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　在appSettings.json，新增ExternalCatalogBaseUrl屬性與值，而值是以launchSettings.json的URL，後續在容器化使用其他的URL： “ExternalCatalogBaseUrl” : “<a href="http://localhost:13914/">http://localhost:13914</a>“ 　</p>
<h4 id="2-新增CatalogController類別"><a href="#2-新增CatalogController類別" class="headerlink" title="2. 新增CatalogController類別"></a>2. 新增CatalogController類別</h4><p>　在CatalogApi專案的資料夾Controllers，新增CatalogController類別，並繼承ControllerBase，也增加屬性[Route(“api&#x2F;[controller]“)]與[ApiController]。</p>
<h5 id="2-1-注入CatalogContext與自定義的CatalogSettings參數"><a href="#2-1-注入CatalogContext與自定義的CatalogSettings參數" class="headerlink" title="2.1 注入CatalogContext與自定義的CatalogSettings參數"></a>2.1 注入CatalogContext與自定義的CatalogSettings參數</h5><p>　　使用Constructor的注入方式，將資料庫的Context與自定義的參數寫入Controller。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> CatalogContext _catalogContext;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsSnapshot&lt;CatalogSettings&gt; _settings;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CatalogController</span>(<span class="params">CatalogContext catalogContext, IOptionsSnapshot&lt;CatalogSettings&gt; settings</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  _catalogContext = catalogContext;</span><br><span class="line">  _settings = settings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-回傳商品類型的Action"><a href="#2-2-回傳商品類型的Action" class="headerlink" title="2.2 回傳商品類型的Action"></a>2.2 回傳商品類型的Action</h5><p>　　此Action回傳所有商品類別。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[action]&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CatalogTypes</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> items = <span class="keyword">await</span> _catalogContext.CatalogTypes.ToArrayAsync();</span><br><span class="line">  <span class="keyword">return</span> Ok(items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-根據Id回傳特定商品的Action"><a href="#2-3-根據Id回傳特定商品的Action" class="headerlink" title="2.3 根據Id回傳特定商品的Action"></a>2.3 根據Id回傳特定商品的Action</h5><p>　　此Action接收int Id的參數，並從資料表Catalog找有這Id的商品資訊。但由於資料庫的商品圖片只有存檔，而連結需要被更換，所以在專案新增ViewModels的資料夾，新增一個CatalogItemResponseVM的類別，只定義須回傳到頁面的Property</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.ViewModels</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatalogItemResponseVM</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Description &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">decimal</span> Price &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> PictureUrl &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　Action和換照片連結的函式：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> pictureUrlTemplate = <span class="string">&quot;/api/picture/&#123;0&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpGet</span>][Route(<span class="string">&quot;items/&#123;id:int&#125;&quot;</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; IActionResult &gt; GetItemById(<span class="built_in">int</span> id) &#123;</span><br><span class="line"><span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> BadRequest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">await</span> _catalogContext.CatalogItems.Select(x = &gt;<span class="keyword">new</span> CatalogItemResponseVM &#123;</span><br><span class="line">Description = x.Description,</span><br><span class="line">Id = x.Id,</span><br><span class="line">Name = x.Name,</span><br><span class="line">Price = x.Price,</span><br><span class="line">PictureUrl = x.PictureFileName</span><br><span class="line">&#125;).SingleOrDefaultAsync(c = &gt;c.Id == id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (item != <span class="literal">null</span>) &#123;</span><br><span class="line">item.PictureUrl = ChangeItemPictureUrl(item.PictureUrl);</span><br><span class="line"><span class="keyword">return</span> Ok(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NotFound();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">ChangeItemPictureUrl</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _settings.Value.ExternalCatalogBaseUrl + <span class="built_in">string</span>.Format(pictureUrlTemplate, fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-查詢有分頁與商品類別過濾的Action"><a href="#2-4-查詢有分頁與商品類別過濾的Action" class="headerlink" title="2.4 查詢有分頁與商品類別過濾的Action"></a>2.4 查詢有分頁與商品類別過濾的Action</h5><p>　　此Action接收int? catalogTypeId 商品類別編號與分頁的參數，在資料表過濾這些條件，並回傳多筆的商品資訊。由於有分頁功能，在ViewModels底下建立一個共通性的分頁PaginatedItemsViewModel類別</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.ViewModels</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaginatedItemsViewModel</span> &lt; <span class="title">TEntity</span> &gt; <span class="keyword">where</span> <span class="title">TEntity</span>: <span class="keyword">class</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> PageSize &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> PageIndex &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">long</span> Count &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> IEnumerable &lt; TEntity &gt; Data &#123;</span><br><span class="line"><span class="keyword">get</span>;</span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PaginatedItemsViewModel</span>(<span class="params"><span class="built_in">int</span> pageSize, <span class="built_in">int</span> pageIndex, <span class="built_in">long</span> count, IEnumerable &lt; TEntity &gt; data</span>)</span> &#123;</span><br><span class="line">PageSize = pageSize;</span><br><span class="line">PageIndex = pageIndex;</span><br><span class="line">Count = count;</span><br><span class="line">Data = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　而Action為預設每頁呈現6筆資料，從第0頁開始查詢：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Get api/Catalog/items[?catalogTypeId=&amp;pageSize=4&amp;pageIndex=3]</span></span><br><span class="line">[<span class="meta">HttpGet</span>][Route(<span class="string">&quot;[action]&quot;</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; IActionResult &gt; Items(<span class="built_in">int</span> ? catalogTypeId, [FromQuery] <span class="built_in">int</span> pageSize = <span class="number">6</span>, [FromQuery] <span class="built_in">int</span> pageIndex = <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> root = _catalogContext.CatalogItems.AsQueryable();</span><br><span class="line"><span class="keyword">if</span> (catalogTypeId.HasValue) &#123;</span><br><span class="line">root = root.Where(c = &gt;c.CatalogTypeId == catalogTypeId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totalItems = <span class="keyword">await</span> root.LongCountAsync();</span><br><span class="line"><span class="keyword">var</span> itemsOnPage = <span class="keyword">await</span> root.Select(x = &gt;<span class="keyword">new</span> CatalogItemResponseVM &#123;</span><br><span class="line">Description = x.Description,</span><br><span class="line">Id = x.Id,</span><br><span class="line">Name = x.Name,</span><br><span class="line">Price = x.Price,</span><br><span class="line">PictureUrl = x.PictureFileName</span><br><span class="line">&#125;).OrderBy(c = &gt;c.Name).Skip(pageSize * pageIndex).Take(pageSize).ToListAsync();</span><br><span class="line"></span><br><span class="line">ChangeItemPictureUrls(itemsOnPage);</span><br><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> PaginatedItemsViewModel &lt; CatalogItemResponseVM &gt; (pageIndex, pageSize, totalItems, itemsOnPage);</span><br><span class="line"><span class="keyword">return</span> Ok(model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangeItemPictureUrls</span>(<span class="params">List &lt; CatalogItemResponseVM &gt; list</span>)</span> &#123;</span><br><span class="line">list.ForEach(x = &gt;x.PictureUrl = ChangeItemPictureUrl(x.PictureUrl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-新增商品"><a href="#2-5-新增商品" class="headerlink" title="2.5 新增商品"></a>2.5 新增商品</h5><p>　　此Action為Http Post，在CatalogItems新增CatalogItem物件，並回傳Status Code 201</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>][Route(<span class="string">&quot;items&quot;</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; IActionResult &gt; CreateProduct([FromBody] CatalogItem product) &#123;</span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> CatalogItem &#123;</span><br><span class="line">CatalogBrandId = product.CatalogBrandId,</span><br><span class="line">CatalogTypeId = product.CatalogTypeId,</span><br><span class="line">Description = product.Description,</span><br><span class="line">Name = product.Name,</span><br><span class="line">PictureFileName = product.PictureFileName,</span><br><span class="line">Price = product.Price</span><br><span class="line">&#125;;</span><br><span class="line">_catalogContext.CatalogItems.Add(item);</span><br><span class="line"><span class="keyword">await</span> _catalogContext.SaveChangesAsync();</span><br><span class="line"><span class="keyword">return</span> CreatedAtAction(<span class="keyword">nameof</span>(GetItemById), <span class="keyword">new</span> &#123;</span><br><span class="line">id = item.Id</span><br><span class="line">&#125;,</span><br><span class="line">item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-更新商品"><a href="#2-6-更新商品" class="headerlink" title="2.6 更新商品"></a>2.6 更新商品</h5><p>　　此Action為Http Put，在CatalogItems更新CatalogItem物件，並回傳Status Code 201</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPut</span>][Route(<span class="string">&quot;items&quot;</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; IActionResult &gt; UpdateProduct([FromBody] CatalogItem productToUpdate) &#123;</span><br><span class="line"><span class="keyword">var</span> catalogItem = <span class="keyword">await</span> _catalogContext.CatalogItems.SingleOrDefaultAsync(c = &gt;c.Id == productToUpdate.Id);</span><br><span class="line"><span class="keyword">if</span> (catalogItem == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> NotFound(<span class="keyword">new</span> &#123;</span><br><span class="line">Message = $ <span class="string">&quot;item with id &#123;productToUpdate.Id&#125; not found.&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catalogItem = productToUpdate;</span><br><span class="line">_catalogContext.CatalogItems.Update(catalogItem);</span><br><span class="line"><span class="keyword">await</span> _catalogContext.SaveChangesAsync();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CreatedAtAction(<span class="keyword">nameof</span>(GetItemById), <span class="keyword">new</span> &#123;</span><br><span class="line">id = productToUpdate.Id</span><br><span class="line">&#125;,</span><br><span class="line">catalogItem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-7-刪除商品"><a href="#2-7-刪除商品" class="headerlink" title="2.7 刪除商品"></a>2.7 刪除商品</h5><p>　　此Action為Http Delete，在CatalogItems根據Id刪除CatalogItem物件，並回傳Status Code 204</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpDelete</span>][Route(<span class="string">&quot;&#123;id&#125;&quot;</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task &lt; IActionResult &gt; DeleteProduct(<span class="built_in">int</span> id) &#123;</span><br><span class="line"><span class="keyword">var</span> product = <span class="keyword">await</span> _catalogContext.CatalogItems.SingleOrDefaultAsync(p = &gt;p.Id == id);</span><br><span class="line"><span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> NotFound();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_catalogContext.CatalogItems.Remove(product);</span><br><span class="line"><span class="keyword">await</span> _catalogContext.SaveChangesAsync();</span><br><span class="line"><span class="keyword">return</span> NoContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-新增PictureController類別"><a href="#3-新增PictureController類別" class="headerlink" title="3. 新增PictureController類別"></a>3. 新增PictureController類別</h4><p>　　在CatalogApi專案的資料夾Controllers，新增PictureController類別，並繼承ControllerBase，也增加屬性[Route(“api&#x2F;[controller]“)]與[ApiController]。 　　而它主要是讀取商品的照片，並回傳File Result：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CatalogApi.Controllers</span> &#123; [Route(<span class="string">&quot;api/[controller]&quot;</span>)][ApiController]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PictureController</span>: <span class="title">ControllerBase</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IWebHostEnvironment _env;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PictureController</span>(<span class="params">IWebHostEnvironment env</span>)</span> &#123;</span><br><span class="line">_env = env;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpGet</span>][Route(<span class="string">&quot;&#123;fileName&#125;&quot;</span>)]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetImage</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span> &#123;</span><br><span class="line"><span class="keyword">var</span> webRoot = _env.WebRootPath;</span><br><span class="line"><span class="keyword">var</span> path = Path.Combine(webRoot + <span class="string">&quot;/Pictures/&quot;</span>, fileName);</span><br><span class="line"><span class="keyword">var</span> buffer = System.IO.File.ReadAllBytes(path);</span><br><span class="line"><span class="keyword">return</span> File(buffer, <span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-測試API"><a href="#4-測試API" class="headerlink" title="4. 測試API"></a>4. 測試API</h4><p>　　 　　開啟Debug，根據你的Host設定，網址輸入 <a href="http://yourhost:yourport/api/catalog/items">http://yourhost:yourport/api/catalog/items</a>　，應該要能看到多筆分頁的功能能得到商品資訊：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/paged2Blist2Bdefault-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/paged2Blist2Bdefault.png" alt="容器化 ASP.NET Core API 讀取"></a></p>
<p>-————————————————————- 　　</p>
<p>下一篇將撰寫Swagger UI的配置與測試API CRUD。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET Core 網站！系列文章 - (7) 建立商品服務的Api - 5</title>
    <url>/2020/09/22/containerized-asp-net-core-catalog-part-5/</url>
    <content><![CDATA[<h4 id="1-建立Dockerfile"><a href="#1-建立Dockerfile" class="headerlink" title="1. 建立Dockerfile"></a>1. 建立Dockerfile</h4><p>　　在CatalogApi專案右鍵&#x3D;&gt;加入&#x3D;&gt;Dokcer支援，選擇目標平台Linux，將會在根目錄新增Dockerfile檔案，但這Dokcerfile有一些Bug，因為我的專案目錄設計方式，會讓VS產生錯誤的連結，所以需要再手動修改，變成下方的內容。其內容主要功能是在Docker容器內載入NET Core SDK編譯我們的程式碼，將編譯後的目錄檔案複製到Runtime環境的&#x2F;app目錄，再用NET Core Runtime執行商品服務的Api系統。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.1</span>-buster AS build</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet restore</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet publish -o /out/ -c Release</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.1</span>-buster-slim AS base</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /out /app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;dotnet&quot;</span>, <span class="string">&quot;CatalogApi.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改dokcer-compose-yml"><a href="#2-修改dokcer-compose-yml" class="headerlink" title="2. 修改dokcer-compose.yml"></a>2. 修改dokcer-compose.yml</h4><p>之前已經在docker-compose.yml加入SQL Server的image，而這次要加上商品服務的Api，如下方的yml。主要的參數包含：</p>
<ul>
<li>build的dockerfile：Dockerfile的檔名</li>
<li>build的context：我們商品服務Api的Dockerfile所在的目錄</li>
<li>image：這商品服務Api的image命名</li>
<li>environment：這些參數將會覆蓋appSettings.json的內容，包含資料庫的連線資訊、外部連到此服務的URL。其中ExternalCatalogBaseUrl的{}值會從.env檔的內容做替換</li>
<li>ports：將此Api的80 port對應為本機的7000</li>
<li>depends_on：需要先等SQL Server的容器啟動完，才輪到此Api啟動容器</li>
<li>networks：新增一個frontend網路區域，之後會和網頁前端系統互通</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"> <span class="attr">frontend:</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">catalog:</span></span><br><span class="line"> <span class="attr">build:</span></span><br><span class="line"> <span class="attr">context:</span> <span class="string">.srcServicesCatalogApi</span></span><br><span class="line"> <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">rpgshop/catalog</span></span><br><span class="line"> <span class="attr">environment:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DatabaseServer=mssqlserver</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DatabaseName=CatalogDb</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DatabaseUser=sa</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DatabasePassword=JustTest!</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000</span></span><br><span class="line"> <span class="attr">container_name:</span> <span class="string">rpgcatalogapi</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;7000:80&quot;</span></span><br><span class="line"> <span class="attr">networks:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line"> <span class="attr">depends_on:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">mssqlserver</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">mssqlserver:</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">&quot;microsoft/mssql-server-linux:latest&quot;</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;1445:1433&quot;</span></span><br><span class="line"> <span class="attr">container_name:</span> <span class="string">rpgmssqlcontainer</span></span><br><span class="line"> <span class="attr">environment:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">ACCEPT_EULA=Y</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">SA_PASSWORD=JustTest!</span></span><br><span class="line"> <span class="attr">networks:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure>

<h4 id="3-建立-env檔"><a href="#3-建立-env檔" class="headerlink" title="3. 建立.env檔"></a>3. 建立.env檔</h4><p>　　.env檔是一種環境變數檔，用key&#x3D;value的方式寫在此檔案，目前我們只需要放一筆資料： RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#x3D;docker.for.win.localhost 　　這是前述的ExternalCatalogBaseUrl的值會被替換，而docker.for.win.localhost是docker內建在Windows的host。</p>
<h4 id="4-用cmd執行docker-compose"><a href="#4-用cmd執行docker-compose" class="headerlink" title="4. 用cmd執行docker-compose"></a>4. 用cmd執行docker-compose</h4><p>　　用cmd在docker-compose.yml所在位置輸入指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>　　執行完後，在瀏覽器輸入<a href="http://docker.for.win.localhost:7000/swagger">http://docker.for.win.localhost:7000/swagger</a> ，將看見容器化的商品服務API，如圖1，且使用try it out都是正常運作。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/container2Bto2B2Bcatalogapi-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/container2Bto2B2Bcatalogapi.png" alt="容器化 ASP.NET Core docker api test"></a></p>
<p>圖1</p>
<p>-————————————————————-</p>
<p>這一系列的專案將開在這Github：<a href="https://github.com/u8989332/RPGShopOnContainers">RPGShopOnContainers</a>，會依照文章的主題進度區分資料夾，有需要的人可自行pull &#x2F; download～ 下一篇將建立一套網站前端，整合商品服務的API作商品呈現。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET Core 網站！系列文章 - (1) 系統簡介</title>
    <url>/2020/09/16/containerized-asp-net-core-introduction/</url>
    <content><![CDATA[<h4 id="1-簡介"><a href="#1-簡介" class="headerlink" title="1. 簡介"></a>1. 簡介</h4><p>目前.NET的開發資歷約四年，從ASP.NET Webform、ASP.NET MVC 5與最新的ASP.NET Core都有經驗。其中最熟的是ASP.NET MVC，但也有一些產品開始用ASP.NET Core，兩者相似度約70%，大部分的觀念都還是相通，其他主要差異性在於Razor頁面語法的優化與改善、內建IoC容器的好用程度提升、Middleware&#x2F;Pipeline的觀念等，比起MVC有更彈性的開發。</p>
<p>這幾年的容器化開發更加便利，漸漸取代VM(Virtual Machine)的大負荷架構，只需要用最小的資源即可啟用想要的服務。所以這邊會用Docker + ASP.NET Core，打造一款簡單的購物網站。 　　　這幾年微軟開發一款開源專案: <a href="https://github.com/dotnet-architecture/eShopOnContainers">eShopOnContainers</a>，所以會基於此框架來建立系統。我的購物網站包含基礎模組，像是會員、購物車、訂單、商品列表、報表，預計在本系列能以微服物的架構完成這些功能。</p>
<h4 id="2-架構"><a href="#2-架構" class="headerlink" title="2. 架構"></a>2. 架構</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/25E625A1258625E6259E25B6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/25E625A1258625E6259E25B6.png" alt="containerized ASP.NET Core architecture"></a></p>
<p>架構為簡單的微服務架構，每個服務各自起一個Docker Container，再透過Web API&#x2F;Message Queue等方式做資料傳送。每個服務的技術加起來真的不小，包含ASP.NET Core、Redis、SQL Server、Message Queue，希望最後能如期完成這系列的文章！</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造 容器化 的 ASP.NET  Core網站！系列文章 - (2) 傳統單一架構 VS 微服務架構</title>
    <url>/2020/09/17/containerized-asp-net-core-monolithic-vs-microservices/</url>
    <content><![CDATA[<p>　　傳統的單一系統架構，裡面的功能越做越大，導致後續維護越來越吃力。比如今天只要修改購物網站的會員功能，沒有更改其他程式碼，修改完畢後，光是編譯就得花不少時間，後續的測試與部署更不用說，只要中間過程一出錯，從頭來回修改的時間要很久。</p>
<p>　　今天微服務架構的特性有兩個：</p>
<ol>
<li>小又專精：國軍知名口號「小而精、小而強、小而巧」，用在微服務洽好不過(?)，使相關功能的模組都收斂在一個服務，也符合單一職責原則。</li>
<li>自治性：微服務各自部署在不同機器&#x2F;平台，彼此開放API並用網路溝通，降低耦合性</li>
</ol>
<p>　　基於這些特性，所帶來的好處有：</p>
<ol>
<li>不同技術的Stack：每個微服務可以有自己的技術Stack，比如會員服務可以用ASP.NET Core + SQL Server，訂單服務可以用PHP + MySQL</li>
<li>高彈性：即使有個服務壞了，其他服務仍可運作</li>
<li>高擴展性：容易擴充服務，比如負載平衡</li>
<li>簡化部署：只需針對要部署的服務，其他服務仍保持運作</li>
<li>減少團隊共同的負擔：以前維護單一系統是所有團隊共同維護，一人更改就得全部受影響；使用微服務可讓團隊專注在自己的服務</li>
<li>可組合性：微服務可支援多樣的前端應用</li>
<li>替代性高：如果該服務需要換技術或者移除，比起傳統單一系統容易達成</li>
</ol>
<p>　　但微服務架構也有些缺點，要考慮分散式帶來的問題(比如CAP)，還有測試、部署、監控的工作與傳統單一系統不同。 目前有些台灣公司找後端工程師，不限制使用的技術Stack，很有可能是採用微服務架構，可知這種架構是有幫助的。而我工作環境仍都是單一系統開發，只有Side Project能嘗試這新架構，而且微軟也為相關的文件寫得很充裕，非常的有用！下一篇會開始設計商品列表的Api，敬請期待。</p>
<p>參考資料：</p>
<p><a href="https://docs.microsoft.com/zh-tw/dotnet/architecture/microservices/architect-microservice-container-applications/microservices-architecture">.NET 微服務 - 架構電子書：微服務架構</a></p>
<p><a href="https://www.amazon.com/-/zh_TW/Building-Microservices-Designing-Fine-Grained-Systems%EF%BC%88%E8%8B%B1%E6%96%87%E7%89%88%EF%BC%89/dp/1491950358?keywords=Building+Microservices:+Desi&qid=1641913626&sr=8-8&linkCode=ll1&tag=glj89893320b-20&linkId=f39a585e87ef8f44e6f4a8de27d75061&language=zh_TW&ref_=as_li_ss_tl">Building Microservices: Designing Fine-Grained System</a><a href="https://www.amazon.com/Building-Microservices-Designing-Fine-Grained-Systems/dp/1491950358">s：1. Microservices</a></p>
]]></content>
      <categories>
        <category>微服務架構</category>
      </categories>
  </entry>
  <entry>
    <title>Create HDFS MapReduce Wordcount</title>
    <url>/2015/09/20/create-hdfs-mapreduce-wordcount/</url>
    <content><![CDATA[<p>Create HDFS &amp; MapReduce Wordcount</p>
<h4 id="1-建立HDFS"><a href="#1-建立HDFS" class="headerlink" title="1.建立HDFS"></a>1.建立HDFS</h4><p>安裝好Hadoop Cluster後，接著要在HDFS放上資料，並執行Hadoop經典的程式範例 - Wordcount。其程式名稱如字面所示，是可以計算文字檔裡面詞彙的數量。</p>
<p>　　安裝的那一篇前言提到，HDFS(Hadoop Distributed File System)是分散式的檔案系統，要透過Hadoop做運算，都得從HDFS存取資料。</p>
<p>　　首先我們把local的資料搬到HDFS上，將hadoop&#x2F;etc&#x2F;hadoop&#x2F;目錄下各種參數設定的檔案搬過去，在hadoop01(slaves也行)要下此指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop dfs -put ~/hadoop-2.7.1/etc/hadoop /input01</span><br></pre></td></tr></table></figure>

<p>　　先來分析這指令，</p>
<ol>
<li> dfs：要做HDFS的存取，都要用這參數，或者使用fs行，兩種功能是一樣的。</li>
<li>-put：要從server local的資料搬到HDFS上，要用此-put參數</li>
<li>src_dir1 src_dir2 …：-put後面接著的參數是local資料的路徑，其目錄可以不只1個，而本篇是只有用1個目錄：~&#x2F;hadoop-2.7.1&#x2F;etc&#x2F;hadoop。</li>
<li>des_dir：-put最後一個的參數則是HDFS的目錄，本篇是放在&#x2F;input01下。原先我的HDFS沒有&#x2F;input01這目錄，使用-put後，Hadoop會自動創立此目錄。</li>
</ol>
<p>更多的HDFS command指令請參考<a href="http://hadoop.apache.org/docs/r1.2.1/file_system_shell.html">Hadoop Documentation File System Shell Guide</a> ，和Linux的檔案系統指令非常相像，若有熟悉使用Linux將會很快上手。</p>
<p>　　放上去之後，一起用web介面查看是否有上傳成功，其畫面如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Bweb2Binput01-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Bweb2Binput01.png" alt="Create HDFS &amp; MapReduce Wordcount web"></a></p>
<p>　　畫面中顯示多了&#x2F;input01目錄，代表有成功的將local資料搬過去。該目錄中的每個檔案有超連結可點，若是檔案的話，會顯示其所在block資訊，包含block ID、檔案大小、放在哪個datanode上等資訊，且也可以下載。我點選capacity-scheduler.xml此檔案的連結，會如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Bfile2Binfo-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Bfile2Binfo.png" alt="Create HDFS &amp; MapReduce Wordcount  capacity-scheduler.xml"></a></p>
<h4 id="2-執行MapReduce程式"><a href="#2-執行MapReduce程式" class="headerlink" title="2.執行MapReduce程式"></a>2.執行MapReduce程式</h4><h5 id="2-1-新增yarn-site-xml參數"><a href="#2-1-新增yarn-site-xml參數" class="headerlink" title="2.1 新增yarn-site.xml參數"></a>2.1 新增yarn-site.xml參數</h5><p>執行MapReduce時，可以在port 8088的頁面中瀏覽job執行紀錄(history log)，使開發者可以參考程式是否運作正常。為了讓history log可以正常瀏覽，先用stop-all.sh將所有service關閉，然後在Master與Slaves的yarn-site.xml裡面多加些參數。</p>
<p>　　yarn-site.xml新增的參數為：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 若沒加這參數，會無法在port 8088的History Tracking UI正常瀏覽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-啟動MapReduce-JobHistory-Server"><a href="#2-2-啟動MapReduce-JobHistory-Server" class="headerlink" title="2.2 啟動MapReduce JobHistory Server"></a>2.2 啟動MapReduce JobHistory Server</h5><p>　　在執行MapReduce程式之前，先將JobHistory Server的service啟動，這service是可記錄每一個MapReduce的執行前後狀況，可用來做程式的Debug、效率分析等。<br>　　在全部的機器都要執行此指令啟動：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>

<p>　　可透過jps指令檢查是否有開啟 JobHistory Server：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/JPS-JOBHISTORYSERVICE-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/JPS-JOBHISTORYSERVICE.png" alt="Create HDFS MapReduce Wordcount jps"></a></p>
<p>　　因為目前還沒有任何程式執行過，所以在port 8088的網頁上仍不會有job紀錄。</p>
<h5 id="2-3-執行MapReduc程式-Wordcount"><a href="#2-3-執行MapReduc程式-Wordcount" class="headerlink" title="2.3 執行MapReduc程式 - Wordcount"></a>2.3 執行MapReduc程式 - Wordcount</h5><p>在HDFS上有了資料後，可以透過MapReduce對這些資料做運算。在我們的hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;的目錄下，有一支jar檔案：hadoop-mapreduce-examples-2.7.1.jar，其提供許多的MapReduce範例讓開發者可以使用。將目錄切換後，試著下指令，查看有提供什麼範例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.7.1.jar</span><br></pre></td></tr></table></figure>

<p>　　可看見列出一堆的參數名稱：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/jar2Bexample-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/jar2Bexample.png" alt="Create HDFS MapReduce Wordcount 參數"></a></p>
<p>　　有對資料做sort、計算圓周率Pi、解數獨(sudoku)等範例，本篇以wordcount最常示範的程式來執行MapReduce。</p>
<p> 　　指令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.7.1.jar wordcount /input01 /output01</span><br></pre></td></tr></table></figure>

<p>　　wordcount後面要帶的兩個參數分別為在HDFS的input目錄與output目錄，&#x2F;input01為第1節所建立的資料，而&#x2F;output01為wordcount計算完後的輸出目錄。<br>　　此時command畫面會列出一堆INFO資訊，其內容包啟動該程式的Job ID、input有多少數量、Map和Reduce的進度及執行完程式後，花費多少記憶體、CPU時間、讀寫檔案量等，如下面三張圖所示： 　</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/WORDCOUNT2BRUN1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/WORDCOUNT2BRUN1.png" alt="Create HDFS MapReduce Wordcount process"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/WORDCOUNT2BRUN2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/WORDCOUNT2BRUN2.png" alt="Create HDFS MapReduce Wordcount process"></a></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/WORDCOUNT2BRUN3.png" alt="Create HDFS MapReduce Wordcount process"></p>
<p>　　當程式仍在執行時，可瀏覽port 8088網頁的RUNNING頁面查看job執行狀況，如下圖：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/HADOOPRUNNIGN2BPAGE.png" alt="Create HDFS MapReduce Wordcount web"></p>
<p>　　最後執行完成後，該job會到FINISHED的頁面：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/finish2Bpage.png" alt="Create HDFS MapReduce Wordcount finish web"></p>
<p>　　在此頁面右邊有個欄位Tracking UI有History可以連結，點進去後可以該job 的ID、名稱、花費的時間、每個Map與Reduce的log資訊與連結，如下圖所示，而連結裡更詳細的內容請您嘗試自己的Hadoop :P</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/JOBHISTORYLOG1.png" alt="Create HDFS MapReduce Wordcount web detail"></p>
<p>　　根據本人經驗，將Server重新開機後，8088 port的Job history都會被清掉，若想瀏覽之前job的歷史資訊，網址輸入hadoop01:19888 (依舊發發發?)，該網址是連到所有job history頁面，如下圖所示（圖片裡有我許多次提交job的紀錄）：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/JOBHISTORYLOG2.png"></p>
<h5 id="2-4-查看Wordcount的輸出"><a href="#2-4-查看Wordcount的輸出" class="headerlink" title="2.4 查看Wordcount的輸出"></a>2.4 查看Wordcount的輸出</h5><p>　　到目前為止，得知job的運作紀錄該從哪瀏覽，但是最重要的wordcount結果在哪呢？就在HDFS的&#x2F;output01目錄下，此時用50070 port瀏覽，發現多了一個output01的目錄，如下圖：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Boutput.png"></p>
<p>　　點進去看，會有兩個檔案，檔名分別為_SUCCESS與part-r-00000，其中_SUCCESS是一個記號，代表該次的檔案有寫入成功，而part-r-00000則是wordcount把詞彙計算完的輸出檔，如下圖：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/hdfs2Boutput2B02.png"></p>
<p>　　把part-r-00000下載並打開來看，其內容就是詞彙的統計數量（本人總共有1588筆）：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/wordcount2Bresult.png"></p>
<h4 id="3-結論"><a href="#3-結論" class="headerlink" title="3.結論"></a>3.結論</h4><p>　　架設好Hadoop後，確定能執行MapReduce的程式，代表最基本的Hadoop系統是可以work的。之後會寫一篇如何用Eclipse撰寫MapReduce Java程式。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="http://stackoverflow.com/questions/25964054/yarn-does-not-show-the-finished-job">StackOverflow：YARN does not show the finished job</a></li>
<li><a href="http://hadoop.apache.org/docs/r2.7.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml">官方mapred-site的預設參數</a></li>
<li><a href="http://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-common/yarn-default.xml">官方yarn-site的預設參數</a> (這些預設參數都在<a href="http://hadoop.apache.org/docs/r2.7.1/">官方頁面</a>的左下角可連結，對於要深入設置Hadoop系統很有幫助)</li>
</ol>
<h4 id="新增-修改日記"><a href="#新增-修改日記" class="headerlink" title="新增&#x2F;修改日記"></a>新增&#x2F;修改日記</h4><p>2015&#x2F;9&#x2F;29：</p>
<ol>
<li>移除mapred-site.xml的設置，全都採取預設的值才會正常運作。之前每個node都設定hadoop01:19888與hadoop01:10020的address，會使hadoop02與hadoop03因為port被hadoop01占住而無法運作，過一段時間會自己關掉jobhistoryserver。</li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>HDFS</category>
        <category>MapReduce</category>
      </categories>
  </entry>
  <entry>
    <title>Data Structure Trie</title>
    <url>/2020/06/07/data-structure-trie/</url>
    <content><![CDATA[<p>Data Structure - Trie</p>
<h4 id="1-Trie的介紹"><a href="#1-Trie的介紹" class="headerlink" title="1. Trie的介紹"></a>1. Trie的介紹</h4><p> Trie又稱為前綴樹、字典樹，在大量新增單字、查詢單字時有高效能的表現，是一種特殊的樹狀資料結構。</p>
<p>假如今天依序新增3個單字: hello, hey 和 bag，那麼Trie會像圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/1.png" alt="Data Structure Trie example"></a></p>
<p>圖1</p>
<h4 id="2-資料結構介紹"><a href="#2-資料結構介紹" class="headerlink" title="2. 資料結構介紹"></a>2. 資料結構介紹</h4><p> Trie的實作常用R-way Trie, R代表在某一層的節點數. 比如R &#x3D; 10, 可以記0<del>9的10個數字、R &#x3D; 26, 可以記A</del>Z的26個字母、 R &#x3D; 256, 可以記ASCII Code.</p>
<p>本篇的Trie基本功能有5種: </p>
<ol>
<li>新增(Insert)</li>
<li>刪除有包含前綴字的所有單字(Delete Prefix)</li>
<li>刪除完整單字(Delete Exact)</li>
<li>搜尋有前綴字的數量(Find Prefix Count)</li>
<li>搜尋完整單字(Find Exact)</li>
</ol>
<p>本篇採用R &#x3D; 26的方式記錄a~z字母的單字, 首先Trie有個Root節點, 如圖2. 有3個重要的欄位:</p>
<ol>
<li>sums: 所有Trie的單字在此節點經過的次數</li>
<li>end: 是否為某單字的最後一個字母</li>
<li>children: 此字母底下連結其他字母的指標</li>
</ol>
<h3 id="2-1-新增-Insert"><a href="#2-1-新增-Insert" class="headerlink" title="2.1 新增 Insert"></a>2.1 新增 Insert</h3><p>Root節點的sums&#x2F;end永遠是0, 而children是初始化全都為空值.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/2.png" alt="Data Structure Trie 圖2" title="圖2"></a></p>
<p>圖2</p>
<p>接著新增第1個單字hello, 首先是它的第1個字母h, 如圖3. 新增h節點, Root的h索引指向h節點, 且h節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/3.png" alt="Data Structure Trie 圖3"></a></p>
<p>圖3</p>
<p>第2個字母e, 如圖4. 新增e節點, h節點的e索引指向e節點, 且e節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/4.png" alt="Data Structure Trie 圖4"></a></p>
<p>圖4</p>
<p>第3個字母l, 如圖5. 新增l節點, e節點的l索引指向l節點, 且l節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/5.png" alt="Data Structure Trie 圖5"></a></p>
<p>圖5</p>
<p>第4個字母l, 如圖6. 新增第2個l節點, 第1個l節點的l索引指向第2個l節點, 且第2個l節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/6.png" alt="Data Structure Trie 圖6"></a></p>
<p>圖6</p>
<p>第5個字母o, 如圖7. 新增o節點, 第2個l節點的o索引指向o節點, 且o節點的sums增加為1、end標記為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/7.png" alt="Data Structure Trie 圖7"></a></p>
<p>圖7</p>
<p>接著新增第2個單字hey, 如圖8. 首先是它的第1個字母h, 由於Root指向h節點已存在, 所以h節點的sums增加為2. 第2個字母e, 而h節點指向e節點已存在, 所以e節點的sums增加為2. 第3個字母y, 新增y節點, e節點的y索引指向y節點, 且y節點的sums增加為1、end標記為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/8.png" alt="Data Structure Trie 圖8"></a></p>
<p>圖8</p>
<p>接著新增第3個單字bag, 首先是它的第1個字母b, 如圖9. 新增b節點, Root的b索引指向b節點, 且b節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/9.png" alt="Data Structure Trie 圖9"></a></p>
<p>圖9</p>
<p>第2個字母a, 如圖10. 新增a節點, b節點的a索引指向a節點, 且a節點的sums增加為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/10.png" alt="Data Structure Trie 圖10"></a></p>
<p>圖10</p>
<p>第3個字母g, 如圖11. 新增a節點, b節點的a索引指向a節點, 且a節點的sums增加為1、end標記為1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/11.png" alt="Data Structure Trie 圖11"></a></p>
<p>圖11</p>
<h5 id="2-2-搜尋完整單字-Find-Exact"><a href="#2-2-搜尋完整單字-Find-Exact" class="headerlink" title="2.2 搜尋完整單字 Find Exact"></a>2.2 搜尋完整單字 Find Exact</h5><p>比如要搜尋單字hey, 從根節點往下分別尋找h -&gt; e -&gt; y, 第3個節點的end為1, 代表有完整的hey單字在此trie, 回傳true, 如圖12. 如果最後字母是到end為0的節點 或者 前面無任何子節點到達最後字母, 則回傳false.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/12.png" alt=" Trie 圖12"></a></p>
<p>圖12</p>
<h5 id="2-3-搜尋有前綴字的數量-Find-Prefix-Count"><a href="#2-3-搜尋有前綴字的數量-Find-Prefix-Count" class="headerlink" title="2.3 搜尋有前綴字的數量 Find Prefix Count"></a>2.3 搜尋有前綴字的數量 Find Prefix Count</h5><p>比如要搜尋前綴字he, 從根節點往下分別尋找h -&gt; e, 第2個節點的sums為2, 代表有所有單字有前綴字的數量為2, 因此回傳2, 如圖13. 如果前面無任何子節點到達最後字母, 則回傳0.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/13.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/13.png" alt="Trie 圖13"></a></p>
<p>圖13</p>
<h5 id="2-4-刪除完整單字-Delete-Exact"><a href="#2-4-刪除完整單字-Delete-Exact" class="headerlink" title="2.4 刪除完整單字 Delete Exact"></a>2.4 刪除完整單字 Delete Exact</h5><p>依照2.1的Trie, 比如要刪除完整的單字hey, 首先先用[搜尋完整單字 Find Exact]函式確認有此hey單字, 才可以做刪除.  從根節點往下分別尋找h -&gt; e -&gt; y, 沿途將sums的值減1，最後將第3個節點的end設為0, 完成刪除的功能, 如圖14.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/14.png" alt="Trie 圖14"></a></p>
<p>圖14</p>
<h5 id="2-5-刪除完整單字-Delete-Exact"><a href="#2-5-刪除完整單字-Delete-Exact" class="headerlink" title="2.5 刪除完整單字 Delete Exact"></a>2.5 刪除完整單字 Delete Exact</h5><p>依照2.1的Trie, 比如要刪除有前綴字he的所有單字, 首先先用[搜尋有前綴字的數量 Find Prefix Count]函式確認有he前綴字的數量cnt, 才可以做刪除.  從根節點往下分別尋找h -&gt; e, 沿途將sums的值減cnt，最後將第3個節點的子節點都初始化為空值, 完成刪除的功能, 如圖15.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/15.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/15.png" alt="Trie 圖15"></a></p>
<p>圖15</p>
<h4 id="3-資料結構實作"><a href="#3-資料結構實作" class="headerlink" title="3. 資料結構實作"></a>3. 資料結構實作</h4><p>實作可用Array或Linked List, 本篇先實作Array版本, 可再思考如何做成Linked List版.</p>
<h5 id="3-1-Array-Version"><a href="#3-1-Array-Version" class="headerlink" title="3.1 Array Version"></a>3.1 Array Version</h5><p>Array版的Trie又稱為靜態Trie, 代表它的節點空間大小一開始都先宣告好. 程式碼和它的功能可參考註解.</p>
<h4 id="4-效能分析"><a href="#4-效能分析" class="headerlink" title="4. 效能分析"></a><strong>4. 效能分析</strong></h4><p>假如Trie裡有N個單字、每個單字平均長度為Len、使用的R-way為R個字，新增、刪除和搜尋的時間複雜度均為O(Len)、空間複雜度為O(R * Len * N)。</p>
<p><strong>5. 心得</strong>  </p>
<p>最近寫題目開始接觸Trie，寫這篇來紀錄它的基礎模板，日後以此模板可做更多變化題。</p>
<h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ol>
<li><a href="https://www.amazon.com/-/zh_TW/%E5%88%98%E6%B1%9D%E4%BD%B3%EF%BC%8C%E9%99%88%E9%94%8B%EF%BC%8C%E5%90%B4%E6%B0%B8%E8%BE%89%EF%BC%8C%E7%AD%89/dp/B00G9XHCBW?crid=3PEAUP1LB5BNW&keywords=%E5%88%98%E6%B1%9D%E4%BD%B3&qid=1640528279&s=books&sprefix=%E5%88%98%E6%B1%9D%E4%BD%B3,stripbooks-intl-ship,231&sr=1-2&linkCode=ll1&tag=glj89893320b-20&linkId=fd63e663f641f28c5635a58f40b184d7&language=zh_TW&ref_=as_li_ss_tl">劉汝佳 - 算法竞赛入门经典训练指南</a></li>
</ol>
<h3 id="data-structure-trie"><a href="#data-structure-trie" class="headerlink" title="data structure trie"></a>data structure trie</h3>]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Trie</category>
      </categories>
  </entry>
  <entry>
    <title>裝飾者模式 Decorator Pattern</title>
    <url>/2018/04/22/design-pattern-decorator/</url>
    <content><![CDATA[<p>裝飾者模式 Decorator Pattern 的設計模式介紹</p>
<h4 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1. 案例需求"></a>1. 案例需求</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/Fotolia_30691356_Subscription_XL-1.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/Fotolia_30691356_Subscription_XL.jpg" alt="裝飾者模式 Decorator Pattern 案例"></a></p>
<p>圖片來源：<a href="https://www.rentcafe.com/blog/cities/renting-a-house/">https://www.rentcafe.com/blog/cities/renting-a-house/</a></p>
<p>　　在外地求學、工作時，大部分需要找租屋來住，每種租屋提供的設施、環境都不同，有的靠近捷運、有電視、有冰箱、有洗衣機等。假如有房東要介紹自己的租屋內容，那程式如何設計呢？</p>
<h4 id="2-程式設計"><a href="#2-程式設計" class="headerlink" title="2. 程式設計"></a>2. 程式設計</h4><p>(錯誤)</p>
<p>　　建立一個建築物(Building)抽象類別，有一個描述(Show)的方法，另外有公寓和透天屋需透過繼承它並實作Show方法，如下UML類別圖：</p>
<p>　　在Building裡定義三個bool值，可設定該租屋是否有這些環境設施，並</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/DecoratorFactory_ERROR-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/DecoratorFactory_ERROR.png"></a></p>
<p>在Show方法依據這些值做環境設施描述，程式碼：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> refrigerator;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> washingMachine;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> closeToMRT;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Refrigerator</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> refrigerator;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            refrigerator = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> WashingMachine</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> washingMachine;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            washingMachine = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CloseToMRT</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> closeToMRT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            closeToMRT = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Refrigerator)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;有冰箱 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (WashingMachine)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;有洗衣機 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CloseToMRT)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;靠近捷運 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　Apartment和Townhouse具體類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apartment</span> : <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;的公寓&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Townhouse</span> : <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;的透天屋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　模擬租屋宣傳的場景程式和輸出結果：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第1間租屋是&quot;</span>);</span><br><span class="line">        Building b1 = <span class="keyword">new</span> Apartment();</span><br><span class="line">        b1.CloseToMRT = <span class="literal">true</span>;</span><br><span class="line">        b1.Refrigerator = <span class="literal">false</span>;</span><br><span class="line">        b1.WashingMachine = <span class="literal">true</span>;</span><br><span class="line">        b1.Show();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第2間租屋是&quot;</span>);</span><br><span class="line">        Building b2 = <span class="keyword">new</span> Townhouse();</span><br><span class="line">        b2.CloseToMRT = <span class="literal">false</span>;</span><br><span class="line">        b2.Refrigerator = <span class="literal">true</span>;</span><br><span class="line">        b2.WashingMachine = <span class="literal">true</span>;</span><br><span class="line">        b2.Show();</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/program_error-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/program_error.png" alt="第一個案例結果"></a></p>
<p>程式很完美的宣傳租屋環境，但是，如果要環境設施不只上述三點呢？有電視、有網路、有桌子、有沙發．．．多了這麼多條件，是不是需要改底層Building抽象類別？這樣會違反<a href="https://geekcodeparadise.com/2018/03/design-pattern-the-open-closed-principle/">開閉原則</a>！</p>
<p>(正確)</p>
<p>　　為了解決上述問題，新增一個裝飾者(Decorator)抽象類別，將租屋的環境設施個別繼承這類別。其UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/DecoratorFactory_OK-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/DecoratorFactory_OK.png" alt="裝飾者模式 Decorator Pattern 案例UML Class"></a></p>
<p>　　Building抽象類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　Apartment和Townhouse具體類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Townhouse</span> : <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;的透天屋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apartment</span> : <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;的公寓&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　Decorator抽象類別，該類別繼承Building，且用組合的方式將Building作為自己的屬性。實做Show方法是呼叫組合的Building物件的Show：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Decorator</span> : <span class="title">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    Building building;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span>(<span class="params">Building building</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.building = building;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.building != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.building.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WashingMachine、Refrigerator和CloseToMRT繼承Decorator，實做自己的Show方法，且要呼叫父類別(Decorator)的Show：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WashingMachine</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WashingMachine</span>(<span class="params">Building building</span>) : <span class="title">base</span>(<span class="params">building</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;有洗衣機 &quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CloseToMRT</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloseToMRT</span>(<span class="params">Building building</span>) : <span class="title">base</span>(<span class="params">building</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;靠近捷運 &quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Refrigerator</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Refrigerator</span>(<span class="params">Building building</span>) : <span class="title">base</span>(<span class="params">building</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;有冰箱 &quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模擬使用裝飾者模式的租屋宣傳的場景程式和輸出結果：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第1間租屋是&quot;</span>);</span><br><span class="line">        Building b1 = <span class="keyword">new</span> Apartment();</span><br><span class="line">        b1 = <span class="keyword">new</span> CloseToMRT(b1);</span><br><span class="line">        b1 = <span class="keyword">new</span> WashingMachine(b1);</span><br><span class="line">        b1.Show();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第2間租屋是&quot;</span>);</span><br><span class="line">        Building b2 = <span class="keyword">new</span> Townhouse();</span><br><span class="line">        b2 = <span class="keyword">new</span> Refrigerator(b2);</span><br><span class="line">        b2 = <span class="keyword">new</span> WashingMachine(b2);</span><br><span class="line">        b2.Show();</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/Program_ok-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/Program_ok.png" alt="裝飾者模式 Decorator Pattern 第二個案例結果"></a></p>
<h4 id="3-裝飾者模式介紹"><a href="#3-裝飾者模式介紹" class="headerlink" title="3. 裝飾者模式介紹"></a>3. 裝飾者模式介紹</h4><h5 id="3-1-裝飾者模式定義"><a href="#3-1-裝飾者模式定義" class="headerlink" title="3.1 裝飾者模式定義"></a>3.1 裝飾者模式定義</h5><p>根據書上的介紹，裝飾者模式的定義：Attach additional responsibilities to an object dynamically keeping the same interface.Decorators provide a flexible alternative to subclassing for extending functionality。意思是動態地給一個物件新增一些額外的責任，以增加功能來說，裝飾者比衍生子類別還要靈活。</p>
<p>　　裝飾者模式的通用UML類別圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/general_DF-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/general_DF.png" alt="裝飾者模式 Decorator Pattern UML Class"></a></p>
<p>　　而裝飾者模式包含四大角色：</p>
<p>　　Component：是一個抽象類別或介面，定義我們最核心的物件，能被動態地新增職責。依照前述例子，是Building類別。</p>
<p>　　ConcreteComponent：繼承Component，能動態地新增職責，也是實際被裝飾的對象。依照前述例子，是Apartment和Townhouse類別。</p>
<p>　　Decorator：裝飾抽象類別，用來擴展Component類別的功能，且對於Component來說，不須知道Decorator的存在。</p>
<p>　　ConcreateDecorator：繼承Decorator，具體的裝飾物件，可以新增Component的職責，甚至可以有其他的屬性和方法。依照前述例子，是Refrigerator、WashingMachine和CloseToMRT三個類別，且未來要新增其他環境設施，都繼承Decorator來實做，再裝飾到Building。</p>
<h5 id="3-2-裝飾者模式優缺點"><a href="#3-2-裝飾者模式優缺點" class="headerlink" title="3.2 裝飾者模式優缺點"></a>3.2 裝飾者模式優缺點</h5><p>優點</p>
<ul>
<li>裝飾類和被裝飾類互相獨立，不會有耦合</li>
<li>不管裝飾了多少層，最後回傳的物件仍是Component類別，符合里氏替換原則</li>
<li>動態地擴展具體類別的功能</li>
</ul>
<p>　　缺點</p>
<ul>
<li>裝飾得過多會使物件複雜，要一層層剝開檢查是否有錯誤。</li>
</ul>
<h5 id="3-3-裝飾者模式使用情境"><a href="#3-3-裝飾者模式使用情境" class="headerlink" title="3.3 裝飾者模式使用情境"></a>3.3 裝飾者模式使用情境</h5><ul>
<li>需要擴展／新增一個類別的功能，且這些功能又能撤換掉</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第06章｜穿什麼有這麼重要？—裝飾模式</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第17章 裝飾模式</a></li>
<li><a href="https://amzn.to/3LRwBqc">Elisabeth Freeman, Eric Freeman, Bert Bates, Kathy Sierra 著、蔡學鏞 譯, 深入淺出設計模式 3 裝飾者模式</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>依賴倒轉原則 Dependency Inversion Principle</title>
    <url>/2018/04/01/design-pattern-dependency-inversion-principle/</url>
    <content><![CDATA[<p>依賴倒轉原則 Dependency Inversion Principle 的設計模式介紹</p>
<h4 id="1-依賴倒轉原則介紹"><a href="#1-依賴倒轉原則介紹" class="headerlink" title="1. 依賴倒轉原則介紹"></a>1. 依賴倒轉原則介紹</h4><h5 id="1-1-依賴倒轉原則定義"><a href="#1-1-依賴倒轉原則定義" class="headerlink" title="1.1 依賴倒轉原則定義"></a>1.1 依賴倒轉原則定義</h5><p>根據書上的介紹，依賴倒轉原則的定義：High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.。其意思包含三項</p>
<ul>
<li>高層模組不應該依賴低層模組，兩者都應該依賴抽象</li>
<li>抽象不應該依賴細節</li>
<li>細節應該依賴抽象</li>
</ul>
<h5 id="1-2-依賴倒轉原則案例"><a href="#1-2-依賴倒轉原則案例" class="headerlink" title="1.2 依賴倒轉原則案例"></a>1.2 依賴倒轉原則案例</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/0breakfast-eggs-sausage-bacon-toast-super-lovers-02-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/0breakfast-eggs-sausage-bacon-toast-super-lovers-02.png"></a></p>
<p>圖片來源：<a href="https://itadakimasuanime.wordpress.com/2016/12/14/12-days-of-anime-2016-food-edition-day-1-breakfast-year-in-review/">https://itadakimasuanime.wordpress.com/2016/12/14/12-days-of-anime-2016-food-edition-day-1-breakfast-year-in-review/</a> 　　</p>
<p>（錯誤）　　</p>
<p>　　許多民眾的一天主要能量來源，來自於早餐店，如果早餐店想賣個漢堡做生意，其UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/DIP_ERROR-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/DIP_ERROR.png" alt="依賴倒轉原則 Dependency Inversion Principle 案例 UML Class"></a></p>
<p>　　BreakfastShop類別定義一個方法cook，可以製作漢堡；Hamburger類別定義一個方法recipe，可以提供做漢堡的食材。<br>　　BreakfastShop的程式碼如下，其中cook裡面呼叫Hamburger的recipe方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BreakfastShop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span>(<span class="params">Hamburger hamburger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        hamburger.recipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　Hamburger的程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hamburger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recipe</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;漢堡需要麵包皮、生菜、豬肉片、番茄片、起士&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定義了BreakfastShop和Hamburger後，可以執行做漢堡的應用程式： 　</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BreakfastShop shop = <span class="keyword">new</span> BreakfastShop();</span><br><span class="line">        Hamburger hamburger = <span class="keyword">new</span> Hamburger();</span><br><span class="line">        shop.cook(hamburger);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　問題來了，早餐店怎可能只做漢堡當生意來源呢？需要提供個飲料給客人喝解渴吧！<br>　　此時再多做奶茶作為飲品，新增一個奶茶類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MilkTea</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recipe</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;奶茶需要紅茶、牛奶、水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增奶茶類別後，再看看BreakfastShop類別，發現早餐店沒有做奶茶的方法！這樣的設計是有問題的，變成早餐店和漢堡是緊耦合的關係，被依賴者的變更會需要修改依賴者，是個沒有穩定性的設計。</p>
<p>（正確）<br>　　要解決前述的問題，需使用依賴倒轉原則，新的早餐店UML設計如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/DIP_OK-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/DIP_OK.png" alt="依賴倒轉原則 Dependency Inversion Principle 案例 UML Class"></a></p>
<p>　　建立兩個介面：IBreakfastShop和IBreakfast，分別定義早餐店和早餐的各個職務，早餐店要會做早餐，需實作cook方法，IBreakfastShop程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBreakfastShop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cook</span>(<span class="params">IBreakfast breakfast</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　此介面是一個抽象化，而實作的具體類別BreakfastShop如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BreakfastShop</span> : <span class="title">IBreakfastShop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span>(<span class="params">IBreakfast breakfast</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        breakfast.recipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IBreakfastShop中，傳入了IBreakfast介面作為抽象之間的依賴關係，在BreakfastShop具體類別也傳入IBreakfast介面，但是要傳哪種早餐，需在高層模組中定義。<br>　　IBreakfast、Hamburger和MilkTea程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBreakfast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recipe</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hamburger</span> : <span class="title">IBreakfast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recipe</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;漢堡需要麵包皮、生菜、豬肉片、番茄片、起士&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MilkTea</span> : <span class="title">IBreakfast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recipe</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;奶茶需要紅茶、牛奶、水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　在商業邏輯中，貫徹抽象不應該依賴細節，如同我們的IBreakfast介面（抽象）不依賴Hamburger和MilkTea實作類別（細節）。<br>　　早餐店能做漢堡和奶茶的場景程式碼：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IBreakfastShop shop = <span class="keyword">new</span> BreakfastShop();</span><br><span class="line">        IBreakfast hamburger = <span class="keyword">new</span> Hamburger();</span><br><span class="line">        shop.cook(hamburger);</span><br><span class="line">        IBreakfast milkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line">        shop.cook(milkTea);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>高層模組（Program Class）呼叫低層模組如BreakfastShop、Hamburger和MilkTea等，都是依據介面(IBreakfastShop、IBreakfast）做呼叫，不必去更改細節。</p>
<h5 id="1-3-使用依賴倒轉原則的實踐"><a href="#1-3-使用依賴倒轉原則的實踐" class="headerlink" title="1.3 使用依賴倒轉原則的實踐"></a>1.3 使用依賴倒轉原則的實踐</h5><ul>
<li>對測試容易：若專案執行是用TDD(測試驅動開發），則每個人分配的工作項目，都可以先針對抽象類別或介面做測試。以上述早餐店為例，A分配做IBreakfastShop和實作類別，而B分配做IBreakfast和實作類別，若A已經完成自己的工作，而B還在開發，則A可以透過Mock相關的函式庫，模擬出一個IBreakfast物件做測試。</li>
<li>結合里氏替換原則：抽象化之間定義好依賴關係，再由各自的具體子類別去完成商業邏輯，達到替換父類別不會影響軟體功能。</li>
<li>為何依賴要倒轉：現實中的人類都是直接對具體事物有依賴關係，比如我們要做漢堡就做漢堡，要泡奶茶就泡奶茶。但到了物件導向程式設計，需要將事物做抽象化，定義抽象類別或介面，然後再定義抽象之間的依賴關係，這就是依賴倒轉。</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第05章｜會修電腦不會修收音機？—依賴倒轉原則</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第3章 依賴倒轉原則</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>介面隔離原則 Interface Segregation Principle</title>
    <url>/2018/04/07/design-pattern-interface-segregation-principle/</url>
    <content><![CDATA[<p>介面隔離原則 Interface Segregation Principle 的設計模式介紹</p>
<h4 id="1-介面隔離原則介紹"><a href="#1-介面隔離原則介紹" class="headerlink" title="1. 介面隔離原則介紹"></a>1. 介面隔離原則介紹</h4><h5 id="1-1-介面隔離原則定義"><a href="#1-1-介面隔離原則定義" class="headerlink" title="1.1 介面隔離原則定義"></a>1.1 介面隔離原則定義</h5><p>根據書上的介紹，介面隔離原則的定義：Clients should not be forced to depend upon interfaces that they don’t use.。其意思是客戶端不應該依賴它不需要的介面。</p>
<h5 id="1-2-介面隔離原則案例"><a href="#1-2-介面隔離原則案例" class="headerlink" title="1.2 介面隔離原則案例"></a>1.2 介面隔離原則案例</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/content-link-iphone-transfer-content-ios11_2x-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/content-link-iphone-transfer-content-ios11_2x.png"></a></p>
<p>圖片來源：<a href="https://support.apple.com/zh-tw/iphone">https://support.apple.com/zh-tw/iphone</a> 　　</p>
<p>（錯誤）　　</p>
<p>　　現在的智慧型手機有許多的功能，除了原有通話功能外，還有照相、USB傳輸、上網、記憶卡等。如果有一位上班族擁有一款智慧型手機，其UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/ISP_ERROR-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/ISP_ERROR.png" alt="介面隔離原則 Interface Segregation Principle 案例 UML Class"></a></p>
<p>Worker類別定義一個建構函數和一個方法Call，透過建構函數將IPhone物件給Worker，再透過call可用手機打電話；IPhone介面定義四個方法，包含撥號、USB傳輸、拍照和記憶卡。而IPhoneX是實作IPhone介面的具體類別。<br>　　Worker的程式碼如下，其中call裡面呼叫IPhone的Dial方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IPhone phone;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span>(<span class="params">IPhone phone</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.Dial(phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　IPhone的程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dial</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">USBConnect</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TakePhoto</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MemoryCard</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IPhoneX的程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IPhoneX</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dial</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;正在撥號給&quot;</span> + phoneNumber +<span class="string">&quot;，請稍等&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MemoryCard</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;存取記憶卡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TakePhoto</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;拍了一張照片&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">USBConnect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;存取USB裝置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成這三項程式碼，可以執行上班族打電話的應用程式：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IPhone phone = <span class="keyword">new</span> IPhoneX();</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker(phone);</span><br><span class="line">        worker.Call(<span class="string">&quot;0900123456&quot;</span>);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　問題來了，假如這位上班族要出差，需要到一個限定手機只能撥打電話功能的工作環境，那麼他的潮牌IPhoneX就不能使用了！</p>
<p>（正確）<br>　　要解決前述的問題，需使用介面隔離原則，將Dial這功能放置別的介面，新的UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/ISP_OK-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/ISP_OK.png" alt="介面隔離原則 Interface Segregation Principle 案例 UML Class"></a></p>
<p>　　建立兩個介面：ISimplePhone和ISmartPhone，分別定義基本手機的功能和智慧型手機的功能，這兩個介面程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISimplePhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dial</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISmartPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">USBConnect</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TakePhoto</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MemoryCard</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　實作ISimplePhone的具體類別StupidPhone如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StupidPhone</span> : <span class="title">ISimplePhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dial</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;正在撥號給&quot;</span> + phoneNumber +<span class="string">&quot;，請稍等&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由於手機的介面改了，因此也要修改Worker的依賴介面為ISimplePhone，修改後的程式碼：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ISimplePhone phone;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span>(<span class="params">ISimplePhone phone</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"><span class="built_in">string</span> phoneNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.Dial(phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　 用手機打電話的應用程式：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ISimplePhone phone = <span class="keyword">new</span> StupidPhone();</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker(phone);</span><br><span class="line">        worker.Call(<span class="string">&quot;0900123456&quot;</span>);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　如此一來，上班族能依工作換環境來替換智障型手機或智慧型手機。</p>
<h5 id="1-3-使用介面隔離原則的實踐"><a href="#1-3-使用介面隔離原則的實踐" class="headerlink" title="1.3 使用介面隔離原則的實踐"></a>1.3 使用介面隔離原則的實踐</h5><ul>
<li>介面功能盡量少：要避免Fat Interface的狀況，能拆除功能就拆，達到一個介面只服務一個子模組&#x2F;商業邏輯。但有可能會與單一職責原則有衝突，比如已經拆成最仔細但功能還是很多，此時要以單一職責原則為優先。</li>
<li>介面若被設計得太汙染，可使用轉接器模式處理。</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第4章 接口隔離原則</a></li>
<li><a href="https://amzn.to/3z8aHHK">Robert C. Martin, Agile Software Development: Principles, Patterns, and Practices , Chap 12 ISP：Interface Segregation Principle</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>迪米特法則 Law of Demeter</title>
    <url>/2018/04/16/design-pattern-law-of-demeter/</url>
    <content><![CDATA[<p>迪米特法則 Law of Demeter 的設計模式介紹</p>
<h4 id="1-迪米特法則介紹"><a href="#1-迪米特法則介紹" class="headerlink" title="1. 迪米特法則介紹"></a>1. 迪米特法則介紹</h4><h5 id="1-1-迪米特法則定義"><a href="#1-1-迪米特法則定義" class="headerlink" title="1.1 迪米特法則定義"></a>1.1 迪米特法則定義</h5><p>迪米特法則又稱為最少知識原則（Least Knowledge Principle），其發表的原意包含這項解釋：Only talk to your immediate friends。<br>　　兩物件之間的耦合稱為朋友關係，包含組合、聚合、依賴等，而迪米特法則要求只與直接的朋友溝通。</p>
<h5 id="1-2-迪米特法則案例"><a href="#1-2-迪米特法則案例" class="headerlink" title="1.2 迪米特法則案例"></a>1.2 迪米特法則案例</h5><p>（錯誤）　　</p>
<p>　　現在有很多語音助理，能跟它用口語方式下達命令，做撥打電話、查天氣、找聯絡人等功能。假如設計出一個語音助理類別Assistant，叫它幫我計算數學式，其呼叫的程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Human</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Assistant assistant;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallCalculate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> expression = <span class="string">&quot;1 + 5 * 8&quot;</span>;</span><br><span class="line">        <span class="built_in">double</span> result = <span class="keyword">this</span>.assistant.getCalculator().Calculate(expression);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　上方程式碼是透過assistant取得calculator物件，再由calculator計算數學式，並回傳運算結果。但是，為何計算數學會需要知道calculator這個物件的存在呢？</p>
<p>（正確）<br>　　我只要語音助理做我要的功能，不要再傳我不認識的物件給我。透過迪米特法則，可改成下列程式碼，只讓Human呼叫public的Calculate函式。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Human</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Assistant assistant;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallCalculate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> expression = <span class="string">&quot;1 + 5 * 8&quot;</span>;</span><br><span class="line">        <span class="built_in">double</span> result = <span class="keyword">this</span>.assistant.Calculate(expression);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-迪米特法則的實踐"><a href="#1-3-迪米特法則的實踐" class="headerlink" title="1.3 迪米特法則的實踐"></a>1.3 迪米特法則的實踐</h5><ul>
<li>適當的解耦：迪米特法則的核心概念是為了類別之間能高內聚、低耦合，達到類別可重複使用。但是套用此原則時，需要做跳轉，才能呼叫需要的類別。以前述套用迪米特法則的計算數學例子，中間經過了一次跳轉，最後呼叫Calculator的Calculate函式。如果設計的跳轉次數太多，會造成系統更複雜而維護更困難，因此盡量跳轉在2次內就好。</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第11章｜無熟人難辦事？—迪米特法則</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第5章 迪米特法則</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>里氏替換原則 Liskov Substitution Principle</title>
    <url>/2018/04/01/design-pattern-liskov-substitution-principle/</url>
    <content><![CDATA[<p>里氏替換原則 Liskov Substitution Principle 的設計模式介紹</p>
<h4 id="1-里氏替換原則介紹"><a href="#1-里氏替換原則介紹" class="headerlink" title="1. 里氏替換原則介紹"></a>1. 里氏替換原則介紹</h4><h5 id="1-1-里氏替換原則定義"><a href="#1-1-里氏替換原則定義" class="headerlink" title="1.1 里氏替換原則定義"></a>1.1 里氏替換原則定義</h5><p>根據書上的介紹，里氏替換原則的定義：If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.。<br>比較一般的解釋是只要有父類別出現的地方，則子類別也能出現，且替換為子類別時，不會產生錯誤或異常。但反過來則不行，子類別出現的地方，父類別未必能使用。</p>
<h5 id="1-2-里氏替換原則案例"><a href="#1-2-里氏替換原則案例" class="headerlink" title="1.2 里氏替換原則案例"></a>1.2 里氏替換原則案例</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/rockman_box_jp-1.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/rockman_box_jp.jpg"></a></p>
<p>圖片來源：<a href="http://timewarpgamer.com/features/box/_art/_disparity/_nes.html">http://timewarpgamer.com/features/box\_art\_disparity\_nes.html</a>　　</p>
<p>　　知名2D橫向射擊遊戲－洛克人，主角_洛克人_的武器除了使用自身的光束砲，還可以藉由打贏關卡BOSS，取得他們的能力作為自己的武器。所以，假設洛克人的武器之UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/LSP-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/LSP.png"></a></p>
<p>　　武器(AbstractWeapon)的主要職責是射擊，削切剪刀 (Cut)是從剪刀人取得的能力、超級手臂(Guts)是從氣力人取得的能力、冰天箭(Ice)是從冰人取得的能力。<br>　　在洛克人類別（Rockman）定義了一個方法killEnemy，使用武器來殺敵人，而具體要用什麼武器殺敵人，呼叫時才知道。AbstractWeapon抽象類別與介面的程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractWeapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shoot</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　削切剪刀、超級手臂和冰天箭的實現類別如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Guts</span> : <span class="title">AbstractWeapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">shoot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;超級手臂！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cut</span> : <span class="title">AbstractWeapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">shoot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;削切剪刀！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ice</span> : <span class="title">AbstractWeapon</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">shoot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;冰天箭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　洛克人的實現類別如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rockman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractWeapon weapon;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span>(<span class="params">AbstractWeapon weapon</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killEnemy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;洛克人準備射擊!&quot;</span>);</span><br><span class="line">        weapon.shoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>洛克人的武器是抽象的，當遇到敵人時，需藉由setWeapon來確認要使用哪種武器。模擬洛克人遇到敵人的程式碼和執行結果如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Rockman rockman = <span class="keyword">new</span> Rockman();</span><br><span class="line">        rockman.setWeapon(<span class="keyword">new</span> Cut());</span><br><span class="line">        rockman.killEnemy();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/LSP_1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/LSP_1.png"></a></p>
<p>　　以上述場景，洛克人使用剪刀人的削切剪刀做射擊，如果想用其他武器，則可呼叫setWeapon(new Guts())或setWeapon(new Ice())做武器替換。</p>
<h5 id="1-3-里氏替換原則的含意"><a href="#1-3-里氏替換原則的含意" class="headerlink" title="1.3 里氏替換原則的含意"></a>1.3 里氏替換原則的含意</h5><ul>
<li>以上述洛克人為例，當每個子類別（武器）可以替換掉父類別（AbstractWeapon），軟體功能不受影響，此父類別才能真正地被重複使用，且子類別也能增加新的方法和屬性。</li>
<li>子類別的可替換性，代表不需修改父類別情況下做延展，成功實踐開閉原則。</li>
<li>如果子類別不能完整實作父類別的方法，或者父類別的某些方法在子類別發生大變化，則建議不使用繼承關係，改用依賴、聚集、組合等關係代替繼承。</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第05章 第4節｜會修電腦不會修收音機？—依賴倒轉原則 里氏替換原則</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第2章 里氏替換原則</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B4%9B%E5%85%8B%E4%BA%BA_(%E6%B8%B8%E6%88%8F)">Wikipedia - 洛克人(遊戲)</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>物件導向程式設計觀念</title>
    <url>/2017/11/08/design-pattern-object-oriented-programming-concept/</url>
    <content><![CDATA[<p>物件導向程式設計觀念</p>
<h2 id="1-學物件導向之前的準備"><a href="#1-學物件導向之前的準備" class="headerlink" title="1. 學物件導向之前的準備"></a>1. 學物件導向之前的準備</h2><p>工作兩年了，漸漸了解程式專案能否好維護、好延伸的重要性，必須使用到設計模式（Design Pattern），這些模式能套用在各種程式設計狀況，才能讓程式寫得更順～<br>　　現在做Web最常用到MVC架構，甚至細項能切到Service-Repository pattern，但都是邊看範例邊學，尚未學一套要領，實在可惜。<br>　　在學常見的物件導向、Design Pattern之前，先要有穩固的物件導向程式設計觀念，否則之後會看不懂、不知所以然！好比蓋房子，必須基於良好的地基才能往上蓋，不然就變成違建囉（？</p>
<h2 id="2-物件導向程式設計（Object-oriented-programming-Concept-簡稱OOP）"><a href="#2-物件導向程式設計（Object-oriented-programming-Concept-簡稱OOP）" class="headerlink" title="2.物件導向程式設計（Object-oriented programming Concept , 簡稱OOP）"></a>2.物件導向程式設計（Object-oriented programming Concept , 簡稱OOP）</h2><p>主要會用C#(Java也可通，差不多）來講解OOP的基本觀念，也不會講太多C#的程式語言如何設計。</p>
<h3 id="2-1-類別-Class"><a href="#2-1-類別-Class" class="headerlink" title="2.1 類別(Class)"></a>2.1 類別(Class)</h3><p>在講類別之前，先提物件(Object)。物件是什麼？其實所有東西都是物件，能碰到、聞到、看到、買到、丟到….BLABLA，物件是個自我包含的實體(Instance)，可用一組能識別的特性和行為來標記。<br>　　類別，則是具有相同的屬性(Attribute)和功能(Method)的物件的抽象集合。其實這句看文字真的很抽象，以下面程式碼來說明。<br>　　假如要設計個RPG(角色扮演)遊戲的Win form程式，按下按鈕可以跳出招式的顯示[星爆氣流斬！]之視窗。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/1eRc2bw.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/1eRc2bw.jpg" alt="刀劍神域 範例"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-062B21_18_03-Form1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-062B21_18_03-Form1.png" alt="Object-oriented programming Concept DEMO"></a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;星爆氣流斬！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　可是，如果今天有很多遊戲關卡要你使出招式，該怎辦呢？寫成函數(function)！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(Skill());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;星爆氣流斬！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　這樣就可以一直展現招式囉。<br>　　但是這個很欠噓的招式，應該是拿著劍的劍士才會的吧？而不是WinForm的行為。所以，把這招式，放在劍士的類別。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;星爆氣流斬！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Swordsman swordsman = <span class="keyword">new</span> Swordsman();</span><br><span class="line">    MessageBox.Show(swordsman.Skill());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　我宣告了一個Swordsman的類別，其中類別的命名規則(Naming Convention)必須首字母大寫，多個單字的首字母一樣大寫。要公開讓別人呼叫的方法，修飾詞則用public。<br>　　上述的程式碼裡，包含兩重要的步驟，宣告swordsman物件並將它實例化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Swordsman swordsman; <span class="comment">// 宣告一個Swordsman的物件,名字是swordsman</span></span><br><span class="line">swordsman = <span class="keyword">new</span> Swordsman(); <span class="comment">// 將swordsman物件給實例化</span></span><br></pre></td></tr></table></figure>

<p>　　之後這swordsman物件能一直呼叫Skill()函數，展現自己的招式。</p>
<h3 id="2-2-建構子-Constructor"><a href="#2-2-建構子-Constructor" class="headerlink" title="2.2 建構子(Constructor)"></a>2.2 建構子(Constructor)</h3><p>　　建構子是能讓類別做初始化的函數，若開發者沒有定義建構子，則編譯器會自動產生空的建構子。假如swordsman物件初始時有個人名，則如下述建構子程式碼：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！星爆氣流斬！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Swordsman swordsman = <span class="keyword">new</span> Swordsman(<span class="string">&quot;Kirito&quot;</span>);</span><br><span class="line">    MessageBox.Show(swordsman.Skill());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　上述程式碼定義了私有變數name，再定義Swordsman(string name)建構子，將參數name指定給私有變數name。當宣告swordsman物件時，代入了”Kirito”字串，”Kirito”會存到name變數。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-062B21_43_04-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-062B21_43_04-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529.png"></a></p>
<h3 id="2-3-多載-Overloading"><a href="#2-3-多載-Overloading" class="headerlink" title="2.3 多載(Overloading)"></a>2.3 多載(Overloading)</h3><p>　　多載是指可定義多個同樣名字的函數，但需要不同的參數類型。比如前面的建構子，可以定義不代參數的建構子，讓名字有個預設值：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！星爆氣流斬！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-屬性和修飾詞-Attribute-Modifier"><a href="#2-4-屬性和修飾詞-Attribute-Modifier" class="headerlink" title="2.4 屬性和修飾詞(Attribute &amp; Modifier)"></a>2.4 屬性和修飾詞(Attribute &amp; Modifier)</h3><p>　　屬性(attribute)是指類別中可儲存資料的地方。在C#中，又區分Field和Property，如下方程式碼解釋：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> skillNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SkillNum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> skillNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            skillNum = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;星爆氣流斬！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　上方的”出招次數” skillNum，是個field。它通常是以private修飾，只能在同一個類別存取，子類別是無法存取的。field的命名規則通常首字母是小寫。<br>　　再者的SkillNum是property，通常以public修飾。property的命名規則通常首字母是大寫。<br>　　property和field的差別是，它擁有set&#x2F;get函數。get能回傳field的值；set能透過關鍵字value，賦予跟value同樣的值給field。property會有set&#x2F;get這功能，是為了不要讓field直接讓外部存取，是個好的封裝實踐之一。</p>
<h3 id="2-5-封裝-Encapsulation"><a href="#2-5-封裝-Encapsulation" class="headerlink" title="2.5 封裝(Encapsulation)"></a>2.5 封裝(Encapsulation)</h3><p>　　物件導向程式設計三大元素之一，封裝(Encapsulation)，之前的例子都有呈現過了，再做個更仔細的說明。每個物件都包含它運行操作所需要的資訊，這個特性稱之為封裝，因此物件不需依賴其他物件來完成自己的操作。<br>　　那麼封裝的好處有哪些？</p>
<ol>
<li>良好的封裝能減少耦合(Coupling)，將Swordsman和win form分開是耦合分離的動作。</li>
<li>類別內部的實作可以自由修改，前面修改過好多次Swordsman的Skill()和屬性。</li>
<li>類別有明瞭的對外接口，也就是用public的函數讓外部呼叫。</li>
</ol>
<h3 id="2-6-繼承-Inheritance"><a href="#2-6-繼承-Inheritance" class="headerlink" title="2.6 繼承(Inheritance)"></a>2.6 繼承(Inheritance)</h3><p>如果今天多了一個角色-弓箭手也要出招，可以直接寫一個Archer類別，其他功能和Swordsman類別都一樣，可以達到所需的功能。只是兩個類別的程式碼相似度高達90%!<br>　　那麼可以想一下，這兩種角色共通性是什麼？都是遊戲裡的角色職業！他們都有自己的招式名稱和出招行為。<br>　　這是一種繼承的關係，以物件導向程式設計來看，物件的繼承代表”is-a”的關係，也就是說兩個物件A和B，可以描述為B是A，則表明B可以繼承A。”劍士是角色職業”，代表了繼承與被繼承的關係。<br>　　繼承定義了類別如何互相關聯，共享特性。繼承能定義出父類別與子類別，其中子類別繼承父類別所有的特性，且子類別還能定義新的特性。<br>　　所以繼承有三個重點：</p>
<ol>
<li>子類別擁有父類別非private的屬性和方法</li>
<li>子類別可拓展父類別沒有的屬性和方法</li>
<li>子類別能重寫父類別的方法</li>
</ol>
<p>　　將角色職業這個父類別建出來吧！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> skillNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SkillNum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> skillNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            skillNum = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　子類別-劍士和弓箭手</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;星爆氣流斬！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Archer</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;二連箭！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　其中，建構子是無法被繼承，只能用base()呼叫它。<br>　　繼承也是有缺點的，當父類別改變時，子類別也會改變。另外繼承是一種類別與類別之間有強耦合的關係。</p>
<h3 id="2-7-多型-Polymorphism"><a href="#2-7-多型-Polymorphism" class="headerlink" title="2.7 多型(Polymorphism)"></a>2.7 多型(Polymorphism)</h3><p>　　物件導向程式設計三大元素之三，多型，表示不同的物件可以執行相同的動作，但要透過它們自己的實作來執行。<br>　　如果子類別要完全實作父類別的成員，父類別則將該成員宣告為虛擬(virtual)。子類別可以使用override，將自己的實作取代掉父類別的實作。<br>　　這樣的文字敘述也很難懂，拿上面遊戲角色的例子。如果今天有個關卡要打魔物，多個角色要連續出招，那麼程式該怎寫呢？如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> skillNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SkillNum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> skillNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            skillNum = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;星爆氣流斬！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Archer</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;二連箭！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Job[] jobs = <span class="keyword">new</span> Job[<span class="number">5</span>];</span><br><span class="line">    jobs[<span class="number">0</span>] = <span class="keyword">new</span> Swordsman(<span class="string">&quot;Kirito&quot;</span>);</span><br><span class="line">    jobs[<span class="number">1</span>] = <span class="keyword">new</span> Archer(<span class="string">&quot;Gilgamesh&quot;</span>);</span><br><span class="line">    jobs[<span class="number">2</span>] = <span class="keyword">new</span> Swordsman(<span class="string">&quot;Asuna&quot;</span>);</span><br><span class="line">    jobs[<span class="number">3</span>] = <span class="keyword">new</span> Archer(<span class="string">&quot;Emiya&quot;</span>);</span><br><span class="line">    jobs[<span class="number">4</span>] = <span class="keyword">new</span> Swordsman(<span class="string">&quot;Leafa&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(Job item <span class="keyword">in</span> jobs)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(item.Skill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　在Job類別裡，加上了Skill()函數，在public和string之間多了virtual關鍵字，代表這是能讓子類別重寫的方法。<br>　　在Swordsman和Archer類別裡，原本的Skill()函數也多加了override關鍵字，代表這方法重寫。<br>　　最後在按鈕事件中，宣告Job陣列jobs，大小為5，分別實例化劍士、弓箭手、劍士、弓箭手、劍士，再放到jobs陣列裡。使用foreach的方式，去迭代jobs陣列所有的物件，並呼叫Skill()函數。因為多型的關係，程式會自動找item是什麼物件，且是使用哪個重寫的方法。<br>　　多型的原理，是當方法被呼叫時，不管物件是否轉換成它的父類別，都只有位於物件繼承鏈最後一個的方法實現才會被呼叫。</p>
<h3 id="2-8-重構-Refactoring"><a href="#2-8-重構-Refactoring" class="headerlink" title="2.8 重構(Refactoring)"></a>2.8 重構(Refactoring)</h3><p>　　如果又有更多的角色職業要加入遊戲，那麼是不是這些職業繼承Job類別就好了？是可以這樣做，只是會發現除了招式名稱不一樣之外，其他的程式碼幾乎重複，需要做個修改。<br>　　由於每個職業的招式名稱不同，所以在Job類別中，把取得招式名稱寫成一個函數：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> skillNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SkillNum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> skillNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            skillNum = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += getSkillName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　再將繼承Job的子類別做修改：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;星爆氣流斬!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Archer</span> : <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;二連箭！\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　把Skill()的virtual移除，改成由getSkillName()有virtual修飾詞，讓子類別繼承後做重寫。</p>
<h3 id="2-9-抽象類別-Abstract-Class"><a href="#2-9-抽象類別-Abstract-Class" class="headerlink" title="2.9 抽象類別(Abstract Class)"></a>2.9 抽象類別(Abstract Class)</h3><p>再想想上述的例子，角色職業是一個不能實例化的類別，因為實例化後，沒人知道它到底是什麼職業。所以把Job類別定義為抽象類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Job</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;無名氏&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> skillNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SkillNum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> skillNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            skillNum = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; skillNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            result += getSkillName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;私は&quot;</span> + name + <span class="string">&quot;です, 接招吧！&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　在class Job前面多了abstract，代表此類別為抽象類別。在getSkillName()也多了abstract，代表這方法為抽象方法，是不需要定義其實作方式。<br>　　使用抽象類別有三個重點：</p>
<ol>
<li>抽象類別無法實例化</li>
<li>子類別必須重寫父類別的抽象方法</li>
<li>如果一個類別中有宣告抽象方法，這類別也必須是抽象類別</li>
</ol>
<p>　　在繼承的樹狀關係裡，樹葉節點是具體的類別（Archer、Swordsman之類），而被繼承的類別是抽象類別（Job之類）</p>
<h3 id="2-10-介面-Interface"><a href="#2-10-介面-Interface" class="headerlink" title="2.10 介面(Interface)"></a>2.10 介面(Interface)</h3><p>　　介面是用來封裝特定功能的集合，其包含公用的屬性和方法。當有類別實作此介面時，則該類別能使用與實做所有介面的所有屬性和方法。<br>　　以角色職業為例，遊戲多了一項回復血量技能，但是只有近戰系角色可以使用，那麼可以建立一個回復血量技能的介面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IHealthUpSkill</span><br><span class="line">&#123;</span><br><span class="line">    string HealthUp(int healthUpPoint); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　其他近戰角色劍士和刺客實作IHealthUpSkill介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span> : <span class="title">Job</span>, <span class="title">IHealthUpSkill</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swordsman</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HealthUp</span>(<span class="params"><span class="built_in">int</span> healthUpPoint</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;: 幫我撐10秒, 使用急速回復&quot;</span> + healthUpPoint.ToString() + <span class="string">&quot;點HP!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;星爆氣流斬!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Assassin</span> : <span class="title">Job</span>, <span class="title">IHealthUpSkill</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assassin</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assassin</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HealthUp</span>(<span class="params"><span class="built_in">int</span> healthUpPoint</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;: 先隱匿起來, 無聲無息回復&quot;</span> + healthUpPoint.ToString() + <span class="string">&quot;點HP!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">getSkillName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;音速投擲!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Swordsman swordsman = <span class="keyword">new</span> Swordsman(<span class="string">&quot;Kirito&quot;</span>);</span><br><span class="line">    Assassin assassin = <span class="keyword">new</span> Assassin(<span class="string">&quot;Sasaki&quot;</span>);</span><br><span class="line">    IHealthUpSkill[] healthArray = <span class="keyword">new</span> IHealthUpSkill[<span class="number">2</span>];</span><br><span class="line">    healthArray[<span class="number">0</span>] = swordsman;</span><br><span class="line">    healthArray[<span class="number">1</span>] = assassin;</span><br><span class="line">    MessageBox.Show(healthArray[<span class="number">0</span>].HealthUp(<span class="number">1000</span>));</span><br><span class="line">    MessageBox.Show(healthArray[<span class="number">1</span>].HealthUp(<span class="number">750</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B22_14_57-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B22_14_57-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529.png" alt="Object-oriented programming Concept 結果1"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B22_15_12-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B22_15_12-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529.png" alt="Object-oriented programming Concept 結果2"></a></p>
<p>　　介面IHealthUpSkill沒有任何修飾詞，也沒有任何方法的定義。而介面名稱的命名規則都要首字母為大寫的I。宣告Swordsman和Assassin實作IHealthUpSkill介面的兩個物件，再用陣列和多型的方式，儲存它們之後，呼叫HealthUp(int healthUpPoint)方法。<br>　　從類別、抽象類別到介面的使用，在做設計時會依循這些原則：</p>
<ol>
<li>類別是對物件的抽象化；抽象類別是對類別的抽象化；介面是對行為的抽象化</li>
<li>如果行為跨越不同類別的物件，則可以使用介面；對於有相似的類別，使用繼承抽象類別</li>
<li>在設計過程中，抽象類別是從子類別發現了重複的內容，可總結出父類別，再由子類別繼承父類別；但介面是不知道子類別的存在，還不確定方法該如何實現，所以先宣告。</li>
</ol>
<h3 id="2-11-集合-Collection-和泛型-Generic"><a href="#2-11-集合-Collection-和泛型-Generic" class="headerlink" title="2.11 集合(Collection)和泛型(Generic)"></a>2.11 集合(Collection)和泛型(Generic)</h3><p>　　前面有很多用陣列的方式儲存物件，但是程式無法預先知道物件的數量時，就不能用先宣告陣列的大小。因此有集合(Collection)類別和介面可以使用。如下方程式碼：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IList&lt;Job&gt; list = <span class="keyword">new</span> List&lt;Job&gt;();</span><br><span class="line">    list.Add(<span class="keyword">new</span> Swordsman(<span class="string">&quot;Kirito&quot;</span>));</span><br><span class="line">    list.Add(<span class="keyword">new</span> Archer(<span class="string">&quot;Gilgamesh&quot;</span>));</span><br><span class="line">    list.Add(<span class="keyword">new</span> Swordsman(<span class="string">&quot;Asuna&quot;</span>));</span><br><span class="line">    list.Add(<span class="keyword">new</span> Archer(<span class="string">&quot;Emiya&quot;</span>));</span><br><span class="line">    list.Add(<span class="keyword">new</span> Assassin(<span class="string">&quot;Sasaki&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(list[i].Skill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　使用了IList介面和List類別儲存Job類別的資料，再用迴圈方式呼叫該list所有的Skill()函數。其中可以看一下List在.NET Framework的宣告：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; : <span class="title">IList</span>&lt;<span class="title">T</span>&gt;, <span class="title">ICollection</span>&lt;<span class="title">T</span>&gt;, <span class="title">IList</span>, <span class="title">ICollection</span>, <span class="title">IReadOnlyList</span>&lt;<span class="title">T</span>&gt;, <span class="title">IReadOnlyCollection</span>&lt;<span class="title">T</span>&gt;, <span class="title">IEnumerable</span>&lt;<span class="title">T</span>&gt;, <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">List</span>()</span>;</span><br><span class="line">        <span class="comment">//以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　List是實作了IList介面，另外有個，代表這是使用泛型的類別、介面。以上述範例T是Job類別，代表list是只能存入Job(或多型子類別)物件，取出的元素也是Job物件。使用泛型好處是可讓編譯器預先處理錯誤的類別，二來是減少裝箱、拆箱(autoboxing)的計算負擔。</p>
<h3 id="2-12-委託-Delegate-和事件-Event"><a href="#2-12-委託-Delegate-和事件-Event" class="headerlink" title="2.12 委託(Delegate)和事件(Event)"></a>2.12 委託(Delegate)和事件(Event)</h3><p>　　委託是對函數的封裝，可以當作給方法的特徵指定一個名稱。而事件是委託的一種特殊形式，當有事情發生時，事件物件處理通知過程。<br>　　上述這句一樣很難懂，但再用個範例會好懂。遊戲裡多了組合技(Combo)的玩法，就是當角色A攻擊敵人時，接著B角色也能跟著攻擊敵人。修改前述的劍士和弓箭手，當劍士攻擊敵人時，弓箭手也要跟攻擊：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Swordsman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">SwordsmanAttackHandler</span>()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> SwordsmanAttackHandler SwordsmanAttack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Skill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = SwordsmanAttack?.Invoke();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;劍士:星爆氣流斬！ &quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Archer</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ComboSkill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;弓箭手:精準射擊!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Swordsman swordsman = <span class="keyword">new</span> Swordsman();</span><br><span class="line">    swordsman.SwordsmanAttack += <span class="keyword">new</span> Swordsman.SwordsmanAttackHandler(<span class="keyword">new</span> Archer().ComboSkill);</span><br><span class="line">    MessageBox.Show(swordsman.Skill());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B23_53_24-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-072B23_53_24-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529.png" alt="結果 3"></a></p>
<p>在Swordsman類別中，宣告了delegate string SwordsmanAttackHandler()委託，並宣告event SwordsmanAttackHandler SwordsmanAttack事件。在方法Skill()裡，使用Invoke()函數，代表呼叫SwordsmanAttackHandler()的意思。其中有個?問號，是代表允許SwordsmanAttack可以是空的。</p>
<p>　　在Archer類別中，定義了ComboSkill()方法，是回傳招式字串的函數。<br>　　最後在按鈕按下時，先宣告swordsman物件，而物件裡的SwordsmanAttack註冊SwordsmanAttackHandler事件的委託方法，是來自於Archer的ComboSkill。註冊的語法是用+&#x3D;，若想取消註冊則是用　-&#x3D;　。<br>　　最後呼叫swordsman的Skill()，會觸發事件，呼叫到Archer的ComboSkill。再看執行結果，發現劍士和弓箭手兩者的招式一起使出！<br>　　很多的事件處理函數，會有sender和EventArgs參數，且可從EventArgs裡獲得需要的資訊。而我們也可以自己定義EventArgs，比如代入觸發事件的角色名字。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SwordsmanSkillEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            name = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　定義了一個SwordsmanSkillEventArgs類別，有property : Name和field : name，且繼承EventArgs。修改Swordsman的委託方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">SwordsmanAttackHandler</span>(<span class="params"><span class="built_in">object</span> sender, SwordsmanSkillEventArgs args</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> SwordsmanAttackHandler SwordsmanAttack;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Skill</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SwordsmanSkillEventArgs args = <span class="keyword">new</span> SwordsmanSkillEventArgs();</span><br><span class="line">    args.Name = <span class="keyword">this</span>.name;</span><br><span class="line">    <span class="built_in">string</span> result = SwordsmanAttack?.Invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;劍士:星爆氣流斬！ &quot;</span> + result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　將SwordsmanAttackHandler裡的參數代入Object sender和SwordsmanSkillEventArgs args。在Skill()裡，宣告SwordsmanSkillEventArgs物件args，並指定args的Name為Swordsman的name，invoke時再將this(指的是swordsman)與args代入。<br>　　因為委託方法SwordsmanAttackHandler更改了，所以也要將Archer的ComboSkill()改成與SwordsmanAttackHandler一樣的參數：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Archer</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ComboSkill</span>(<span class="params"><span class="built_in">object</span> sender, SwordsmanSkillEventArgs args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n劍士&quot;</span> + args.Name + <span class="string">&quot;出招了, 換我弓箭手使用[精準射擊]!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在ComboSkill方法裡，可透過SwordsmanSkillEventArgs args取得Name資料。程式運行的畫面：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-082B07_40_51-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/11/2017-11-082B07_40_51-DahuaDesignPattern2B255B25E5259F25B725E825A1258C255D2B-2BMicrosoft2BVisual2BStudio2B252825E725B325BB25E725B525B125E725AE25A125E72590258625E5259325A12529.png" alt="結果 4"></a></p>
<h2 id="3-心得"><a href="#3-心得" class="headerlink" title="3.心得"></a>3.心得</h2><p>這篇文章主要是參考&lt;&lt;大話設計模式&gt;&gt;裡的附錄A訓練實習生—物件導向基礎 章節，可說是讀書心得+實際模仿練習。以前看過很多物件導向程式設計的教學，沒有一個可以很讓人印象深刻又好懂的，直到翻了這本，有恍然大悟的感覺！只是我寫的內容是參考自己玩遊戲、看動漫的經驗，不代表真實遊戲產品也是這樣設計，重點是要抓到OOP的精神～<br>　　之後會開始每2~3天會寫blog，目標是坊間的Design Pattern的書有提到的pattern都要讀+模仿練習，如果不再加強這方面的能力，未來會跟不上軟體業的技能需求。。。</p>
<h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 附錄A-訓練實習生—物件導向基礎</a></li>
</ol>
<p>Object-oriented programming Concept</p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>代理模式 Proxy Pattern</title>
    <url>/2018/04/30/design-pattern-proxy/</url>
    <content><![CDATA[<p>代理模式 (Proxy Pattern) 的設計模式介紹</p>
<h4 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1. 案例需求"></a>1. 案例需求</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/3-1-1.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/3-.jpg" alt="JoJo&#39;s Bizarre Adventure"></a></p>
<p>圖片來源：<a href="http://www.horace.org/blog/2015/11/22/jojo-%E5%A5%87%E5%A6%99%E5%86%92%E9%9A%AA-%E7%AC%AC%E4%BA%8C%E5%AD%A3%EF%BC%88%E5%8B%95%E7%95%AB%E7%89%88%EF%BC%89/">http://www.horace.org/blog/2015/11/22/jojo-%E5%A5%87%E5%A6%99%E5%86%92%E9%9A%AA-%E7%AC%AC%E4%BA%8C%E5%AD%A3%EF%BC%88%E5%8B%95%E7%95%AB%E7%89%88%EF%BC%89/</a></p>
<p>知名動畫-JoJo的奇妙冒险，描述喬斯達家族歷代主人翁與各種敵人戰鬥的故事。在《星塵鬥士》篇幅，引入了替身能力，可以讓人產生另一個戰鬥角色，依照主人的意志代替主人戰鬥。</p>
<h4 id="2-程式設計"><a href="#2-程式設計" class="headerlink" title="2. 程式設計"></a>2. 程式設計</h4><p>建立一個角色(Character)介面，有一個攻擊(Attack)的方法。以主角_承太郎_(Jotaro)為例，他擁有替身_白金之星_(Star Platinum)，特點是快速又堅硬的攻擊。_承太郎_和_白金之星_實作Character介面，且_白金之星_關連了_承太郎_，如下UML類別圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/ProxyPattern_EXAMPLE-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/ProxyPattern_EXAMPLE.png" alt="代理模式 Proxy Pattern 案例 UML Class"></a></p>
<p>這三個類別的實作的程式碼：</p>
<p>public interface Character<br>{<br>    void Attack();<br>}</p>
<p>public class Jotaro : Character<br>{<br>    public void Attack()<br>    {<br>        Console.WriteLine(“快速連續揮拳(オラオラオラオラオラ)”);<br>    }<br>}</p>
<p>public class StarPlatinum : Character<br>{<br>    private Jotaro master;<br>    public StarPlatinum()<br>    {<br>        master &#x3D; new Jotaro();<br>    }</p>
<pre><code>public void Attack()
&#123;
    this.master.Attack();
&#125;
</code></pre>
<p>}</p>
<p>模擬_承太郎_戰鬥的場景程式和輸出結果：</p>
<p>public class Program<br>{<br>    static void Main(string[] args)<br>    {<br>        &#x2F;&#x2F;為了顯示日文<br>        Console.OutputEncoding &#x3D; Encoding.UTF8;</p>
<pre><code>    StarPlatinum starPlatinum = new StarPlatinum();
    starPlatinum.Attack();

    Console.Read();
&#125;
</code></pre>
<p>}</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/EXAMPLE_CONSOLE-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/EXAMPLE_CONSOLE.png" alt="代理模式 Proxy Pattern 案例結果"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/c17-1.gif"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/c17.gif" alt="JoJo&#39;s Bizarre Adventure"></a></p>
<p>圖片來源：<a href="http://knowyourmeme.com/photos/1202911-jojos-bizarre-adventure">http://knowyourmeme.com/photos/1202911-jojos-bizarre-adventure</a></p>
<h4 id="3-代理模式介紹"><a href="#3-代理模式介紹" class="headerlink" title="3. 代理模式介紹"></a>3. 代理模式介紹</h4><h5 id="3-1-代理模式定義"><a href="#3-1-代理模式定義" class="headerlink" title="3.1 代理模式定義"></a>3.1 代理模式定義</h5><p>根據書上的介紹，代理模式的定義：Provide a surrogate or placeholder for another object to control access to it.。意思是給一個物件新增一個代理，這代理能控制這物件的引用。</p>
<p>　　代理模式的通用UML類別圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/04/ProxyPattern_GENERAL-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/04/ProxyPattern_GENERAL.png" alt="代理模式 Proxy Pattern 經典 UML Class"></a></p>
<p>　　而代理模式包含三大角色：</p>
<p>　　Subject：是一個抽象類別或介面，定義Proxy和RealSubject的共同介面，當任何有使用RealObject的地方皆能使用Proxy。依照前述例子，是Character類別。</p>
<p>　　RealSubject：被代理的角色，也是實際執行商業邏輯的單位。依照前述例子，是Jotaro類別。</p>
<p>　　Proxy：代理角色，且引用RealSubject，客戶要與RealSubject互動得透過Proxy。依照前述例子，是StarPlatinum類別，引用了Jotaro物件。</p>
<h5 id="3-2-代理模式優缺點"><a href="#3-2-代理模式優缺點" class="headerlink" title="3.2 代理模式優缺點"></a>3.2 代理模式優缺點</h5><p>優點</p>
<ul>
<li>真實角色(RealSubject)完成實際的商業邏輯，其他非它的職責交由代理完成</li>
<li>當真實角色商業邏輯變化時，只要Subject定義的介面不變，Proxy仍不用修改而正常使用</li>
</ul>
<p>　　缺點</p>
<ul>
<li>客戶需透過代理才能請求真實角色做事，處理速度會變慢。</li>
</ul>
<h5 id="3-3-代理模式的應用"><a href="#3-3-代理模式的應用" class="headerlink" title="3.3 代理模式的應用"></a>3.3 代理模式的應用</h5><ul>
<li>遠程代理：可以為不同地址空間的物件提供一個本地的代理物件，比如Web Service，在.NET有WebReference、Java有RMI</li>
<li>虛擬代理：是根據需建立消耗大資源的物件，先建立一個小的物件，等待真實角色實例化完成。比如使用Web或者視窗程式，在讀取圖片時，會先用＂Loadiing…＂等待畫面給客戶看，當真實圖片載入完成後，再實際顯示給客戶</li>
<li>保護代理：依照客戶的權限，來控制對真實角色的存取</li>
<li>智能引用：當代理呼叫真實角色時，代理會做其他的功能，比如計算真實角色被呼叫的次數</li>
<li>快取代理：將真實角色的運算結果儲存在臨時的共同空間，多個客戶可以取這些共同的結果</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第07章　為他人做嫁衣—代理模式</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第12章 代理模式</a></li>
<li><a href="https://amzn.to/3LRwBqc">Elisabeth Freeman, Eric Freeman, Bert Bates, Kathy Sierra 著、蔡學鏞 譯, 深入淺出設計模式 11 代理人模式</a></li>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/proxy.html">me115 图说设计模式 6. 代理模式</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>簡單工廠模式 Simple Factory Pattern</title>
    <url>/2018/02/17/design-pattern-simple-factory/</url>
    <content><![CDATA[<p>簡單工廠模式 Simple Factory Pattern 的設計模式介紹</p>
<h4 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1. 案例需求"></a>1. 案例需求</h4><p>本篇以遊戲設計為例。有一種強化系統－附魔，可以將不同的能力嵌在武器上，使角色提升戰鬥能力。<br>　　有三個可附魔的能力，分別是ATK(攻擊力)、HP(血量)與Speed(攻擊速度)。附魔的機制是依照機率給定能力的數值，如下列：</p>
<ul>
<li>HP：50% 提升 30、30%提升50、20%提升100</li>
<li>Speed：50% 提升 1、30%提升2、20%提升3</li>
<li>ATK：50% 提升 3、30%提升5、20%提升10</li>
</ul>
<p>　　介面需輸入武器名稱和欲附魔的能力名稱，使用上述附魔的機制後，顯示該武器附魔的能力與數值。</p>
<h4 id="2-程式設計"><a href="#2-程式設計" class="headerlink" title="2. 程式設計"></a>2. 程式設計</h4><h5 id="2-1-第一版（錯誤）"><a href="#2-1-第一版（錯誤）" class="headerlink" title="2.1 第一版（錯誤）"></a>2.1 第一版（錯誤）</h5><p>依照前述的需求，可立刻寫出程式碼，如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;請輸入武器名稱&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> weapon = Console.ReadLine();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;請輸入附魔功能&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> enchant = Console.ReadLine();</span><br><span class="line"><span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">if</span> (enchant == <span class="string">&quot;ATK&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 攻擊力提升: &quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(enchant == <span class="string">&quot;Speed&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 攻擊速度提升: &quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(enchant == <span class="string">&quot;HP&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 血量提升: &quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(result);</span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure>

<p>　　第一版的程式，確實達到需求所要的功能，但有些須改進的地方。使用者介面和附魔機制是可分開的功能邏輯，一個是介面邏輯、另一個是商業邏輯，而第一版的程式都把功能放在介面邏輯。<br>　　分開的話，可以降低耦合度，達到好維護與延展。而降低耦合度的方法，可透過物件導向的封裝、繼承與多型。所以，來撰寫第二版程式碼。</p>
<h5 id="2-2-第二版（錯誤）"><a href="#2-2-第二版（錯誤）" class="headerlink" title="2.2 第二版（錯誤）"></a>2.2 第二版（錯誤）</h5><p>　　將商業邏輯獨立成一個類別Enchant：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnchantBad</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetResult</span>(<span class="params"><span class="built_in">string</span> weapon, <span class="built_in">string</span> enchant</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">if</span> (enchant == <span class="string">&quot;ATK&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 攻擊力提升: &quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (enchant == <span class="string">&quot;Speed&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 攻擊速度提升: &quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (enchant == <span class="string">&quot;HP&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">&quot;武器: &quot;</span> + weapon + <span class="string">&quot;, 血量提升: &quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">30</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">50</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　使用者介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;請輸入武器名稱&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> weapon = Console.ReadLine();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;請輸入附魔功能&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> enchant = Console.ReadLine();</span><br><span class="line"><span class="built_in">string</span> result = EnchantBad.GetResult(weapon, enchant);</span><br><span class="line">Console.WriteLine(result);</span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure>

<p>　　很明顯的，介面和商業邏輯已切割，未來若使用者介面擴充到Windows Form、Web、WPF等平台，都只需要呼叫邏輯類別，很好擴充。<br>　　但是，還是有些缺點。假如未來要新增其他的附魔功能，都必須更改Enchant類別，每次都要重新編譯，甚至不小心改錯原本的功能，更是有DE不完的BUG。<br>　　所以，將每個附魔功能再拆出來，透過繼承與多型可達成。</p>
<h5 id="2-3-第三版（使用Simple-Factory-Pattern）"><a href="#2-3-第三版（使用Simple-Factory-Pattern）" class="headerlink" title="2.3 第三版（使用Simple Factory Pattern）"></a>2.3 第三版（使用Simple Factory Pattern）</h5><p>　　抽象類別Enchant：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Enchant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> weapon = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Weapon</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> weapon; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; weapon = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　子類別EnchantATK、EnchantSpeed和EnchantHP：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnchantATK</span> : <span class="title">Enchant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;武器: &quot;</span> + <span class="keyword">this</span>.Weapon + <span class="string">&quot;, 攻擊力提升: &quot;</span>;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnchantSpeed</span> : <span class="title">Enchant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;武器: &quot;</span> + <span class="keyword">this</span>.Weapon + <span class="string">&quot;, 攻擊速度提升: &quot;</span>;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnchantHP</span> : <span class="title">Enchant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;武器: &quot;</span> + <span class="keyword">this</span>.Weapon + <span class="string">&quot;, 血量提升: &quot;</span>;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> rndResult = rnd.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (rndResult &lt;= <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rndResult &lt;= <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　前述有三者EnchantATK、EnchantSpeed和EnchantHP了，但該何時實例化哪一個類別呢？未來若又新增附魔功能時，又要怎實例化？<br>　　使用簡單工廠模式，用一個單獨的類別來生產所需實例化的物件，並利用多型的特性，回傳父類別物件且呼叫有被實作的父類別方法。<br>　　簡單工廠類別EnchantFactory：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnchantFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Enchant <span class="title">createEnchant</span>(<span class="params"><span class="built_in">string</span> enchant</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Enchant enct = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (enchant)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ATK&quot;</span>:</span><br><span class="line">                enct = <span class="keyword">new</span> EnchantATK();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Speed&quot;</span>:</span><br><span class="line">                enct = <span class="keyword">new</span> EnchantSpeed();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HP&quot;</span>:</span><br><span class="line">                enct = <span class="keyword">new</span> EnchantHP();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enct;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　使用者介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;請輸入武器名稱&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> weapon = Console.ReadLine();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;請輸入附魔功能&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> enchantName = Console.ReadLine();</span><br><span class="line">Enchant enchant;</span><br><span class="line">enchant = EnchantFactory.createEnchant(enchantName);</span><br><span class="line">enchant.Weapon = weapon;</span><br><span class="line">Console.WriteLine(enchant.GetResult());</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>　　畫出此簡單工廠模式的UML類別圖，如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/SimpleFactory-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/SimpleFactory.png" alt="簡單工廠模式 Simple Factory Pattern 案例 UML Class"></a></p>
<h4 id="3-心得"><a href="#3-心得" class="headerlink" title="3.心得"></a>3.心得</h4><p>這篇文章主要是參考&lt;&lt;大話設計模式&gt;&gt;裡的第一章”程式碼無錯就是優？—簡單工廠模式” 章節，是第一個學到的Design Pattern。之前學的物件導向三寶：封裝、繼承與多型，在此Pattern都有使用到，有稍微踏進物件導向的世界。之後還很多Pattern等著去學阿～～～</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第01章｜程式碼無錯就是優？—簡單工廠模式</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>單一職責原則 Single Responsibility Principle</title>
    <url>/2018/02/24/design-pattern-single-responsibility-principle/</url>
    <content><![CDATA[<p>單一職責原則 Single Responsibility Principle 的設計模式介紹</p>
<h4 id="1-單一職責原則介紹"><a href="#1-單一職責原則介紹" class="headerlink" title="1. 單一職責原則介紹"></a>1. 單一職責原則介紹</h4><h5 id="1-1-單一職責原則定義"><a href="#1-1-單一職責原則定義" class="headerlink" title="1.1 單一職責原則定義"></a>1.1 單一職責原則定義</h5><p>　　根據書上的介紹，單一職責原則的定義：There should never be more than one reason for a class to change。意思是對一個類別而言，應該只會有一個引起它變化的原因。此原則不只用在類別，還能用在介面，甚至是方法。</p>
<h5 id="1-2-單一職責原則案例"><a href="#1-2-單一職責原則案例" class="headerlink" title="1.2 單一職責原則案例"></a>1.2 單一職責原則案例</h5><p>　　以病患去診所就醫為例，要完成就醫的流程，從掛號、問診、領藥，可以寫成一個介面：</p>
<p>　　看似完美的介面，但其實仔細檢查，這介面有兩個職責：掛號與治療。掛號是向診所說要依序排隊看醫生，而治療的問診內容、領醫生開的藥跟掛號互不影響，所以可以切成兩個職責，如下UML類別圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/SRP-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/SRP.png" alt="單一職責原則 Single Responsibility Principle 案例 UML Class"></a></p>
<p>　　這樣的設計已經達到一個介面只有一個職責的原則，但是對於Patient類別而言，有兩個引起它變化的原因（ICure和IRegister），還能再透過組合模式做單一職責原則的設計，但是會有耦合性變高、類別數量增加的問題。</p>
<h5 id="1-3-單一職責原則優點"><a href="#1-3-單一職責原則優點" class="headerlink" title="1.3 單一職責原則優點"></a>1.3 單一職責原則優點</h5><ul>
<li>類別的複雜性降低</li>
<li>可讀性提高</li>
<li>可維護性提高</li>
<li>降低因更改的風險：如果單一職責能做得好，更改一項類別或介面時，不會引起其他介面或類別的變更</li>
</ul>
<h5 id="1-4-單一職責原則實踐難處"><a href="#1-4-單一職責原則實踐難處" class="headerlink" title="1.4 單一職責原則實踐難處"></a>1.4 單一職責原則實踐難處</h5><p>　　職責很難量化，因每個功能情境不同而職責劃分會有不同，只能建議介面的單一職責原則要遵守，而類別盡量達到。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第03章｜拍攝UFO—單一職責原則</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第1章 單一職責原則</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>策略模式 Strategy Pattern</title>
    <url>/2018/02/19/design-pattern-strategy/</url>
    <content><![CDATA[<p>策略模式 Strategy Pattern 的設計模式介紹</p>
<h4 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1. 案例需求"></a>1. 案例需求</h4><p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/800x_100_w-61c240ccc454b.jpg" alt="灌籃高手"></p>
<p>圖片來源：<a href="https://www.juksy.com/article/54771">https://www.juksy.com/article/54771</a></p>
<p>　　本篇以動漫－灌籃高手為例。在籃球比賽時，櫻木在我方禁區搶到籃板，準備要做進攻的動作，此時他腦中想了很多策略：</p>
<ul>
<li>自己灌籃！</li>
<li>傳球給三井壽投三分！</li>
<li>傳給宮城良田速攻</li>
<li>傳給赤木剛憲灌籃！</li>
<li>傳給櫻木討厭的流川楓速攻！</li>
</ul>
<h4 id="2-程式設計"><a href="#2-程式設計" class="headerlink" title="2. 程式設計"></a>2. 程式設計</h4><p>依照前述的需求，可畫出策略模式的UML類別圖，如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/Strategy-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/Strategy.png" alt="策略模式 Strategy Pattern 案例 UML Class"></a></p>
<p>　　分成三大區塊，Context類別、IOffense介面與實作介面的類別。<br>　　Context類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IOffense offense;</span><br><span class="line">    <span class="comment">// 使用哪個進攻策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">IOffense offense</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.offense = offense;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 呼叫進攻的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.offense.Operate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　IOffense介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operate</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　實作IOffense的類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DunkSelf</span> : <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我要灌籃啦！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PassAkagi</span> : <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;給赤木灌籃！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PassMitsui</span> : <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;給三井投三分！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PassMiyagi</span> : <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;給宮城速攻！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PassRukawa</span> : <span class="title">IOffense</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;給流川速攻！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　使用者介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Context context;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第1次接到籃板時，&quot;</span>);</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> PassAkagi());</span><br><span class="line">context.Operate();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第2次接到籃板時，&quot;</span>);</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> PassMitsui());</span><br><span class="line">context.Operate();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第3次接到籃板時，&quot;</span>);</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> PassMiyagi());</span><br><span class="line">context.Operate();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第4次接到籃板時，&quot;</span>);</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> PassRukawa());</span><br><span class="line">context.Operate();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第5次接到籃板時，&quot;</span>);</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> DunkSelf());</span><br><span class="line">context.Operate();</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>　　輸出結果：</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/2018-02-19-18_16_57-file____H__%E6%88%91%E7%9A%84%E8%B3%87%E6%96%99_%E5%B7%A5%E4%BD%9C_blogger%E5%88%86%E4%BA%AB_DesignPattern_%E7%A8%8B%E5%BC%8F%E7%A2%BC_DesignPattern_StrategyPattern_bin.png" alt="策略模式 Strategy Pattern 結果"></p>
<h4 id="3-策略模式介紹"><a href="#3-策略模式介紹" class="headerlink" title="3. 策略模式介紹"></a>3. 策略模式介紹</h4><h5 id="3-1-策略模式定義"><a href="#3-1-策略模式定義" class="headerlink" title="3.1 策略模式定義"></a>3.1 策略模式定義</h5><p>根據書上的介紹，策略模式的定義：Define a family of algorithms,encapsulate each one,and make them interchangeable。意思是將同一系列的每個演算法（策略）封裝起來，並可以互相交換使用。</p>
<p>　　而策略模式包含三大角色：</p>
<p>　　Context封裝角色：是個封裝類別，不能讓外部直接存取每個演算法，並維護Strategy物件。依照前述例子，是Context類別，其封裝了IOffense介面，不能讓外部呼叫IOffense。</p>
<p>　　Strategy抽象策略角色：演算法（策略）家族的抽象化，可用抽象類別或介面，需定義每個演算法的屬性和方法。依照前述例子，是IOffense介面，其定義了Operate方法。</p>
<p>　　ConcreteStrategy具體策略角色：實作Strategy抽象策略角色的類別，有實際的演算法。依照前述例子，具體策略的類別有PassAkagi、PassMitsui、PassMiyagi、PassRukawa與DunkSelf，皆實作IOffense介面。</p>
<p>　　此三大角色，可以總結出通用的UML類別圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/Strategy_common-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/Strategy_common.png" alt="策略模式 Strategy Pattern 通用 UML Class"></a></p>
<h5 id="3-2-策略模式優缺點"><a href="#3-2-策略模式優缺點" class="headerlink" title="3.2 策略模式優缺點"></a>3.2 策略模式優缺點</h5><p>優點</p>
<ul>
<li>可自由切換演算法</li>
<li>避免使用多重條件判斷：實作Strategy封裝每個演算法（策略），不用太多的條件判斷如何切換演算法</li>
<li>擴展性高：有新的演算法直接實作介面</li>
<li>每個演算法容易單元測試</li>
</ul>
<p>缺點</p>
<ul>
<li>具體策略類別過多：因為每一個策略就是一個類別，重複使用的情形很少，導致類別數量過多。若超過3個策略，建議要使用混合模式。</li>
<li>每個策略類別對外暴露：在使用者介面，須了解要呼叫哪個演算法，再透過Context呼叫，不是很完善的設計。</li>
</ul>
<h5 id="3-3-策略模式使用情境"><a href="#3-3-策略模式使用情境" class="headerlink" title="3.3 策略模式使用情境"></a>3.3 策略模式使用情境</h5><ul>
<li>存在很多個類別且只有演算法不一樣的情境</li>
<li>需要自由切換演算法的情境</li>
<li>需要隱藏演算法規則的情境：不需要讓使用者知道每個演算法的實作方式，只需了解類別名稱</li>
</ul>
<h5 id="3-4-策略模式改良"><a href="#3-4-策略模式改良" class="headerlink" title="3.4 策略模式改良"></a>3.4 策略模式改良</h5><p>策略模式的重大缺點，是每個策略類別暴露於外部，變成呼叫策略還要先了解策略的名稱，很明顯這樣的封裝還不夠完整。後繼有提出混合其他的模式做改良，像是工廠方法、代理模式或享元模式。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第02章｜商場促銷—策略模式</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第18章  策略模式</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>開閉原則 The Open-Closed Principle</title>
    <url>/2018/03/04/design-pattern-the-open-closed-principle/</url>
    <content><![CDATA[<p>開閉原則 The Open-Closed Principle 的設計模式介紹</p>
<h4 id="1-開閉原則介紹"><a href="#1-開閉原則介紹" class="headerlink" title="1. 開閉原則介紹"></a>1. 開閉原則介紹</h4><h5 id="1-1-開閉原則定義"><a href="#1-1-開閉原則定義" class="headerlink" title="1.1 開閉原則定義"></a>1.1 開閉原則定義</h5><p>根據書上的介紹，開閉原則的定義：Software entities like classes, modules and functions should be open for extension but closed for modifications。意思是軟體實體像是類別、模組和函式，應該只對延展開放，但對修改關閉。此原則是設計模式六大原則的核心原則，其他五原則都是以此原則做具體化。</p>
<h5 id="1-2-開閉原則案例"><a href="#1-2-開閉原則案例" class="headerlink" title="1.2 開閉原則案例"></a>1.2 開閉原則案例</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/03/when_is_the_steam_autumn_sale-1.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/03/when_is_the_steam_autumn_sale.jpg" alt="開閉原則 The Open-Closed Principle 說明"></a></p>
<p>圖片來源：<a href="http://www.alphr.com/games/1006124/steam-sales">http://www.alphr.com/games/1006124/steam-sales</a></p>
<p>　　以世界知名的遊戲平台Steam為例，此平台的主要功能包含賣遊戲。假設Steam賣遊戲的UML類別圖如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP.png" alt="開閉原則 The Open-Closed Principle 案例 UML Class"></a></p>
<p>　　IGame介面定義了三個方法，遊戲名稱 (getName)、價錢(getPrice)和開發者(getDeveloper)。Steam類別是Steam平台。FPSGame是實作IGame的具體類別，是所有第一人稱射擊(FPS)遊戲的總稱。三種類別與介面的程式碼如下：<br>　　IGame介面：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IGame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 遊戲名稱</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span>()</span>;</span><br><span class="line">    <span class="comment">// 價格</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">getPrice</span>()</span>;</span><br><span class="line">    <span class="comment">// 開發者</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getDeveloper</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FPSGame類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FPSGame</span> : <span class="title">IGame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 遊戲名稱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="comment">// 遊戲開發者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> developer;</span><br><span class="line">    <span class="comment">// 遊戲價格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> price;</span><br><span class="line">    <span class="comment">// 用constructor儲存遊戲資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FPSGame</span>(<span class="params"><span class="built_in">string</span> _name, <span class="built_in">int</span> _price, <span class="built_in">string</span> _developer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = _name;</span><br><span class="line">        <span class="keyword">this</span>.price = _price;</span><br><span class="line">        <span class="keyword">this</span>.developer = _developer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">getName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">getDeveloper</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.developer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Steam類別，並模擬賣出遊戲的紀錄：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Steam</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;IGame&gt; gameList = <span class="keyword">new</span> List&lt;IGame&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FPSGame(<span class="string">&quot;H1Z1&quot;</span>,<span class="number">431</span>,<span class="string">&quot;Daybreak Game Company&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> FPSGame(<span class="string">&quot;Counter-Strike: Global Offensive&quot;</span>,<span class="number">398</span>,<span class="string">&quot;Valve&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> FPSGame(<span class="string">&quot;Left 4 Dead 2&quot;</span>,<span class="number">468</span>,<span class="string">&quot;Valve&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> FPSGame(<span class="string">&quot;Call of Duty: Modern Warfare 2&quot;</span>,<span class="number">655</span>,<span class="string">&quot;Infinity Ward , Aspyr&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Steam販售遊戲紀錄：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(IGame game <span class="keyword">in</span> gameList)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Game Name: &quot;</span> + game.getName() + <span class="string">&quot;\tDeveloper: &quot;</span> + game.getDeveloper() + <span class="string">&quot;\tPrice: &quot;</span> + game.getPrice() );</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行Main函式的結果：</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/2018-03-04-10_11_17-file____H__%E6%88%91%E7%9A%84%E8%B3%87%E6%96%99_%E5%B7%A5%E4%BD%9C_blogger%E5%88%86%E4%BA%AB_DesignPattern_%E7%A8%8B%E5%BC%8F%E7%A2%BC_DesignPattern_OCP_bin_Debug_OCP.E.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/2018-03-04-10_11_17-file____H__%E6%88%91%E7%9A%84%E8%B3%87%E6%96%99_%E5%B7%A5%E4%BD%9C_blogger%E5%88%86%E4%BA%AB_DesignPattern_%E7%A8%8B%E5%BC%8F%E7%A2%BC_DesignPattern_OCP_bin_Debug_OCP.E.png"></a></p>
<p>　　以上模擬Steam賣遊戲的一般情況，但是Steam最有名的折扣活動是季節特賣，每款遊戲幾乎會有打折的優惠。假如原價450元以上的遊戲打8折，其他遊戲打6折，那麼要實現此打折的功能，該如何處理這樣的變化？有三種方法：</p>
<ul>
<li>修改介面（錯誤）：在IGame介面上新增getOffPrice()的方法，讓實作的具體類別都要實作此方法。但這樣修改的話，會造成FPSGame要修改、Steam類別也要修改。而IGame身為介面，應該是要穩定可靠的，不應該常有變化。因此這方法不考慮。</li>
<li>修改實作的具體類（錯誤）：在FPSGame的getPrice()中，將打折的功能實作在這函式，這是常見的處理方式。但是這方法還是有缺點，如果有想買FPS遊戲的人要看價格，透過已被修改的getPrice()，是打折後的價格，無法比較打折前後的差異，資訊會有落差。因此這方法不是最好的。</li>
<li>透過延展實作變化（正確）：將FPSGame的getPrice()改為virutal，並增加一個子類別OffFPSGame繼承FPSGame，覆寫getPrice()方法，而在Steam類別重新生成OffFPSGame物件。這方法修改少、風險也小，修改後的UML類別圖如下：</li>
</ul>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP_off-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP_off.png" alt="開閉原則 The Open-Closed Principle 案例 UML Class"></a></p>
<p>　　OffFPSGame類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OffFPSGame</span> : <span class="title">FPSGame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OffFPSGame</span>(<span class="params"><span class="built_in">string</span> _name, <span class="built_in">int</span> _price, <span class="built_in">string</span> _developer</span>) : <span class="title">base</span>(<span class="params">_name, _price, _developer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">getPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> originPrice = <span class="keyword">base</span>.getPrice();</span><br><span class="line">        <span class="built_in">int</span> offPrice = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (originPrice &gt;= <span class="number">450</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            offPrice = originPrice * <span class="number">80</span> / <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            offPrice = originPrice * <span class="number">60</span> / <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> offPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Steam類別：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Steam</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;IGame&gt; gameList = <span class="keyword">new</span> List&lt;IGame&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> OffFPSGame(<span class="string">&quot;H1Z1&quot;</span>,<span class="number">431</span>,<span class="string">&quot;Daybreak Game Company&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> OffFPSGame(<span class="string">&quot;Counter-Strike: Global Offensive&quot;</span>,<span class="number">398</span>,<span class="string">&quot;Valve&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> OffFPSGame(<span class="string">&quot;Left 4 Dead 2&quot;</span>,<span class="number">468</span>,<span class="string">&quot;Valve&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> OffFPSGame(<span class="string">&quot;Call of Duty: Modern Warfare 2&quot;</span>,<span class="number">655</span>,<span class="string">&quot;Infinity Ward , Aspyr&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Steam販售遊戲紀錄：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(IGame game <span class="keyword">in</span> gameList)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Game Name: &quot;</span> + game.getName() + <span class="string">&quot;\tDeveloper: &quot;</span> + game.getDeveloper() + <span class="string">&quot;\tPrice: &quot;</span> + game.getPrice() );</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行Main函式的結果：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP_OFF_RESULT-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/03/OCP_OFF_RESULT.png" alt="開閉原則 The Open-Closed Principle 結果"></a></p>
<h5 id="1-3-使用開閉原則的原因"><a href="#1-3-使用開閉原則的原因" class="headerlink" title="1.3 使用開閉原則的原因"></a>1.3 使用開閉原則的原因</h5><ul>
<li>對測試的影響：以上述Steam賣遊戲為例，可以測試FPSGame類別的getPrice()等函式是否正確。而測試打折的功能，若是用修改介面或修改FPSGame的getPrice()，則測試的判斷條件會變複雜，不利於測試。透過新增的OffFPSGame類別，只需新增測試類別，針對OffFPSGame類別做測試，原本的FPSGame測試不用更改。</li>
<li>提升重複使用性：將商業邏輯切割越細，能重複利用子邏輯來組合更高階的功能模組，避免之後維護要修改功能時，要花不少時間找出分散的共同邏輯。</li>
<li>提升可維護性：最好的維護方法是透過延展，而不是一直修改原本的程式碼，否則原本程式碼越改越多、複雜時，會造成日後維護更加困難。</li>
<li>物件導向程式設計的需求：讓開發者一開始要盡量設計完整，考慮所有的變化，所有物件能抽象化，建立完整的抽象類別或介面，日後維護只需延展。</li>
</ul>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第04章｜升學求職兩不誤—開放-封閉原則</a></li>
<li><a href="https://amzn.to/3JLkwQW">秦小波 設計模式之禪 第6章 開閉原則</a></li>
</ol>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
      </categories>
  </entry>
  <entry>
    <title>UML Class Diagram</title>
    <url>/2018/02/11/design-pattern-uml-class-diagram/</url>
    <content><![CDATA[<p>UML Class Diagram 的介紹</p>
<h4 id="1-UML簡介"><a href="#1-UML簡介" class="headerlink" title="1. UML簡介"></a>1. UML簡介</h4><p>　　UML &#x3D; Unified Modeling Language &#x3D; 統一塑模語言，是一種標準化的標記語言，使開發者對軟體系統有具體說明、視覺化、建構與文件化的物件。在物件導向的軟體裡，UML是很重要的觀點之一。<br>　　之後學到Design Pattern，都會用UML類別圖 (Class Diagram)表示它的意義，所以要先了解如何使用UML。本篇會舉RPG遊戲的角色職業來說明。</p>
<h4 id="2-繪圖工具-draw-io"><a href="#2-繪圖工具-draw-io" class="headerlink" title="2. 繪圖工具 - draw.io"></a>2. 繪圖工具 - draw.io</h4><p>　　繪製UML的工具，最常見的是微軟的Office Visio，只是它是要授權的。而在這提供一款免費且好用的工具：draw.io，能使用線上版或單機版，不需要註冊會員。編輯完成後的樣板檔還能存到雲端硬碟或自己的硬碟。<br>　　官網網址：<a href="https://www.draw.io/">https://www.draw.io/</a><br>　　單機版網址：<a href="https://about.draw.io/integrations/#integrations_offline">https://about.draw.io/integrations/#integrations_offline</a><br>　　打開程式介面，左方會有多種類別的繪圖元件，其中有個UML類別，常用UML元件都能從這拖拉使用。</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/2017-11-26-00_05_37--1024x543.png" alt="draw.io"></p>
<h4 id="3-UML類別圖案例-RPG遊戲之角色職業"><a href="#3-UML類別圖案例-RPG遊戲之角色職業" class="headerlink" title="3. UML類別圖案例 - RPG遊戲之角色職業"></a>3. UML類別圖案例 - RPG遊戲之角色職業</h4><h5 id="3-1-RPG遊戲角色職業的完整UML-Class-Diagrams"><a href="#3-1-RPG遊戲角色職業的完整UML-Class-Diagrams" class="headerlink" title="3.1 RPG遊戲角色職業的完整UML Class Diagrams"></a>3.1 RPG遊戲角色職業的完整UML Class Diagrams</h5><p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/UML_Class-1024x697.png" alt="UML Class Diagrams RPG遊戲角色職業的完整UML Class diagrams"></p>
<p>　　3.1的UML圖是本篇的範例，接著講解每一項細節。</p>
<h5 id="3-2-類別"><a href="#3-2-類別" class="headerlink" title="3.2 類別"></a>3.2 類別</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/UML_Class_1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/UML_Class_1.png" alt="UML Class Diagrams 角色 Class"></a></p>
<p>　　類別分成三個框，由上而下來看，第一個框代表類別名稱，若該類別是抽象類別，則要用斜體；第二個框是屬性；第三個框是方法。屬性和方法的前面有’+’號，代表public，若是’-‘代表private，而’#’代表protected。<br>　　此類別的屬性包含HealthPoint(血量)、MaginPoint(魔力量)、ATK(攻擊力)、MATK(魔法攻擊力)、Speed(攻擊速度)；方法包含Run(奔跑)、UseFood(使用食物)。</p>
<h5 id="3-3-介面"><a href="#3-3-介面" class="headerlink" title="3.3 介面"></a>3.3 介面</h5><p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface1.png" alt="UML Class Diagrams interface 矩形表示法"></a></p>
<p>介面1 - 矩形表示法</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface2.png" alt="UML基礎 類別圖 interface 棒棒糖表示法"></a></p>
<p>介面2 - 棒棒糖表示法</p>
<p>　　介面的表示法有兩種，第一種矩形表示法跟類別一樣，只是第一個框的最上方多了&lt;<interface>&gt;，代表這個圖是定義介面；第二種是棒棒糖表示法。<br>　　介面1是拳擊手的技能介面，包含方法Hook(勾拳)<br>　　介面2是騎士實作IRiding介面，其介面包含方法RindingHorse(騎乘術)</p>
<h5 id="3-4-實作-Implementation"><a href="#3-4-實作-Implementation" class="headerlink" title="3.4 實作 (Implementation)"></a>3.4 實作 (Implementation)</h5><p>　　若有類別要以矩形法表示實作關係，則用虛線與空心箭頭表示。本篇範例是Boxer實作IBoxingSkill介面，需定義Hook方法的內容。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface_implement-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/interface_implement.png" alt="UML Class Diagrams implementation"></a></p>
<h5 id="3-5-繼承"><a href="#3-5-繼承" class="headerlink" title="3.5 繼承"></a>3.5 繼承</h5><p>　　類別與類別之間，可有繼承的關係，如角色－近戰職業－劍士，有上下階層的繼承關係。繼承以實線與空心箭頭表示。本篇範例是CloseComat(近戰角色)繼承Character，並另外宣告屬性FuryPoint(狂暴值)和方法Fury(狂暴化)。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/Inherit-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/Inherit.png" alt="UML Class Diagrams inheritance"></a></p>
<h5 id="3-6-關聯-Association"><a href="#3-6-關聯-Association" class="headerlink" title="3.6 關聯 (Association)"></a>3.6 關聯 (Association)</h5><p>　　若類別”知道”另一個類別時，則是關聯的關係，用實線箭頭表示。本篇範例是Thief(盜賊)關聯Terrain(地形)。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/association-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/association.png" alt="UML Class Diagrams association"></a></p>
<h5 id="3-7-聚合-Aggregation"><a href="#3-7-聚合-Aggregation" class="headerlink" title="3.7 聚合 (Aggregation)"></a>3.7 聚合 (Aggregation)</h5><p>　　聚合是一種弱的”擁有”關係，A物件可以包含B物件，但B物件並不是A物件的一部分。聚合使用空心菱形與實線箭頭表示。本篇範例是Boxers聚合Boxer，並宣告方法OnePunch。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2018/02/aggression-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2018/02/aggression.png" alt="  aggregation"></a></p>
<h5 id="3-8-組合-Composition"><a href="#3-8-組合-Composition" class="headerlink" title="3.8 組合 (Composition)"></a>3.8 組合 (Composition)</h5><p>　　組合是一種強的”擁有”關係，代表部分物件和整體物件的生命週期是一樣的。組合使用實心菱形與實線箭頭表示，其中線的兩端各有數字，代表每一端各有幾個實例。本篇範例是一個Close Combat組合一個Close Combat Weapon(近戰武器)。</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/Composition.png" alt=" composition"></p>
<h5 id="3-9-依賴-Dependency"><a href="#3-9-依賴-Dependency" class="headerlink" title="3.9 依賴 (Dependency)"></a>3.9 依賴 (Dependency)</h5><p>　　當有方法需要別的類別做為參數時，是一種依賴關係。本篇範例是角色的方法UseFood需要Food類別，提供角色吃東西而增加血量、魔力量等功能。</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/dependency.png" alt=" dependency"></p>
<h4 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h4><p>這篇文章主要是參考&lt;&lt;大話設計模式&gt;&gt;裡的第一章”程式碼無錯就是優？—簡單工廠模式” 章節之UML，屬於讀書心得+實際模仿練習。會先學UML，是因為之後的所有模式都會畫UML圖，以免到時候學模式會看不懂。<br>　　本篇內容也是參考玩遊戲、看動漫的經驗，設計遊戲角色的類別，但不代表真實遊戲產品也是這樣設計，重點是了解UML基礎。<br>　　距離上次撰寫的<a href="https://geekcodeparadise.com/2017/11/design-pattern-object-oriented-programming-concept/"></a><a href="https://geekcodeparadise.com/wp-admin/post.php?post=205&action=edit">Object-oriented programming Concept</a>隔了三個月，真是慚愧．．．被公司案子搞到沒心寫文章（遭打。<br>　　希望莫忘初衷，保持學習的心。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://amzn.to/3LOwYlp">程杰 大話設計模式 第01章｜程式碼無錯就是優？—簡單工廠模式</a></li>
</ol>
<h4 id="修改日誌"><a href="#修改日誌" class="headerlink" title="修改日誌"></a>修改日誌</h4><ul>
<li>2021&#x2F;3&#x2F;19: 修正關聯和聚合的英文</li>
</ul>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>OOP</category>
        <category>UML</category>
      </categories>
  </entry>
  <entry>
    <title>Eclipse MapReduce Wordcount</title>
    <url>/2015/09/26/eclipse-mapreduce-wordcount/</url>
    <content><![CDATA[<p>Eclipse MapReduce Wordcount</p>
<h4 id="1-開發環境"><a href="#1-開發環境" class="headerlink" title="1.開發環境"></a>1.開發環境</h4><p>在Windows（本篇為Windows 7）開發Hadoop程式需要的軟體工具清單：</p>
<ul>
<li>(1) Oracle JDK，本篇使用1.8.0_60版， <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">官方連結點我下載</a></li>
<li>(2) Eclipse，寫JAVA程式的極好IDE，本篇使用 Eclipse IDE for Java EE Developers Mars Release 4.5.0版本，<a href="https://eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/R/eclipse-jee-mars-R-win32-x86_64.zip">官方連結點我下載</a></li>
</ul>
<p> </p>
<p>　　安裝完JDK後，記得在Windows的環境變數新增JAVA_HOME變數，並指定到您的JAVA安裝目錄，以本篇是安裝在C:Program FilesJavajre1.8.0_60</p>
<h4 id="2-Eclipse新增Hadoop專案"><a href="#2-Eclipse新增Hadoop專案" class="headerlink" title="2.Eclipse新增Hadoop專案"></a>2.Eclipse新增Hadoop專案</h4><h5 id="2-1-Maven的簡介"><a href="#2-1-Maven的簡介" class="headerlink" title="2.1 Maven的簡介"></a>2.1 Maven的簡介</h5><p>Apache Maven是現在開發JAVA程式很常用的管理專案套件，在較新的Eclipse JavaEE版有內建。主要功能有2項：</p>
<ol>
<li>可以自動從特定的library repository下載開發程式的所需jar檔，甚至有相依性的jar檔也都會一起下載，比起傳統要自己從每個網站東抓西抓檔案還來的有效率。</li>
<li>專案區分main與test兩種程式碼管理，test有使用JUnit做單元測試，在開發較複雜的系統可以用JUnit測完該程式的功能，再放置main裡面。</li>
</ol>
<p>本篇使用Maven來建立Hadoop程式，其他的管理專案套件有Ivy、Grape、Gradle、Buildr、SBT、Leiningen等，有興趣者可以使用其他的。</p>
<h5 id="2-2-新增Maven-Project"><a href="#2-2-新增Maven-Project" class="headerlink" title="2.2 新增Maven Project"></a>2.2 新增Maven Project</h5><p>在Eclipse的左上角點選File -&gt; New -&gt; Maven Projec -&gt; 選擇quickstart的archetype -&gt; 設定Group Id(類似於 package 的功能，作為專案的群組識別名稱)、Artifact Id(專案名稱)。如下面三圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/NEW2BMAVEN2BPROJECT-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/NEW2BMAVEN2BPROJECT.png" alt="Eclipse MapReduce Wordcount maven project"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/MAVEN2BARCHTYPE-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/MAVEN2BARCHTYPE.png" alt="Eclipse MapReduce Wordcount maven project"></a></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/MAVEN2BPROJECT2BSET.png" alt="Eclipse MapReduce Wordcount project detail"></p>
<p> <a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/MAVEN2BPROJECT2BSET-1.png"></a>  　　建立好專案後，在專案檔案瀏覽的介面，可看見有src&#x2F;main&#x2F;java、src&#x2F;test&#x2F;java、Maven Dependency與pom.xml等目錄與檔案。如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/project2Bcreate2Band2Bchoose2Bpom-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/project2Bcreate2Band2Bchoose2Bpom.png" alt="Eclipse MapReduce Wordcount pom.xml"></a></p>
<p>點選pom.xml，預設在<dependencies>的標籤內只有junit套件，為了要開發Hadoop的程式，要另外加以下的套件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systempath</span>&gt;</span>$&#123;JAVA_HOME&#125;/lib/tools.jar<span class="tag">&lt;/<span class="name">systempath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>　　加了這些套件設定，儲存pom.xml，此時Eclipse右下角會顯示正在連結repository下載所需套件的進度，如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/pomxml2Badd2Bhadoop-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/pomxml2Badd2Bhadoop.png" alt="Eclipse MapReduce Wordcount update pom.xml"></a></p>
<p> 　　下載完畢，在專案檔案瀏覽介面點選Maven dependencies，可以看見所有的套件已經匯入該專案中，這麼一來可以開發基本的Hadop的程式。如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/maven2Bdependence2Blist-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/maven2Bdependence2Blist.png" alt="Eclipse MapReduce Wordcount libraries"></a></p>
<h5 id="2-3-開發Hadoop-JAVA程式-MyWordcount"><a href="#2-3-開發Hadoop-JAVA程式-MyWordcount" class="headerlink" title="2.3 開發Hadoop JAVA程式 - MyWordcount"></a>2.3 開發Hadoop JAVA程式 - MyWordcount</h5><p> 　　在src&#x2F;main&#x2F;java的package MyHadoopProject.Hadoop_2_7_1右鍵點選New -&gt; Class，取名較MyWordcount的class，如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/mywordcount2Bclass-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/mywordcount2Bclass.png" alt="Eclipse MapReduce Wordcount create program"></a></p>
<p>　　在寫程式前，先講解MapReduce程式的基本架構，其一共區分三種區塊：</p>
<p>　　Mapper區：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Class Mapper ...&#123; <span class="comment">//Map程式碼&#125;</span></span><br></pre></td></tr></table></figure>

<p>　　Reducer區：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Class Reducer...&#123; <span class="comment">//Reduce程式碼&#125;</span></span><br></pre></td></tr></table></figure>

<p>　　Driver區：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main()&#123; <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(); <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>(conf,<span class="string">&quot;MyWordcount&quot;</span>); job.setJarByClass(thisMainClass.class); job.setMapperClass(Mapper.class); job.setReducerClass(Reducer.class); FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>])); FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>])); <span class="comment">//其他配置參數程式碼 job.waitForCompletion(true);&#125;</span></span><br></pre></td></tr></table></figure>

<p>　接著根據此架構，撰寫出本程式的完整程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> MyHadoopProject.Hadoop_2_7_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWordcountWithPrint</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">MyWordcountWithPrint</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 初始化 */</span></span><br><span class="line">  <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 建立MapReduce Job, 該job的名稱為MyWordcount */</span></span><br><span class="line">  <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>(conf,<span class="string">&quot;MyWordcountPrint&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 啟動job的jar class 為MyWordcount */</span></span><br><span class="line">  job.setJarByClass(MyWordcountWithPrint.class);</span><br><span class="line">  <span class="comment">/* 啟動job的map class 為MyMapper */</span></span><br><span class="line">  job.setMapperClass(MyMapper.class);</span><br><span class="line">  <span class="comment">/* 啟動job的reduce class 為MyReducer */</span></span><br><span class="line">  job.setReducerClass(MyReducer.class);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 輸入資料的HDFS路徑 */</span></span><br><span class="line">  FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/input02&quot;</span>));</span><br><span class="line">  <span class="comment">/* 輸出資料的HDFS路徑 */</span></span><br><span class="line">  FileOutputFormat.setOutputPath(job,  <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/output03&quot;</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 輸出Key的型別 */</span></span><br><span class="line">  job.setOutputKeyClass(Text.class);</span><br><span class="line">  <span class="comment">/* 輸出Value的型別 */</span></span><br><span class="line">  job.setOutputValueClass(IntWritable.class);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 啟動Job並回傳是否成功執行完畢 */</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  System.exit(isSuccess ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* Mapper adapter: input key(LongWritable) , input value(Text) ,</span></span><br><span class="line"><span class="comment">  *  output key(Text) , output value(IntWritable) */</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span></span><br><span class="line">&lt;LongWritable, Text, Text , IntWritable&gt;&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">/* 將每一行的字串存到lineValue */</span></span><br><span class="line">   System.out.println(<span class="string">&quot;map content:&quot;</span>+key.get() +  <span class="string">&quot;and&quot;</span> + value.toString());</span><br><span class="line">   <span class="type">String</span> <span class="variable">lineValue</span> <span class="operator">=</span> value.toString();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 用StringTokenizer分割有空白、跳行等字元 */</span></span><br><span class="line">   <span class="type">StringTokenizer</span> <span class="variable">stk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(lineValue);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 將每個切割的字串存到wordValue, 再將wordValue設為Reduce的Key,</span></span><br><span class="line"><span class="comment">             * value設為整數1 (one) */</span></span><br><span class="line">   <span class="keyword">while</span>(stk.hasMoreTokens())</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">wordValue</span> <span class="operator">=</span> stk.nextToken();</span><br><span class="line">    word.set(wordValue);</span><br><span class="line">    context.write(word, one);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* Reducer adapter: input key(Text) , input values(IntWritable) ,</span></span><br><span class="line"><span class="comment">  *  output key(Text) , output value(IntWritable) */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span></span><br><span class="line">    &lt;Text, IntWritable, Text , IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable</span></span><br><span class="line"><span class="params">        &lt;intwritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">/* 累加該單字的數量 */</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 在Iterable變數values用迴圈方式,將每個值(整數1)取出並累加 */</span></span><br><span class="line">   <span class="keyword">for</span>(IntWritable value: values)</span><br><span class="line">   &#123;</span><br><span class="line">    sum += value.get();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 將累加的結果存到result */</span> </span><br><span class="line">   result.set(sum);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 輸出計算的結果 */</span></span><br><span class="line">   context.write(key,result);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　剛看完程式碼也許還不懂其意思，在此講解各程式碼區塊的運作：</p>
<ol>
<li>Mapper：mapper程式讀取輸入資料的接口，其中參數有4項：input key(LongWritable) , input value(Text) , output key(Text) 與 output value(IntWritable)。input key(LongWritable)是在一個檔案內每一行的起始位置（長整數型態）；input value(Text)是在一個檔案內每一行的字串；output key(Text) 是輸出的字串資料key，output value(IntWritable)是輸出的整數資料value。</li>
</ol>
<p>　　用個例子來說明會較清楚假設有個檔案內容為下 :</p>
<p>hello<br>world<br>hello<br>bug</p>
<p>那麼input key則會是0、6、12與18(包含跳行n)，input value是hello、world、hello與bug。StringTokenizer是切字串的類別，以此例子每行只有一個word，所以token只會有1個字。當得到一個token wordValue後，用Text型別的變數word，將token給設置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">word.set(wordValue);</span><br></pre></td></tr></table></figure>

<p>　　接著要輸出到reduce階段的函式是使用context.write()，其參數前後分別是key、value，而value是整數1（&#x3D; 變數one &#x3D; IntWritable(1)），代表該單字出現１次：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.write(word, one);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>Reducer：reducer是將mapper的輸出作為輸入，其中參數有4項：Reducer adapter: input key(Text) , input values(IntWritable) , output key(Text)與output value(IntWritable)。 　　input value(Text)與input values(IntWritable)要對應mapper的output key(Text)與output value(IntWritable)。而輸出的output key(Text) , output value(IntWritable) 則是該檔案的單字字串與出現的頻率。在以上面例子繼續講解，透過mapper傳過來的資料，其input key與input values會是：</p>
<p>(hello,(1,1))<br>(world,(1))<br>(bug,(1))</p>
<p>　　在MyReducer的protected void reduce函式裡，可以看見values是以iterable迭代器帶入，可以用迴圈來累加該key的出現次數。而要將整數值取出的方式是用.get()：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum += value.get();</span><br></pre></td></tr></table></figure>

<p>最後一樣是用context將output的key與value輸出，輸出的內容值將會是：</p>
<p>(hello,2)<br>(world,1)<br>(bug,1)</p>
<p>2. Driver：整個程式的啟動設定，包含設置主要有Configuration、Job與input&#x2F;output 資料HDFS路徑。Configuration目前只需new個物件及可；<br>　　Job首先set該MapReduce的名稱.set(conf,”job name”)；再來set MapReduce的class分別是main(MyWordcount.class)、mapper(MyMapper.class)與reducer(MyReducer.class)；</p>
<p>　　最後set輸出的key與value型態分為Text與IntWritable。input&#x2F;output的HDFS路徑是用FileInputFormat.addInputPath(job, new Path(“&#x2F;input01”))與 FileOutputFormat.setOutputPath(job, new Path(“&#x2F;output02”))，本篇是直接指定這兩個路徑，其中&#x2F;input01是上次用Hadoop wordcount example的輸入目錄。</p>
<p>　　整體來看，其實MapReduce的輸入輸出都是 (key,value) pair，再更核心部分會用shuffle、combine、sort等處理，這部分的演算法未來會介紹。</p>
<h5 id="2-4-Export-jar檔-與-Run-wordcount-job"><a href="#2-4-Export-jar檔-與-Run-wordcount-job" class="headerlink" title="2.4 Export jar檔 與 Run wordcount job"></a>2.4 Export jar檔 與 Run wordcount job</h5><p>code寫好後，點選在專案目錄的MyWordcount.java右鍵-&gt;Export-&gt;JAVA:Runnable JAR file，輸出名為MyWordcount.jar，如下方2圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/export2Bjar.png" alt="jar"></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/export2Bjar2.png" alt="jar export"></p>
<p> 　　接著將jar檔用ftp的方式上傳到hadoop01的&#x2F;home&#x2F;test&#x2F;目錄下，使用Filezilla不再贅述。接著下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar MyWordcount.jar</span><br></pre></td></tr></table></figure>

<p>　　此時command視窗會顯示該MapReduce程式啟動的資訊，如上次的example一樣，如下圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/run2Bjar.png" alt="result"></p>
<p>　　在port 8088的頁面中，也可以看見該job執行的狀況，如下圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/run2Bjob.png" alt="job"></p>
<p> 　　job執行完後，開啟port 50070的頁面，在&#x2F;output02的目錄下有產生資料，接著打開來檢查，確實內容跟上次用example的結果是一樣的，代表自己的wordcount是正確的！如下圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/OUTPUT022BDIR.png" alt="hdfs"></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/MYCOUNTRESULT.png" alt="result detail"></p>
<h4 id="3-結論"><a href="#3-結論" class="headerlink" title="3.結論"></a>3.結論</h4><p>懂了MapReduce的程式撰寫方式後，就能稱霸全世界，可以嘗試寫些比較複雜的資料處理程式。下篇內容會寫如何用JAVA存取HDFS資料。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li>Stackoverflow：<a href="http://stackoverflow.com/questions/29195269/in-the-pom-xml-for-a-java-project-i-get-missing-artifact-jdk-toolsjdk-toolsja">In the pom.xml for a java project, I get missing artifact jdk.tools:jdk.tools:jar:1.6 error</a>，在用Maven時遇到的bug，需要帶入JDK 1.8版本的lib路徑</li>
<li><a href="http://learngeb-ebook.readbook.tw/integration/maven.html">Gitbook readbook : Maven章節</a></li>
<li><a href="http://learngeb-ebook.readbook.tw/integration/maven.html">Hadoop官方MapReduce tutorial</a></li>
</ol>
<h4 id="新增-修改日記"><a href="#新增-修改日記" class="headerlink" title="新增&#x2F;修改日記"></a>新增&#x2F;修改日記</h4><p>2015&#x2F;9&#x2F;29：</p>
<ol>
<li>移除Maven其中1項dependency: hadoop-core，這項不移除會導致一些function衝突</li>
</ol>
<p>Eclipse MapReduce Wordcount</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Eclipse</category>
        <category>Java</category>
        <category>MapReduce</category>
      </categories>
  </entry>
  <entry>
    <title>HackerRank AND Product</title>
    <url>/2020/06/08/hackerrank-and-product/</url>
    <content><![CDATA[<p>HackerRank AND Product 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>HackerRank</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>AND Product</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://www.hackerrank.com/challenges/and-product/problem">HackerRank</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給T筆測資, 每筆測資有數字A和B，求A到B之間做連續Bitwise AND。比如A &#x3D; 8, B &#x3D; 13, 答案為8 &amp; 9 &amp; 10 &amp; 11 &amp; 12 &amp; 13 &#x3D; 8</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3 12 15 2 3 8 13</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>16 8</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>扣掉A和B，B-A的差Diff，Diff轉二進位有變動的最大範圍，AND Product絕對都為0，最後只看A和B扣掉Diff範圍做AND再補上0的結果。 比如17 和 23，他們的差異為6，轉二進位後的前3位數為0，只需前32-3 &#x3D; 29位數做AND再補上3個0為答案。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/06/25E5259C259625E7258925871-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/06/25E5259C259625E7258925871.png" alt="HackerRank AND Product 解法"></a></p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/HackerRank/Algorithms/Bit%20Manipulation/AND%20Product.cpp">https://github.com/u8989332/ProblemSolving/blob/master/HackerRank/Algorithms/Bit%20Manipulation/AND%20Product.cpp</a></p>
]]></content>
      <categories>
        <category>Bit Manipulation</category>
        <category>HackerRank</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop 2.7.1 Cluster 安裝在 VirtualBox</title>
    <url>/2015/09/06/hadoop-2-7-1-cluster/</url>
    <content><![CDATA[<p>安裝 Hadoop 2.7.1 Cluster 在 VirtualBox</p>
<h4 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h4><p>　　小弟開始在軟體業工作，是做Big Data Hadoop系統開發，開始會寫些對Hadoop系統或工作上學到的技術的文章，希望能幫助到一起學習的同伴。</p>
<p>　　首先本篇的內容是使用Oracle Virtual Box 安裝 Hadoop cluster，以下會依序介紹該如何安裝server、設定網路、安裝Hadoop、參考文獻等。<br>　　先非常簡單講解Hadoop的理論，如下圖所示</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/09/hadoop-administration-pdf-21-638-1.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/hadoop-administration-pdf-21-638.jpg" alt="Hadoop的理論"></a></p>
<p>來自於Edureka!：Hadoop Administration pdf</p>
<p> 　　Hadoop主要有HDFS(Hadoop Distributed File System)與MapReduce 2項核心系統。HDFS是分散式的檔案系統，任何要用Hadoop做資料運算，都得從HDFS存取。細分有namenode、secondarynamnenode及datanode，主節點(Master)的namenode管理datanode metadata(位置、大小等屬性)，secondarynamnenode是輔助namenode，分擔namenode的運作，而從節點(Slave)datanode則是存取資料的節點;MapReduce則是分散式的計算技術，主節點(Master)透過Job tracker會呼叫每個從節點的Task tracker做計算，從節點(Slave)Task tracker使用Map(Divide)函式將資料切割計算，之後各Task tracker使用Reduce(Conquer)函式結合計算結果並傳回到主節點。<br>　　本篇虛擬cluster共設置3台節點，第1台hadoop01為主節點(Master)，第2、3台hadoop02與hadoop03為從節點(Slaves)</p>
<h4 id="1-準備軟體工具與配備需求"><a href="#1-準備軟體工具與配備需求" class="headerlink" title="1.準備軟體工具與配備需求"></a>1.準備軟體工具與配備需求</h4><p>安裝Hadoop需要的軟體工具清單：</p>
<ul>
<li><p>(1) Oracle Virtual Box ，本篇使用5.0.4版，用此虛擬機來安裝server ， <a href="https://www.virtualbox.org/wiki/Downloads">官方連結點我下載</a></p>
</li>
<li><p>(2) Linux 映像檔 ，本篇使用 Ubuntu 14.04.3 LTS 64位元server版本做為虛擬機的server，<a href="http://www.ubuntu.com/download/server">官方連結點我下載</a></p>
</li>
<li><p>(3) Putty ，很常見的SSH&#x2F;Telnet 終端機連線工具，方便連server測試使用，<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">官方連結點我下載</a></p>
</li>
<li><p>(4) Notepad++ ，免費的文字編輯器，擁有FTP連線編輯文字檔的功能，不用在command mode 環境下用vim&#x2F;vi&#x2F;nano辛苦的編輯文字檔！另一篇文章會介紹如何使用FTP功能。<a href="https://notepad-plus-plus.org/">官方連結點我下載</a></p>
</li>
<li><p>(5) FileZilla FTP client，可透過FTP上傳／下載server的資料。<a href="https://filezilla-project.org/download.php?type=client">官方連結點我下載</a>  </p>
</li>
<li><p>(6) MobaXterm ，很多功能的SSH&#x2F;Telnet 終端機連線工具，其功能包含FTP、自動連結putty已設置的站台，畫面也好看，現在改用這個就能完成很多工作了。有免費版，<a href="http://mobaxterm.mobatek.net/download.html">官方連結點我下載</a></p>
</li>
<li><p>(7) 瀏覽器，能打開網頁看Hadoop運行狀況（遭打）</p>
</li>
</ul>
<p>本篇主機含16GB的記憶體、2TB的硬碟，以下的虛擬機系統配置依照個人需求而調整。</p>
<h4 id="2-安裝Linux-Ubuntu-server虛擬機"><a href="#2-安裝Linux-Ubuntu-server虛擬機" class="headerlink" title="2.安裝Linux Ubuntu server虛擬機"></a>2.安裝Linux Ubuntu server虛擬機</h4><p>開啟Virtual Box，首先新增名字為hadoop01的Linux 64位元虛擬機，配置4GB的記憶體、100GB動態配置硬碟空間。設定好後，點右鍵設定值→網路，介面卡要設置兩個，第一個選擇用橋接介面卡，名稱選擇家裡網卡的driver，其功能是為了能連到外面網路，如下圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E425BB258B25E9259D25A225E5258D25A11.png" alt="VirtualBox 橋接介面卡"></p>
<p>　　第二個選擇用「僅限主機」介面卡，是用來使本機與虛擬機互相連線，如下圖所示：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E425BB258B25E9259D25A225E5258D25A12.png" alt="VirtualBox 橋接介面卡 2"></p>
<p>　　接著啟動虛擬機，選擇Ubuntu iso檔安裝。安裝過程重要的地方有5點：</p>
<ul>
<li>(1) 選英文的操作系統，用中文的話會有很高的機率發生路徑&#x2F;軟體不能安裝等問題…..</li>
<li>(2) hostname以本機為例是設定為hadoop01，作為主節點（Master），如下圖所示：</li>
</ul>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E825A825AD25E525AE259Ahostname.png" alt="hadoop01"></p>
<ul>
<li>(3) 安裝的套件選擇OpenSSH Server、LAMP Server與Samba file Server，OpenSSH是為了能建立安全連線，LAMP Server是包含Apache http server、MySQL與PHP語言，Samba file Server是可以主機間互相修改資料。其他的套件就依個人需求而安裝，如下圖所示，記得要先用空白鍵選擇再按continue</li>
</ul>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E525AE258925E825A3259DServer25E525A5259725E425BB25B6.png" alt="安裝的套件選擇OpenSSH Server、LAMP Server與Samba file Server"></p>
<ul>
<li>(4) 設定簡單點的Ubuntu登入id&#x2F;pwd，以本機的id&#x2F;pwd都設定為test，方便做測試。</li>
<li>(5) 硬碟的切割選擇用LVM</li>
<li>(6) 選擇安裝 security updates automaticall</li>
</ul>
<p>以上若都正常安裝的話，恭喜您能進入到黑黑的Command Mode登入畫面囉!</p>
<h4 id="3-線上安裝套件"><a href="#3-線上安裝套件" class="headerlink" title="3. 線上安裝套件"></a>3. 線上安裝套件</h4><p>　　接著要透過網路安裝server所需的軟體，首先執行下面指令，更新ubuntu可取得資源的server清單：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>　　以下會有2樣軟體要下載並安裝：</p>
<ul>
<li>(1) Oracle JAVA ：Hadoop執行是在JVM上，環境必須要有安裝JAVA。而目前以Hadoop文件最新測試的穩定JAVA版本是1.7，所以本機安裝1.7版本。安裝要下三行指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java7-installer</span><br></pre></td></tr></table></figure>

<p>　　其中用指令add-apt-repository ppa:webupd8team&#x2F;java原因 ：Ubuntu的預設資源清單是沒有Oracle的Java，必須透過Ubuntu另外設置的webupd8team網路空間來下載。</p>
<p>　　安裝完後的Java路徑預設是在&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-7-oracle</p>
<p>可以下指令檢查是否Java版本正確</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<ul>
<li>(2) vsftpd：安裝Ubuntu的FTP Server，能夠方便傳檔案到Server，安裝要下此指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>

<p>　　安裝完成後，修改vsftpd的設定檔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>　　有4項參數要改：</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁止無帳密登入</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">anonymous_enable</span>=NO</span><br><span class="line"></span><br><span class="line"><span class="comment">#接受本地用戶登入</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">local_enable</span>=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#允許上傳/寫入（預設沒打開，請把前面的#去掉就打開了)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">write_enable</span>=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#用戶只能訪問指定目錄</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">chroot_local_user</span>=YES</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　設定完後，啟動服務vsftpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure>

<h4 id="4-修改網路設定"><a href="#4-修改網路設定" class="headerlink" title="4.修改網路設定"></a>4.修改網路設定</h4><p>　　為了配置每台的虛擬機網路IP，首先設定Virtual Box的網路設定，點選左上的檔案→喜好設定→網路，選取「僅限主機」網路的Virtual Box Host-Only Ethernet Adapter，將網路卡與DHCP伺服器的IP設定如下圖所示（其IP的值是由Virtual Box預設的，若想用別的IP也可行）：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E725B625B225E825B725AF25E52596259C25E525A525BD25E825A825AD25E525AE259A1.png" alt="虛擬機網路IP"></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E725B625B225E825B725AF25E52596259C25E525A525BD25E825A825AD25E525AE259A2.png" alt="虛擬機網路IP 2"></p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E725B625B225E825B725AF25E52596259C25E525A525BD25E825A825AD25E525AE259A3.png" alt="虛擬機網路IP 3"></p>
<p>　　設定完後，在hadoop01下指令更改網路IP設定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<p>　　在這檔案內容的下面增加這4行參數設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth1</span><br><span class="line">iface eth1 inet static</span><br><span class="line">address 192.168.56.101</span><br><span class="line">netmask 255.255.255.0</span><br></pre></td></tr></table></figure>

<p>其意思是我們用eth1的內部網路來連線溝通，而IP指定為192.168.56.101。</p>
<p>　　再來更改hosts，直接透過host做網路連線，不必每次都打IP。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>　　在此檔案內容上方的內容增加hadoop01 到 hadoop03的host設定，且要把IPv6的設定註解，否則用Hadoop的相關程式會有問題：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">192.168.56.101 hadoop01</span><br><span class="line">192.168.56.102 hadoop02</span><br><span class="line">192.168.56.103 hadoop03</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following lines are desirable for IPv6 capable hosts</span></span><br><span class="line"><span class="comment">#::1 localhost ip6-localhost ip6-loopback</span></span><br><span class="line"><span class="comment">#ff02::1 ip6-allnodes</span></span><br><span class="line"><span class="comment">#ff02::2 ip6-allrouters</span></span><br></pre></td></tr></table></figure>

<p>以上設定完後，將Server重新啟動，再下指令查看是否IP有正確更改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip addr show</span><br></pre></td></tr></table></figure>

<p>　　視窗會顯示這樣的訊息：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/IPADDRSHOW.png" alt="Hadoop 2.7.1 Cluster 檢查 IP"></p>
<p>　　可看見eth1網路卡有確實設定。  </p>
<p>　　接著設定ssh密鑰的設定，此設定是為了使Hadoop cluster之間連線可免密碼登入。下這兩行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 產生dsa的密鑰</span></span><br><span class="line">ssh-keygen -t dsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_dsa</span><br><span class="line"><span class="comment"># 將公鑰授權到key</span></span><br><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>　　試著對自己ssh連線：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh hadoop01</span><br></pre></td></tr></table></figure>

<p>會顯示是否連線(yes&#x2F;no) ，輸入yes，會顯示如下圖的訊息：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/SSH25E8258725AA25E525B725B1.png" alt="Hadoop 2.7.1 Cluster SSH 連線"></p>
<h4 id="5-下載與安裝Hadoop-2-7-1"><a href="#5-下載與安裝Hadoop-2-7-1" class="headerlink" title="5.下載與安裝Hadoop 2.7.1"></a>5.下載與安裝Hadoop 2.7.1</h4><p>接著是安裝本篇主角－－－Hadoop！使用wget指令從<a href="http://www.apache.org/dyn/closer.cgi/hadoop/common">Apache官方下載</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/hadoop/common/hadoop-2.7.1/hadoop-2.7.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　下載好後將其解壓縮</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf hadoop-2.7.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　更改Hadoop的設定，首先更改環境路徑的設定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>　　在最下方增加這些環境參數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_PREFIX=<span class="string">&quot;/home/test/hadoop-2.7.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=<span class="variable">$HADOOP_PREFIX</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_PREFIX</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_PREFIX</span>/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_PREFIX</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_PREFIX</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_YARN_HOME=<span class="variable">$HADOOP_PREFIX</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">&quot;-Djava.library.path=<span class="variable">$HADOOP_HOME</span>/lib&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-7-oracle</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:/home/test/hadoop-2.7.1/bin:/home/test/hadoop-2.7.1/sbin</span><br></pre></td></tr></table></figure>

<p>　　增加後存檔，再使系統重讀.bashrc檔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>　　可以試著打下hadoop指令看看，會出現一些訊息</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/25E425B8258BHADOOP25E6258C258725E425BB25A4.png" alt="hadoop command"></p>
<p>代表有成功的設定環境變數。</p>
<p>　　將目錄切換到hadoop-2.7.1&#x2F;etc&#x2F;hadoop，須更改6項Hadoop的設定檔：core-site.xml、hdfs-site.xml(主節點mater與從節點slave有不一樣內容)、yarn-site.xml、mapred-site.xml、slaves(節點mater與從節點slave有不一樣內容)、hadoop-env.sh<br>　　hadoop01的設定(namenode master)<br>core-site.xml內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 將localhost改成hadoop01 host --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>hdfs-site.xml內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/test/hdfs/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- hadoop hdfs(datanode)設定在此目錄 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/test/hdfs/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- hadoop hdfs(namenode)設定在此目錄 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="comment">&lt;!-- block 數量　--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yarn-site.xml內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span> org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 有localhost的都改為hadoop01 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:8025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:8050<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原始的目錄只有mapred-site.xml.template檔案，需用cp複製一份改成mapred-site.xml：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>mapred-site.xml內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>slaves內容，把localhost那行去掉，改成主節點與從節點的host</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hadoop01</span></span><br><span class="line"><span class="attribute">hadoop02</span></span><br><span class="line"><span class="attribute">hadoop03</span></span><br></pre></td></tr></table></figure>

<p>hadoop-env.sh內容，找到[export JAVA_HOME&#x3D;]這一行，將Java的路徑設置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-7-oracle</span><br></pre></td></tr></table></figure>

<p>以上六項檔案設定完後，在&#x2F;home&#x2F;test底下建立hdfs&#x2F;namenodem和datanode目錄：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建立目錄</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p ~/hdfs/namenode</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p ~/hdfs/datanode</span><br><span class="line"><span class="comment">#更改權限為test使用者，之後啟動hdfs才能正常運作</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span> ~/hdfs/namenode</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span> ~/hdfs/datanode</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span> ~</span><br></pre></td></tr></table></figure>

<p>　　以上6項更改完後，將hadoop01關閉，透過Virtual Box複製另外兩個虛擬機hadoop02與hadoop03。 對著hadoop01右鍵→再製，並勾選初始化所有網路卡的MAC位址：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/clone.png" alt="複製虛擬機"></p>
<p>複製好這2台虛擬機，分別開啟更改些設定檔(hadoop02&#x2F;hadoop03: datanode slaves)</p>
<ul>
<li>hostname</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hostname</span><br><span class="line"><span class="comment">#將hadoop01改成對應虛擬機的hadoop02(或hadoop03)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&#x2F;etc&#x2F;network&#x2F;interfaces</li>
</ul>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auto</span> eth1</span><br><span class="line"><span class="attribute">iface</span> eth1 inet static</span><br><span class="line"><span class="attribute">address</span> <span class="number">192.168.56.102</span> #此IP為hadoop02的，hadoop03的設定改成<span class="number">192.168.56.103</span></span><br><span class="line"><span class="attribute">netmask</span> <span class="number">255.255.255.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hadoop-2.7.1&#x2F;etc&#x2F;hadoop&#x2F;slaves內容清空，只增加localhost這一行</li>
</ul>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localhost</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hadoop-2.7.1&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml，內容與hadoop01不同，只有datanode：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/test/hdfs/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更改完hdfs-site.xml的內容後，將原本的hdfs&#x2F;namenode刪除，改成hdfs&#x2F;datanode：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -Rf ~/hdfs/namenode</span><br><span class="line"><span class="comment">#更改權限為test使用者，之後啟動hdfs才能正常運作</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span> ~/hdfs/datanode</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span> ~</span><br></pre></td></tr></table></figure>

<p>　　以上更改完後，三台虛擬機都重新啟動，先從hadoop01對hadoop02與hadoop03做ssh連線，確認都可以正常登入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh hadoop02</span><br><span class="line">ssh hadoop03</span><br></pre></td></tr></table></figure>

<p>若能正常ssh登入後，在hadoo01這台下先下這項指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此指令是將namenode初始化</span></span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<p>接著再執行start-all.sh指令，這個shell會啟動hdfs與yarn services</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>

<p>　　會有下圖的啟動資訊，包含log檔的存檔位置：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/START-ALL.png" alt="Hadoop 2.7.1 Cluster start-all.sh 啟動"></p>
<p>　　接著下jps指令，查看各台的Hadoop服務是否都正常起動：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>以hadoop01(master)的狀態會是如下：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/JPS-MASTER.png" alt="Hadoop 2.7.1 Cluster jps 狀態"></p>
<p>　　而hadoop02與hadoop03的狀態會是如下：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/JPS-SLAVE.png" alt="Hadoop 2.7.1 Cluster jps 狀態 slave"></p>
<p>若您的三台的jps都跟本篇一樣，代表您成功安裝Hadoop了！</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/4055767_38d37c85866b5a95bcf9da64b82daf72.gif" alt="恭喜安裝完成"></p>
<p>　　接著在你的瀏覽器輸入網址: 192.168.56.101:50070 ，可以看見datanode的資訊</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/50070portpage.png" alt="Hadoop 2.7.1 Cluster 網頁"></p>
<p>而輸入網址:192.168.56.101:8088　，可看見job的資訊</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/8088portpage.png" alt="Hadoop 2.7.1 Cluster Job"></p>
<p>　　若要將Hadoop的service(hdfs與yarn)關閉，在hadoop01下此指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>

<p>　　會顯示關閉的資訊，之後網頁就連不上囉：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/09/STOP-ALL.png" alt="Hadoop 2.7.1 Cluster 斷線"></p>
<h4 id="6-結論"><a href="#6-結論" class="headerlink" title="6.結論"></a>6.結論</h4><p>　　完成這樣的安裝，才只是成功的一小步……本人在安裝的過程遇到很多問題，使用了不同版本的安裝方式就會出bug，只能說Hadoop變化真的很快！接著會陸續增加怎寫Hadoop的程式、安裝其他的套件等文章，而理論的部份我也正在學習，下面的參考文獻會列出一些翻過的書籍，可以從中了解Hadoop的運作，希望能幫到一起學習Hadoop的同伴，另外本文有錯誤或建議的部分請多指教，會做些修改。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="http://hadoop.apache.org/docs/r2.7.1/">Hadoop 2.7.1官方文件</a></li>
<li><a href="http://chaalpritam.blogspot.tw/2015/05/hadoop-270-multi-node-cluster-setup-on.html">chaalpritam blog：Hadoop 2.7.0 Multi Node Cluster Setup on Ubuntu 15.04</a>，有影片示範</li>
<li> <a href="http://woodysclin.blogspot.tw/2014/05/hadoop-240-cluster.html">woodysclinblog：Hadoop 2.4.0 Cluster 多節點安裝紀錄</a> </li>
<li>書籍： <a href="http://www.books.com.tw/products/0010633714">Hadoop實戰技術手冊(第2版)</a>，這本是中國的Hadoop聖經，有台灣出版社翻譯，內容似乎對中國原版做更正，使用Hadoop 2.3.0作範例</li>
<li>書籍：<a href="https://www.amazon.com/-/zh_TW/Tom-White/dp/1449311520?crid=H3Z87CYB24CI&keywords=Hadoop:+The+Definitive+Guide&qid=1641613221&sprefix=hadoop+the+definitive+guide,aps,409&sr=8-1&linkCode=ll1&tag=glj89893320b-20&linkId=5dba868200c291617ea24b13999b1b49&language=zh_TW&ref_=as_li_ss_tl">Hadoop: The Definitive Guide</a><a href="http://shop.oreilly.com/product/0636920033448.do">, 4th Edition</a> ，全球公認的Hadoop聖經，但我認為這本不適合新手…因為這本是講各種核心的運作理論，對於安裝的部分寫得很淺，會讓新手卡關在安裝步驟</li>
<li>書籍：<a href="https://www.amazon.com/-/zh_TW/Garry-Turkington-ebook/dp/B00BKXQT8S?crid=1UAMK25KJE4SY&keywords=Hadoop+Beginner%27s+Guide&qid=1641613264&sprefix=hadoop+beginner%27s+guide,aps,235&sr=8-2&linkCode=ll1&tag=glj89893320b-20&linkId=762edc055277a4f7967c924a6d1e2373&language=zh_TW&ref_=as_li_ss_tl">Hadoop Beginner’s Guide</a>，這本我認為很適合新手，寫得很好懂，安裝步驟蠻清楚的</li>
</ol>
<h4 id="新增-修改日記"><a href="#新增-修改日記" class="headerlink" title="新增&#x2F;修改日記"></a>新增&#x2F;修改日記</h4><p>2015&#x2F;9&#x2F;20：</p>
<ol>
<li> 將Master hadoop01新增為datanode，更改了hadoop01的hdfs-site.xml、datanode目錄，是為了多個節點運算，之後要用來比較效能用。 </li>
<li>新增stop-all.sh 介紹</li>
</ol>
<p>2015&#x2F;9&#x2F;25：</p>
<ol>
<li>VirtualBox更新成5.0.4版，跟4.X版差不多功能，安裝Ubuntu和Hadoop都正常。</li>
</ol>
<p>2015&#x2F;9&#x2F;26：</p>
<ol>
<li>telnet&#x2F;ssh終端機連線工具新增MobaXterm，有免費版。</li>
</ol>
<p>2015&#x2F;10&#x2F;17：</p>
<ol>
<li>設置成hadoop01 至 hadoop05 五台虛擬機，01為Master，02~05為Slaves。</li>
</ol>
<p>2015&#x2F;11&#x2F;25：</p>
<ol>
<li>更改&#x2F;etc&#x2F;hosts的設定，要將IPv6的設定取消，有遇到使用HBase時zookeeper會connection refused</li>
</ol>
<p>Hadoop 2.7.1 Cluster</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Big Data</category>
      </categories>
  </entry>
  <entry>
    <title>HBase 1.1.2 安裝</title>
    <url>/2015/10/18/hbase-1-1-2/</url>
    <content><![CDATA[<p>HBase 1.1.2 安裝</p>
<h4 id="1-HBase簡介"><a href="#1-HBase簡介" class="headerlink" title="1.HBase簡介"></a>1.HBase簡介</h4><p>HBase是以表的方式儲存資料，但與一般的關聯式資料庫不一樣，它的每個row由column family組成。Column family的宣告在每個row可以不一致，以下方簡單的學校資料的表來說明。</p>
<p>Row</p>
<p>Timestamp</p>
<p>Column family: person</p>
<p>Column family: schooltimetable</p>
<p>School</p>
<p>t009</p>
<p>person:teacher&#x3D;”John”</p>
<p> </p>
<p>t007</p>
<p>person:student&#x3D;”Rock”</p>
<p> </p>
<p>t004</p>
<p> </p>
<p>schooltimetable:english&#x3D;”3-4”</p>
<p>t003</p>
<p> </p>
<p>schooltimetable:math&#x3D;”5-6”</p>
<p>t001</p>
<p>person:student&#x3D;”Jack”</p>
<p> </p>
<p>　　在一個表中有一筆row：school，而每新增一筆資料會有個timestamp註記，在t001這一筆新增了person:student column family，而特定的column為student，其value為Jack；在t003新增一筆課表schooltimetable:math column family，column為math，其值為5-6。<br>　　HBase邏輯模型是如此運作，之後會介紹下command的結果。</p>
<h4 id="2-安裝HBase"><a href="#2-安裝HBase" class="headerlink" title="2.安裝HBase"></a>2.安裝HBase</h4><p>HBase在0.90.4版以後已經自帶Zookeeper，可以選擇用自己安裝的Zookeeper或HBase的。若要用自裝的，可以參考這篇文章。<a href="https://geekcodeparadise.com/2015/10/zookeeper-3-4-6/">[Hadoop] 安裝 Zookeeper 3.4.6版</a><br>　　HBase的部署是一個HMaster與多個HRegionserver，本篇用hadoop01為HMaster，hadoop02~hadoo05為HRegionserver。<br>　　首先用wget下載1.1.2版的HBase：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/hbase/1.1.2/hbase-1.1.2-src.tar.gz</span><br><span class="line">tar -zxf hbase-1.1.2-src.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　解壓縮後，新增HBase&#x2F;bin環境變數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/test/hbase-1.1.2/bin</span><br></pre></td></tr></table></figure>

<p>　　進入到hbase&#x2F;conf目錄，將hbase-env.sh的環境變數新增Java和Hadoop的路徑、啟動HBase的Zookeeper：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The java implementation to use. Java 1.7+ required.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-7-oracle</span><br><span class="line"><span class="comment"># Extra Java CLASSPATH elements. Optional. </span></span><br><span class="line"><span class="built_in">export</span> HBASE_CLASSPATH=/home/test/hadoop-2.7.1/conf <span class="comment">#這是帶入Hadoop/conf的位置,不是HBase的</span></span><br><span class="line"><span class="comment"># Tell HBase whether it should manage it&#x27;s own instance of Zookeeper or not. </span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span> <span class="comment">#啟動HBase的Zookeeper</span></span><br></pre></td></tr></table></figure>

<p>　　將hbase-site.xml編輯，新增四筆內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop01:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span>   <span class="comment">&lt;!-- 這一個9000 port，要跟hadoop/core-site.xml的defaultFS一樣　--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span>　　<span class="comment">&lt;!-- 啟動分散式模式　--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01,hadoop02,hadoop03,hadoop04,hadoop05<span class="tag">&lt;/<span class="name">value</span>&gt;</span>　<span class="comment">&lt;!-- 設定要用Zookeeper的機器host　--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- HBase的Zookeeper存放資料的目錄　--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/test/hbase-zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>　　將regionservers編輯，新增使用regionservers的host：</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hadoop02</span> hadoop03 hadoop04 hadoop05</span><br></pre></td></tr></table></figure>

<p>　　將HBase複製給其他的機器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r ~/hbase-1.1.2 <span class="built_in">test</span>@hadoop02:/home/test</span><br><span class="line">scp -r ~/hbase-1.1.2 <span class="built_in">test</span>@hadoop03:/home/test</span><br><span class="line">scp -r ~/hbase-1.1.2 <span class="built_in">test</span>@hadoop04:/home/test</span><br><span class="line">scp -r ~/hbase-1.1.2 <span class="built_in">test</span>@hadoop05:/home/test</span><br></pre></td></tr></table></figure>

<p>　　啟動前每台機器防火牆要關，否則無法正常起動：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ufw stop</span><br></pre></td></tr></table></figure>

<h4 id="3-執行HBase"><a href="#3-執行HBase" class="headerlink" title="3.執行HBase"></a>3.執行HBase</h4><p>Hadoop啟動後，在hadoop01（Master）啟動HBase：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure>

<p>　　在hadoop01的jps，會有新的process：HMaster和HQuorumPeer；而hadoop02至hadoop05是HRegionServer和HQuorumPeer；如下兩圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/master2Bjps-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/master2Bjps.png" alt="HBase 1.1.2 jps"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/slave2Bjps-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/slave2Bjps.png" alt="HBase 1.1.2  jps"></a></p>
<p>　　啟動後，可以透過瀏覽器查看HBase的狀態，port為16010：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/web2B16010-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/web2B16010.png" alt="HBase 1.1.2  web"></a></p>
<p>　　有看見Master為hadoop01，RegionServer為hadoop02~hadoop05的資訊，代表HBase有正常運作。 　　<br>　　接著用HBase的shell來新增資料：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<p>進到shell後，先用status指令查看server狀況：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/status-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/status.png" alt="HBase 1.1.2  status"></a></p>
<p>　　有四台HRegionServer，是正確的。接著建立一個table和一筆column family：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/create2Btable-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/create2Btable.png" alt="create table"></a></p>
<p>　　用list查看table資訊：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/list-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/list.png" alt="list"></a></p>
<p>　　用put指令新增三筆資料：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/put-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/put.png" alt="put"></a></p>
<p>　　put的參數分別是table、row、column family:column和value，以上圖是新增了兩筆row：row1和row2，row1有col1，其值為001；row2有col2和col3，其值分別為002和003。</p>
<p>用scan指令查看table1的資訊：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/scan-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/scan.png" alt="scan"></a></p>
<p>　　用get指令查看單一筆row的資料：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/get-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/get.png" alt="get"></a></p>
<p>　　用delete指令刪除一筆column：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/delete.png" alt="scan"></p>
<p>　　用disable和drop將table刪除：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/disable2Bdrop.png" alt="drop"></p>
<h4 id="4-結論"><a href="#4-結論" class="headerlink" title="4.結論"></a>4.結論</h4><p>　　就我知道的,HBase的應用比較多，比之前介紹的Hive用的還多，這兩種資料儲存庫運作方式不一樣，還是要看應用的環境為何。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li>劉鵬 實戰Hadoop 第4章 HBase</li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>HBase</category>
      </categories>
  </entry>
  <entry>
    <title>HDFS Java API</title>
    <url>/2015/10/01/hdfs-java-api/</url>
    <content><![CDATA[<p>HDFS Java API</p>
<h4 id="1-HDFS的Java-API"><a href="#1-HDFS的Java-API" class="headerlink" title="1.HDFS的Java API"></a>1.HDFS的Java API</h4><p>HDFS提供Java的API，可以用Java開發對HDFS做存取功能的程式。本篇開發環境一樣是Java EE Eclipse，以下會介紹HDFS常使用的API。</p>
<h5 id="1-1-繼承-TestCase-class的-java檔"><a href="#1-1-繼承-TestCase-class的-java檔" class="headerlink" title="1.1 繼承 TestCase class的.java檔"></a>1.1 繼承 TestCase class的.java檔</h5><p>如果您已經熟悉JUnit這項功能，可直接跳過本節。由於HDFS的API很多重複性的函式／類別要呼叫，如果每做一個功能就要建一個.java來測試短短幾行程式碼，個人覺得蠻占空間的。而外界有提供JUnit API（已內建於Java EE Eclipse Maven Project），這API可以在同一份.java檔針對某個函式做執行。首先要建立個MyHDFSControl.java，在檔案上方import：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br></pre></td></tr></table></figure>

<p>　　之後在class名稱後面用extends繼承TestCase：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHDFSControl</span> <span class="keyword">extends</span> <span class="title class_">TestCase</span> &#123;　　<span class="comment">//code....&#125;</span></span><br></pre></td></tr></table></figure>

<p>　　如此一來該類別的每個函式都可以獨自執行。</p>
<h5 id="1-2-讀取HDFS檔案的內容"><a href="#1-2-讀取HDFS檔案的內容" class="headerlink" title="1.2 讀取HDFS檔案的內容"></a>1.2 讀取HDFS檔案的內容</h5><p>　　首先先貼這簡短的程式碼，在依序介紹每行的作用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//hadoop01 HDFS的Uri</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01&quot;</span>;</span><br><span class="line"> <span class="comment">//之前做Wordcount的計算結果Uri</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/output01/part-r-00000&quot;</span>;</span><br><span class="line"> <span class="comment">//建立HDFS操作，都一定要呼叫環境變數類別Configuration</span></span><br><span class="line"> <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"> <span class="comment">//建立HDFS的類別FileSystem，參數帶入hadoop01的Uri與Configuration</span></span><br><span class="line"> <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//建立HDFS路徑的類別Path，參數帶入要做存取檔案的Uri</span></span><br><span class="line"> <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(uri);</span><br><span class="line">  </span><br><span class="line"> <span class="comment">/*建立HDFS讀取檔案的類別FSDataInputStream,</span></span><br><span class="line"><span class="comment">    由FileSystem的open函式傳遞path的stream*/</span></span><br><span class="line"> <span class="type">FSDataInputStream</span> <span class="variable">inStream</span> <span class="operator">=</span> hdfs.open(path);</span><br><span class="line"> <span class="comment">/*透過hadoop的IO API IOUtils，參數分別是(1)inStream讀取的資料 (2)stdout(console)輸出，</span></span><br><span class="line"><span class="comment"> 　(3)每次的存取buffer size是預設的4096 Bytes，(4)設false代表存取完不close stream */</span></span><br><span class="line"> IOUtils.copyBytes(inStream, System.out, <span class="number">4096</span>,<span class="literal">false</span>);</span><br><span class="line"> <span class="comment">//關掉stream</span></span><br><span class="line"> IOUtils.closeStream(inStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　首先介紹Uri與FileSystem：用Java做開發時，都要先透過FileSystem建立連線，使FileSystem能知道要存取HDFS的位置。而連線的Uri是帶入host hadoop01(master)的位置：webhdfs:&#x2F;&#x2F;hadoop01。<br>　　若有讀者曾開發過，會看出比較特別的地方是我Uri使用webhdfs:&#x2F;&#x2F; protocol，而不是hdfs:&#x2F;&#x2F;。因為webhdfs是可以兼容各種版本的HDFS，不用擔心版本的差異會導致無法存取HDFS。<br>　　接著Path是帶入要存取的HDFS檔案路徑，再透過FileSystem.open的方式，將該Path的FSInputStream指定給inStream變數，如此一來建立了對此檔案的檔案輸入指標。<br>　　Hadoop的IO類別的IOUtils可以對stream做讀取&#x2F;寫入，因此使用IOUtils將inStream讀到的資料，輸出到stdout(console)，最後再關閉inStream。<br> 　　執行程式的方式與結果如下：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/right2Bclick2Brun2Bjunit-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/right2Bclick2Brun2Bjunit.png" alt="HDFS Java API running"></a></p>
<p>對函式的名稱testRead右鍵-&gt;Run As-&gt;JUnit Test，或者在右邊的Outline也是一樣做法</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/read2Boutput-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/read2Boutput.png" alt="HDFS Java API run unit testing"></a></p>
<p>Console的輸出結果是之前做Wordcount的結果</p>
<p>　　大部分HDFS操作的流程： 建立環境Configuration -&gt; 建立FileSystem -&gt; 與host Uri連線 -&gt; 建立檔案的Path -&gt; 用FileSystem對Path做存取的操作。<br>　　以下各種程式碼的大同小異，會針對較特殊的地方再做補充說明。</p>
<h5 id="1-3-HDFS目錄下的資料屬性"><a href="#1-3-HDFS目錄下的資料屬性" class="headerlink" title="1.3 HDFS目錄下的資料屬性"></a>1.3 HDFS目錄下的資料屬性</h5><p>程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/input01&quot;</span>;</span><br><span class="line"> <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"> <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line"> <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(uri);</span><br><span class="line"> <span class="comment">//用listStatus函式，讀取input01目錄下的資料</span></span><br><span class="line"> FileStatus[] fileStatus = hdfs.listStatus(path);</span><br><span class="line"> <span class="comment">//用迴圈執行判斷每個資料是file或directory</span></span><br><span class="line"> <span class="keyword">for</span> (FileStatus fs : fileStatus)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="type">Path</span> <span class="variable">p</span> <span class="operator">=</span> fs.getPath();</span><br><span class="line">  <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> fs.isDir() ? <span class="string">&quot;Directory&quot;</span> : <span class="string">&quot;File&quot;</span>;</span><br><span class="line">  System.out.println(info + <span class="string">&quot; : &quot;</span> + p);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　用listStatus的函式，可以將一個目錄下所有資料的屬性，再透過迴圈讀取每個檔案的內容，本節使用Path的函式isDir判斷這檔案是否為directory。Path的函式還有很多種，例如該檔案的大小、owner是誰等。</p>
<h5 id="1-4-建立HDFS目錄"><a href="#1-4-建立HDFS目錄" class="headerlink" title="1.4 建立HDFS目錄"></a>1.4 建立HDFS目錄</h5><p>程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateDir</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">try</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line"><span class="comment">//建立testNewDir/testDir01目錄</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir/testDir01&quot;</span>;</span><br><span class="line">  <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">  <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">   </span><br><span class="line">  <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(uri);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> hdfs.mkdirs(path);</span><br><span class="line">  <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> isSuccess ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">  System.out.println(<span class="string">&quot;Create directory [&quot;</span> + path + <span class="string">&quot;]&quot;</span> + info);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)</span><br><span class="line"> &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　對於資料的寫入有個較謹慎的問題：權限！原先我的HDFS沒有testNewDir目錄，也沒有testDir01目錄，所以若是直接執行這段程式，會出現Permission denied的訊息：</p>
<p>Permission denied: user&#x3D;GAO, access&#x3D;WRITE, inode&#x3D;”&#x2F;testNewDir&#x2F;testDir01”:test:supergroup:drwxr-xr-x</p>
<p>　　解決的辦法有2種：<br>　　1.Server用指令先建立個testNewDir目錄，並用chmod改變這目錄的權限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /testNewDir</span><br><span class="line">hadoop fs -<span class="built_in">chmod</span> 777 /testNewDir</span><br></pre></td></tr></table></figure>

<p>　　執行完這程式碼後，再執行testCreateDir()程式就可以正常在testNewDir目錄下建立testDir01目錄(或寫入檔案）</p>
<p>　　2.更改hdfs-site.xml的內容，將dfs.permissions設置為false。但這方法不建議，會變成所有人都能隨意存取，有很多安全性的問題。</p>
<p>　　3.在Eclipse裡設定Java執行的環境變數，在Eclipse上方點Run -&gt; Run Configurations… -&gt; Environment -&gt; New -&gt; 新增一個NAME為HADOOP_USER_NAME ，Value為test（代表server的user），設定好按下Apply。如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/RUN2BCONIG2BHADOOP2BUSER-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/RUN2BCONIG2BHADOOP2BUSER.png" alt="HDFS Java API environment"></a></p>
<h5 id="1-5-複製local端的資料到HDFS"><a href="#1-5-複製local端的資料到HDFS" class="headerlink" title="1.5 複製local端的資料到HDFS"></a>1.5 複製local端的資料到HDFS</h5><p>　　程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPut</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">try</span></span><br><span class="line"> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">srcUri</span> <span class="operator">=</span> <span class="string">&quot;c:/testfile.txt&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">destUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir&quot;</span>;</span><br><span class="line">  <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">  <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">  </span><br><span class="line">  <span class="type">Path</span> <span class="variable">srcPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(srcUri);</span><br><span class="line">  <span class="type">Path</span> <span class="variable">destPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(destUri);</span><br><span class="line">  <span class="comment">/* 將local端的資料放到HDFS上 */</span></span><br><span class="line">  hdfs.copyFromLocalFile(srcPath, destPath);</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)</span><br><span class="line"> &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　使用copyFromLocalFile函式可以將local的資料寫到HDFS上。</p>
<h5 id="1-6-在HDFS寫入檔案"><a href="#1-6-在HDFS寫入檔案" class="headerlink" title="1.6 在HDFS寫入檔案"></a>1.6 在HDFS寫入檔案</h5><p>　　程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir/test1.txt&quot;</span>;</span><br><span class="line">   <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">   <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">   <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(uri);</span><br><span class="line">   <span class="comment">/* 在HDFS寫入FILE要用FSDataOutputStream */</span></span><br><span class="line">   <span class="type">FSDataOutputStream</span> <span class="variable">fsDataOutputStream</span> <span class="operator">=</span> hdfs.create(path);</span><br><span class="line">   fsDataOutputStream.write(<span class="string">&quot;This is test&quot;</span>.getBytes());</span><br><span class="line">   IOUtils.closeStream(fsDataOutputStream);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(Exception e)</span><br><span class="line">  &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>　　在HDFS寫入檔案使用FSDataOutputStream類別，透過hdfs的.create()回傳stream（FSInputStream是用open，有差別）。寫入資料的方式是用FsDataOutputStream.write()，這邊要注意的是若要寫入字串，盡可能使用getBytes()來寫入，若是用writeUTF()或writeChars()等函式寫入字串，寫出來的檔案會多一些字元，這屬於編碼的問題，詳細的原因待探討。</p>
<h5 id="1-7-更改HDFS檔案的名稱"><a href="#1-7-更改HDFS檔案的名稱" class="headerlink" title="1.7 更改HDFS檔案的名稱"></a>1.7 更改HDFS檔案的名稱</h5><p>程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">srcuri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir/test1.txt&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">dsturi</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir/test2.txt&quot;</span>;</span><br><span class="line">   <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">   </span><br><span class="line">   <span class="type">Path</span> <span class="variable">srcpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(srcuri);</span><br><span class="line">   <span class="type">Path</span> <span class="variable">dstpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(dsturi);</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> hdfs.rename(srcpath,dstpath);</span><br><span class="line">   System.out.println(flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(Exception e)</span><br><span class="line">  &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-8-刪除HDFS檔案-目錄"><a href="#1-8-刪除HDFS檔案-目錄" class="headerlink" title="1.8 刪除HDFS檔案&#x2F;目錄"></a>1.8 刪除HDFS檔案&#x2F;目錄</h5><p>程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteFile</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;webhdfs://hadoop01/testNewDir&quot;</span>;</span><br><span class="line">   <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">   <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">   <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(uri);</span><br><span class="line">   <span class="comment">/* 第二個參數:是否遞迴方式刪除, 若刪除對象是目錄,則目錄也會跟著被刪 */</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> hdfs.delete(path,<span class="literal">true</span>);</span><br><span class="line">   System.out.println(flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(Exception e)</span><br><span class="line">  &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-9-列出HDFS的各個Datanode-Hostname"><a href="#1-9-列出HDFS的各個Datanode-Hostname" class="headerlink" title="1.9 列出HDFS的各個Datanode Hostname"></a>1.9 列出HDFS的各個Datanode Hostname</h5><p>程式碼：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCluster</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">// 要用hdfs protocol,且port要用9000</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">basicUri</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop01:9000/&quot;</span>;</span><br><span class="line">   <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">   <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> FileSystem.get(URI.create(basicUri),conf);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//將FileSystem轉型給DistributedFileSystem</span></span><br><span class="line">   <span class="type">DistributedFileSystem</span> <span class="variable">distributedFileSystem</span> <span class="operator">=</span> (DistributedFileSystem) hdfs;</span><br><span class="line">   <span class="comment">//回傳各個datanode的資訊</span></span><br><span class="line">   DatanodeInfo[] datanodeInfos = distributedFileSystem.getDataNodeStats();</span><br><span class="line">   <span class="keyword">for</span>(DatanodeInfo dn : datanodeInfos)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">//回傳每個datanode的hostname</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> dn.getHostName();</span><br><span class="line">    System.out.println(hostname);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(Exception e)</span><br><span class="line">  &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>　　這邊較特別的是，要用DistributedFileSystem必須用hdfs的protocol，且port要用9000，用原本的webhdfs會無法將FileSystem cast給DistributedFileSystem。另外執行Java的環境變數要設置HADOOP_USER_NAME為test。以本人的程式執行會輸出hadoop01、hadoop02與hadoop03。</p>
<h4 id="2-結論"><a href="#2-結論" class="headerlink" title="2.結論"></a>2.結論</h4><p>　　透過HDFS的Java API，可以想像各種網路雲端空間的實作方式是不是就是這些API呢？只差在GUI、資料安全性、硬體等（其實差很多XD）。預計之後寫Hive與HBase的文章。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li>陸嘉恒 Hadoop實戰 第2版 第9章 HDFS詳解</li>
<li><a href="http://www.huqiwen.com/2013/07/18/hdfs-permission-denied/">IT人生录BLOG：HDFS客户端的权限错误：Permission denied</a></li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>HDFS</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Hive 1.2.1 安裝</title>
    <url>/2015/10/05/hive-1-2-1/</url>
    <content><![CDATA[<p>Hive 1.2.1 安裝</p>
<h4 id="1-Hive簡介"><a href="#1-Hive簡介" class="headerlink" title="1.Hive簡介"></a>1.Hive簡介</h4><p>Hive是一種透過Hadoop的MapReduce機制，使資料以Database的形式存在HDFS，並能用HiveQL作類似SQL語言來查詢資料，使得大型的資料能有快速的被查詢。Hive原先是由Facebook開發，後來貢獻給Apache，近幾年許多人不斷更改、維護，功能更加完善，目前最新版為1.2.1版。另外Hive存資料schema的格式是放在metastore，預設是用in-memory的Derby，但Derby只支援一個User的操作Hive，需要另外用MySQL來存放metastore。本篇會介紹如何安裝Hive、用Hive存資料與透過Java的JDBC存取Hive。</p>
<h4 id="2-安裝Hive"><a href="#2-安裝Hive" class="headerlink" title="2.安裝Hive"></a>2.安裝Hive</h4><p>在安裝Hive前，先確認環境已經安裝Hadoop與MySQL。若沒安裝過MySQL可以參考這篇文章。<a href="https://geekcodeparadise.com/2015/10/ubuntu-install-uninstall-mysql/">[My</a><a href="https://geekcodeparadise.com/2015/10/ubuntu-install-uninstall-mysql/">S</a><a href="https://geekcodeparadise.com/2015/10/ubuntu-install-uninstall-mysql/">QL]在ubuntu移除與安裝MySQL</a><br>　　Hive是安裝在需要使用的server，所以是安裝在Master（hadoop01）。首先用wget下載1.2.1版的Hive：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/hive/hive-1.2.1/apache-hive-1.2.1-bin.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　下載後將其解壓縮：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-hive-1.2.1-bin.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　在.bashrc增加Hive的環境變數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#編輯.bashrc檔</span></span><br><span class="line">sudo vim ~/.bashrc</span><br><span class="line"><span class="comment">#export Hive環境變數</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/home/test/apache-hive-1.2.1-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$HIVE_HOME</span>/conf:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#存檔後記得source</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>　　建立Hive所需的HDFS目錄與更改權限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/tmp目錄可能已經存在了，若已存在也須改權限</span></span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> /tmp　　<span class="comment">#主要用在存放一些Hive執行過程的臨時資料</span></span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> /user/hive/warehouse <span class="comment">#Hive進行管理的資料目錄，例如table都會存在這</span></span><br><span class="line">hadoop fs -<span class="built_in">chmod</span> 777 /tmp</span><br><span class="line">hadoop fs -<span class="built_in">chmod</span> 777 /user/hive/warehouse</span><br></pre></td></tr></table></figure>

<p>　　安裝libmysql-java，用JDBC時需要用到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmysql-java</span><br></pre></td></tr></table></figure>

<p>　　安裝完成後，將&#x2F;usr&#x2F;share&#x2F;java&#x2F;mysql-connector-java-5.1.28.jar複製到hive&#x2F;lib目錄下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /usr/share/java/mysql-connector-java-5.1.28.jar ~/apache-hive-1.2.1-bin/lib</span><br></pre></td></tr></table></figure>

<p>　　接著啟動MySQL，建立一個專屬Hive的帳號，啟動方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p<span class="comment">#接著會要求您輸入root的密碼，輸入完後會進入到mysql &gt; 的command模式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql &gt; create database hive; <span class="comment">#建立一個hive的database</span></span><br><span class="line">mysql&gt; grant all on *.* to<span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;hive&#x27;</span>; <span class="comment">#建立一個MySQL使用者，帳號跟密碼都是hive，且用%代表在任何hostname都可登入</span></span><br><span class="line">mysql&gt; flush privileges; <span class="comment">#更新User清單</span></span><br><span class="line">mysql&gt; <span class="built_in">exit</span>; <span class="comment">#結束mysql</span></span><br></pre></td></tr></table></figure>

<p>　　修改MySQL的參數設定檔案my.cnf：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/my.cnf</span><br><span class="line"><span class="comment">#將bind-address = 127.0.0.1這行用#註解，不要讓MySQL綁定local</span></span><br><span class="line"><span class="comment">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>

<p>　　在Hive的目錄裡建立一個新目錄：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/test/apache-hive-1.2.1-bin/iotmp <span class="comment">#Hive config會需要用到</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /home/test/apache-hive-1.2.1-bin/iotmp</span><br></pre></td></tr></table></figure>

<p>　　進入到Hive的目錄，將apache-hive-1.2.1-bin&#x2F;conf下的hive-default.xml.template改成hive-site.xml：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure>

<p>　　更改hive-site.xml的設定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim hive-site.xml</span><br></pre></td></tr></table></figure>

<p>　　另外更改conf的hive-env.sh.template：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> hive-env.sh.template hive-env.sh</span><br><span class="line">sudo vim hive-env.sh</span><br><span class="line"><span class="comment">#在這檔案內容最下方增加這4項:</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HEAPSIZE=1024</span><br><span class="line">HADOOP_HOME=/home/test/hadoop-2.7.1</span><br><span class="line"><span class="built_in">export</span> HIVE_CONF_DIR=/home/test/apache-hive-1.2.1-bin/conf</span><br><span class="line"><span class="built_in">export</span> HIVE_AUX_JARS_PATH=/home/test/apache-hive-1.2.1-bin/lib</span><br></pre></td></tr></table></figure>

<p>　　設定檔都存好後，接著啟動metastore：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive --service metastore &amp; <span class="comment">#後面一定要加個&amp;符號，才可以再按下enter跳過啟動的訊息，之前一直誤會怎啟動卡住了。。。</span></span><br></pre></td></tr></table></figure>

<p>　　用jps -m查看，可以發現多了一個是metastore RunJar的process，代表metastore啟動成功。</p>
<h4 id="3-用Hive新增table"><a href="#3-用Hive新增table" class="headerlink" title="3.用Hive新增table"></a>3.用Hive新增table</h4><p>　　metastore啟動後，下指令hive，將會進入hive &gt; 的commnad模式。<br>　　首先新增一筆table叫做student：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; create table student(<span class="built_in">id</span> int, name string) row format delimited fields terminated by <span class="string">&#x27;t&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>　　這一行建立table的意思是這table student是由int型態的id與string型態的name兩種屬性組成，而每一列資料（row format delimited）是預設跳行隔開，每一列資料彼此之間是用tab（terminated by ‘t’）隔開。<br>　　建好後用show tables可以查看table是否新增成功，如下圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/show2Btables253B-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/show2Btables253B.png" alt="Hive 1.2.1 describe"></a></p>
<p>　　在使用describe student看該table的屬性，如下圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/decs2Btable-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/decs2Btable.png"></a></p>
<p>　　在&#x2F;home&#x2F;test目錄下，建個要匯入student的資料：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/StudentFile.txt</span><br><span class="line"><span class="comment">#資料內容如下，記得id與name是用tab隔開</span></span><br><span class="line">1 John</span><br><span class="line">2 Marry</span><br><span class="line">3 Frank</span><br><span class="line">4 Jessie</span><br></pre></td></tr></table></figure>

<p>　　再次進入hive command模式，將資料匯入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; load data <span class="built_in">local</span> inpath<span class="string">&#x27;/home/test/StudentFile.txt&#x27;</span> overwrite into table student;</span><br></pre></td></tr></table></figure>

<p>　　用HiveQL語法查詢是否有資料匯入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">select</span> <span class="built_in">id</span> from student;</span><br><span class="line">hive&gt; <span class="keyword">select</span> name from student;</span><br><span class="line">hive&gt; <span class="keyword">select</span> <span class="built_in">id</span> from student <span class="built_in">where</span> name=<span class="string">&#x27;Frank&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>　　這三筆查詢的結果如下圖，語法跟SQL非常像～</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/select2Bid2Band2Bname-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/select2Bid2Band2Bname.png" alt="Hive 1.2.1 select"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/SELECT2BFRANK-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/SELECT2BFRANK.png" alt="Hive 1.2.1 select"></a></p>
<p>　　接著下count的語法，會發現有啟動MapReduce的資訊顯示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">select</span> count(<span class="built_in">id</span>) from student <span class="built_in">where</span> name like <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>　　如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/count2Bmap1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/count2Bmap1.png" alt="Hive 1.2.1 select like"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/count2Bmap2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/count2Bmap2.png" alt="Hive 1.2.1 select result"></a></p>
<p>　　查詢有name有存在小寫a的資料有幾筆，其輸出的2筆為Frank和Marry（當時做紀錄打錯名字。。。懶的更正XD）。<br>　　當Hive有新增table後，可以用hive帳號登入MySQL，查詢TBLS這張表的內容，可看見有Hive新增的table名稱、建立時間等資訊，代表MySQL作為metastore的運作，如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/mysql2Bselect2Bfrom2Btbls-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/mysql2Bselect2Bfrom2Btbls.png" alt="Hive 1.2.1 select *"></a></p>
<h4 id="4-用Java連Hive-JDBC"><a href="#4-用Java連Hive-JDBC" class="headerlink" title="4.用Java連Hive JDBC"></a>4.用Java連Hive JDBC</h4><p>　　之前已經複製mysql-connector-java-5.1.28.jar的library了，接著啟動hiveserver2，使Java程式能透過JDBC連到Hive：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive --service hiveserver2 &amp; <span class="comment">#一樣要用&amp;，啟動後一樣是建立新的RunJar的process</span></span><br></pre></td></tr></table></figure>

<p>　　接著我們在Windows的Eclipse建立一個新的Java class來測試JDBC，其程式碼如下：</p>
<p>　　基本上程式碼跟自行用hive&gt; 下HiveQL一樣，只差在用DriverManager連JDBC。而程式執行的結果如下圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/ECLIPSE2BRUN2BHIVE-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/ECLIPSE2BRUN2BHIVE.png"></a></p>
<p>　　也可進入hive command驗證是否有新的table匯入。</p>
<h4 id="5-結論"><a href="#5-結論" class="headerlink" title="5.結論"></a>5.結論</h4><p>　　安裝Hive花我超多時間在survey資料，新版的安裝方式跟舊版天差地遠，官方文件又少得可憐，蒐集了各方好手的文獻，好不容易才run起這個傢伙。。。<br>　　另外透過上述的HiveQL count，發現用MapReduce在這少量資料是非常浪費時間，需要有用到大筆的資料才能顯現Hive的優勢～</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="http://1oscar.github.io/blog/2015/07/19/Dive%20into%20hive.html">段家公子blog：dive into hive</a></li>
<li><a href="http://blog.csdn.net/x_i_y_u_e/article/details/46845609">x_i_y_u_e blog：Hadoop Hive安装，配置mysql元数据库</a> </li>
<li><a href="http://lizhenliang.blog.51cto.com/7876557/1665891">zhenliang8 blog：基于Hadoop数据仓库Hive1.2部署及使用</a> </li>
<li><a href="http://yanliu.org/2015/08/13/Hadoop%E9%9B%86%E7%BE%A4%E4%B9%8BHive%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">Yan’s blog：Hadoop集群之Hive安装配置</a> </li>
<li> <a href="http://f.dataguru.cn/thread-459379-1-1.html">jf_32635344論壇文章： [原创] Hive启动时，遇到java.net.URISyntaxException: Relative path in absolute URI</a> </li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/HiveClient">Hive官方JDBC Client程式碼</a></li>
<li><a href="http://stackoverflow.com/questions/18128966/where-is-the-mysql-jdbc-jar-file-in-ubuntu">Stackoverflow：Where is the MySQL JDBC jar file in Ubuntu?</a></li>
</ol>
<p> </p>
<h4 id="新增-修改日記"><a href="#新增-修改日記" class="headerlink" title="新增&#x2F;修改日記"></a>新增&#x2F;修改日記</h4><p>2015&#x2F;10&#x2F;6：</p>
<ol>
<li>新增MySQL my.cnf檔案內的參數設定，少了這一步驟會無法啟動Hive。</li>
</ol>
<p>2015&#x2F;10&#x2F;9：</p>
<ol>
<li>新增用MySQL查看Hive註冊過的table資訊。</li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Home</title>
    <url>/2022/01/09/home/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1 Two Sum</title>
    <url>/2020/10/08/leetcode-1-two-sum/</url>
    <content><![CDATA[<p>LeetCode 1 Two Sum 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1 - Two Sum</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>LeetCode經典題目，輸入1個陣列nums和一個目標和target，求找到nums的2個元素相加會等於target的索引值。題目確保一定只有一個解，且回傳索引的順序沒差異。</p>
<p>比如範例輸入的nums &#x3D; [2,7,11,15], target &#x3D; 9，相加變成9的只有2和7，所以回傳這2個元素的索引值[0, 1]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>如果考慮暴力法，需要用雙層迴圈找所有的組合，需要花O(n2)。 更好的設計方法，是用一個HashMap記錄缺少的那一個值(target - nums[i])和對應的索引。 稍微改變範例輸入，nums &#x3D; [2,11, 7,15]：</p>
<ol>
<li>nums[0]是2，在HashMap[2]不存在，於是建立HashMap[9 - 2 &#x3D; 7] &#x3D; 0</li>
<li>nums[1]是11，在HashMap[11]不存在，於是建立HashMap[9 - 11 &#x3D; -2] &#x3D; 1</li>
<li>nums[2]是7，在HashMap[7]存在，於是回傳[2, HashMap[7]] &#x3D; [2, 0]</li>
</ol>
<p>由於是用沒有排序的HashMap，寫值和讀值都是O(1)，整體時間需要O(n)</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/1.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/1.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/1.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/1.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1047 Remove All Adjacent Duplicates In String</title>
    <url>/2020/09/29/leetcode-1047-remove-all-adjacent-duplicates-in-string/</url>
    <content><![CDATA[<p>LeetCode 1047 Remove All Adjacent Duplicates In String 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1047 - Remove All Adjacent Duplicates In String</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/">https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個字串，只要有相鄰2個字元是相同的，則把這2個字元移除。移除後的字串要再確認是否有相鄰2個字元相同，繼續重複移除的動作，直到沒再移除為止。</p>
<p>比如範例輸入的abbaca，一開始移除bb，變成aaca，再移除aa，最後剩下ca為答案</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用一個堆疊Stack，從字串的左邊開始掃描，Stack的Top會紀錄目前最新的字元，如果下1個字元和Top一樣，則Top要移除掉，否則都一直加進Stack。 最後Stack反轉的字串則為答案。 比如範例輸入abbaca</p>
<ol>
<li>第1個字元是a, Stack空的, 加入Stack變成[a]</li>
<li>第2個字元是b, Stack top(a)和b不同, 加入Stack變成[a,b]</li>
<li>第3個字元是b, Stack top(b)和b相同, Stack pop後變成[a]</li>
<li>第4個字元是a, Stack top(a)和a相同, Stack pop變成[]</li>
<li>第5個字元是c, Stack空的, 加入Stack變成[c]</li>
<li>第6個字元是a, Stack top(c)和a不同, 加入Stack變成[c,a]</li>
</ol>
<p>從Stack的Top往下Pop的順序是a &#x3D;&gt; c, 反轉成 c &#x3D;&gt; a 則為答案。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1000-1099/1047.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1000-1099/1047.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1000-1099/1047.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1000-1099/1047.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1094 Car Pooling</title>
    <url>/2020/09/21/leetcode-1094-car-pooling/</url>
    <content><![CDATA[<p>LeetCode 1094 Car Pooling 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1094 - Car Pooling</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/car-pooling/">https://leetcode.com/problems/car-pooling/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入N個站點，每個站點有上車的人數、上站點的位置和下站點的位置，而一輛車子有最大的載乘量capacity，從起點位置0開過去接送這些乘客，是否能全部載完呢？</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用貪婪法，將上站與下站位置從小到大排序，而上站人數是正數、下佔人數是負數，capacity由小的位置開始相減，如果相減過程變負數，則代表載不完。</p>
<p>排序的規則還要注意如果遇到同樣上站或下站位置，優先讓下站的排前面，這樣capacity才有空間。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1000-1099/1094.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1000-1099/1094.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1000-1099/1094.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1000-1099/1094.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 113 Path Sum II</title>
    <url>/2020/09/19/leetcode-113-path-sum-ii/</url>
    <content><![CDATA[<p>LeetCode 113 Path Sum II 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>113 - Path Sum II</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/path-sum-ii/">https://leetcode.com/problems/path-sum-ii/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個二元樹，再給一個目標和sum，求是否有一條從根節點到葉子節點的路徑，這路徑的值的總和，與sum相等，若相等則記錄此路徑。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用從根節點往子節點深度搜尋，每次累加當前的值總和與路徑，當遇到葉子節點則判斷總和有無與sum相等。須注意edge case根節點是空值的狀況。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/113.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/113.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/113.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/113.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 122 Best Time to Buy and Sell Stock II</title>
    <url>/2020/10/02/leetcode-122-best-time-to-buy-and-sell-stock-ii/</url>
    <content><![CDATA[<p>LeetCode 122 Best Time to Buy and Sell Stock II 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>122 - Best Time to Buy and Sell Stock II</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個整數的陣列prices，代表每天的股票價位，求獲利最高的答案。</p>
<p>比如範例輸入的 [7,1,5,3,6,4]，最佳的獲利方式是第2天買1元、第3天賣出5元，賺4元，再加上第4天買3元、第5天賣6元，賺3元。總計賺7元。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>先思考如果用暴力法，變成要從第i天往後算i + 1 ~ N最大的解，再求其他第j天往後算j + 1 ~ N的最佳解，時間複雜度需要O(n^n)。 轉換更有效率的解，只需要求每天第i天的價位 &gt; 第i-1天的價位，就把這價位差做累加，最終的累加值為答案。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/122.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/122.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/122.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/122.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 125 Valid Palindrome</title>
    <url>/2020/10/14/leetcode-125-valid-palindrome/</url>
    <content><![CDATA[<p>LeetCode 125 Valid Palindrome 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>125 - Valid Palindrome</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/valid-palindrome/">https://leetcode.com/problems/valid-palindrome/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1個字串s，求s是否為s的palindrome(回文)，這題的Palindrome的定義是字串的英文字母和數字是左右對稱，且英文大小寫不分，如果是其他字元則略過不比對。</p>
<p>比如範例輸入s &#x3D; “A man, a plan, a canal: Panama”，它扣掉空白、逗號、分號，全轉成小寫的話，會是”amanaplanacanalpanama”，會是左右對稱的回文。</p>
<p>特殊案例是 s &#x3D; “,!”，全都只有標點符號，這也是回文。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立2個索引值i和j，分別從字串s的左邊和右邊掃描，找到第1個英文字母或數字則停下，確認是否符合回文定義的比對規則，如果不相同，則並不是回文。當i &gt;&#x3D; j，代表已經都比對完，則屬於回文。 而判斷是否相同字母或數字，可以用字元的ASCII範圍檢查，並回傳自定義的索引值，比如’A’和’a’回傳0、’0’回傳26(與前面英文字母不同)。</p>
<p>難度為Easy  </p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/125.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/125.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/125.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/125.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 136 Single Number</title>
    <url>/2020/09/26/leetcode-136-single-number/</url>
    <content><![CDATA[<p>LeetCode 136 Single Number 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>136 - Single Number</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/single-number/">https://leetcode.com/problems/single-number/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個不為空的陣列，每個整數的出現次數只有1個會是1次，其他都是出現2次，求那個只出現一次的整數值。</p>
<p>比如範例輸入[2,2,1]，只出現1次的是1，所以輸出1。 題目要求要線性時間、並不能用額外的記憶體空間。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>需用到bit運算，有提示其他數字都是出現2次，代表這些數字對自己做XOR一定會是0。所以XOR最終的結果就是那個只出現1次的數字。 比如[3,2,1,2,3]，初始化ans &#x3D; 0</p>
<ol>
<li>ans &#x3D; ans(00) ^ 3(11) &#x3D; 3(11)</li>
<li>ans &#x3D; ans(11) ^ 2(10) &#x3D; 2(01)</li>
<li>ans &#x3D; ans(01) ^ 1(01) &#x3D; 0(00)</li>
<li>ans &#x3D; ans(00) ^ 2(10) &#x3D; 2(10)</li>
<li>ans &#x3D; ans(10) ^ 3(11) &#x3D; 1(01)</li>
</ol>
<p>所以會是1</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/136.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/136.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/136.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/136.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 138 Copy List with Random Pointer</title>
    <url>/2019/08/31/leetcode-138-copy-list-with-random-pointer/</url>
    <content><![CDATA[<p>LeetCode 138 Copy List with Random Pointer 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>138 - Copy List with Random Pointer</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">https://leetcode.com/problems/copy-list-with-random-pointer/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1串Linked List，此Linked List除了有Next指標指向下個Node之外，還有個Random指標，沒有順序的指向任何Node。要回傳一個Deep Copy的Linked List，而Deep Copy的意思為完全不同記憶體位置的複製。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/1470150906153-2yxeznm.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/1470150906153-2yxeznm.png" alt="LeetCode 138 Copy List with Random Pointer 說明"></a></p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>同輸入的資料內容、Next、Random的全新Linked List</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>建立一個Map，該Map的Key為Node指標，指向舊的Linked List的Node；Value也是Node指標，指向Deep Copy的Node。</li>
<li>先第1次歷遍舊的Linked List，並用Map建立舊Node與新Node的Mapping。</li>
<li>做第2次歷遍，從Head開始，將每個舊的Node的Next與Random關係，在新的Node之間也建立關係。</li>
<li>最後回傳Map[Head]，代表回傳新的Linked List。</li>
</ol>
<p>　　以下用一個Linked List說明，一開始為1-&gt;2-&gt;3的LinkedList ，但Random為1-&gt;3-&gt;2-&gt;1，如圖1. 黑色箭頭為Next、紅色箭頭為Random。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/1.png" alt="LeetCode 138 Copy List with Random Pointer 圖1"></a></p>
<p>圖1</p>
<p>　　做第1次歷遍，將所有舊的Node做成Map的Key，新的Node做成Map的Value，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/2.png" alt="LeetCode 138 Copy List with Random Pointer 圖2"></a></p>
<p>圖2</p>
<p>　 做第2次歷遍，第1個節點為1，將舊的Next與Random關係，轉成新的Next(指向2)與Random(指向3)，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/3.png" alt="LeetCode 138 Copy List with Random Pointer 圖3"></a></p>
<p>圖3</p>
<p>第2個節點為2，將舊的Next與Random關係，轉成新的Next(指向3)與Random(指向1)，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/4.png" alt="LeetCode 138 Copy List with Random Pointer 圖4"></a></p>
<p>圖4</p>
<p>第3個節點為3，將舊的Next與Random關係，轉成新的Next(指向null)與Random(指向2)，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/5.png" alt="圖5"></a></p>
<p>圖5</p>
<p>將Map[Head]回傳，即為新的Linked List，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/6.png" alt="圖6"></a></p>
<p>圖6</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/138.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/138.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/138.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/138.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 141 Linked List Cycle</title>
    <url>/2019/08/27/leetcode-141-linked-list-cycle/</url>
    <content><![CDATA[<p>LeetCode 141 Linked List Cycle 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>141 - Linked List Cycle</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/linked-list-cycle/">https://leetcode.com/problems/linked-list-cycle/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1串Linked List，檢查此Linked List是否有環 (Cycle)。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist-1.png" alt="LeetCode 141 Linked List Cycle 圖1"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist_test3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist_test3-1.png" alt="LeetCode 141 Linked List Cycle 圖2"></a></p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>true<br>false</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解題有兩種解法。</p>
<ul>
<li>使用Set：歷遍 Linked List ，將每個Node的記憶體位置存到Set，當有Node出現在Set，代表該Linked List有環。否則執行到結尾點null，代表沒有環。</li>
<li>使用Floyd’s Algorithm：</li>
</ul>
<ol>
<li>起點設2個指標，分別為Slow與Fast。</li>
<li>每次的循環，Slow往前1步、Fast往前2步</li>
<li>當Fast走到結尾點null，代表此Linked List無環；否則當Slow和Fast的位置相同時，代表此Linked List有環。</li>
<li>可參考這篇<a href="http://www2.csie.ntnu.edu.tw/~u91029/Function.html#4">演算法筆記-Cycle Finding: Floyd’s Algorithm （ Tortoise and Hare Algorithm ）</a></li>
</ol>
<p>難度為Easy</p>
<h3 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h3><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/141.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/141.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/141.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/141.cs</a></p>
<h3 id="LeetCode-141-Linked-List-Cycle"><a href="#LeetCode-141-Linked-List-Cycle" class="headerlink" title="LeetCode 141 Linked List Cycle"></a>LeetCode 141 Linked List Cycle</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 142 Linked List Cycle II</title>
    <url>/2019/08/28/leetcode-142-linked-list-cycle-ii/</url>
    <content><![CDATA[<p>LeetCode 142 Linked List Cycle II 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>142 - Linked List Cycle II</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/">https://leetcode.com/problems/linked-list-cycle-ii/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1串Linked List，檢查此Linked List是否有環 (Cycle)，若有環，回傳進入環的起點，否則回傳null。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist.png" alt="LeetCode 142 Linked List Cycle II 說明"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist_test3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/circularlinkedlist_test3.png" alt="LeetCode 142 Linked List Cycle II 說明"></a></p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>tail connects to node index 1  </p>
<p>no cycle</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解法延續<a href="https://geekcodeparadise.com/2019/08/leetcode-141-linked-list-cycle/">[解題] LeetCode - 141 Linked List Cycle</a>，有兩種解法。</p>
<ul>
<li>使用Set：歷遍 Linked List ，將每個Node的記憶體位置存到Set，當有Node出現在Set，代表該那個Node是進入環的起點。否則執行到結尾點null，代表沒有環。</li>
<li>使用Floyd’s Algorithm：</li>
</ul>
<ol>
<li>起點設2個指標，分別為Slow與Fast。</li>
<li>每次的循環，Slow往前1步、Fast往前2步</li>
<li>當Fast走到結尾點null，代表此Linked List無環；否則當Slow和Fast的位置相同時，代表此Linked List有環。</li>
<li>把相同位置的Node用另一個ListNode變數meetNode記住，使Slow回到起點(Head)</li>
<li>Slow和meetNode以同樣速度往前移動，當他們走到相同位置時，則那位置是環的進入點。</li>
<li>有一篇文章證明這方法：<a href="https://cs.stackexchange.com/questions/10360/floyds-cycle-detection-algorithm-determining-the-starting-point-of-cycle">Floyd’s Cycle detection algorithm Determining the starting point of cycle</a></li>
</ol>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/142.cpp">https://github.com/u8989332/ProblemSolving/blob/maste</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/142.cpp">r</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/142.cpp">&#x2F;LeetCode&#x2F;C%2B%2B&#x2F;100-199&#x2F;142.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/142.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/142.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 155 Min Stack</title>
    <url>/2019/09/07/leetcode-155-min-stack/</url>
    <content><![CDATA[<p>LeetCode 155 Min Stack 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>155 - Min Stack</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/min-stack/">https://leetcode.com/problems/min-stack/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>用Stack新增getMin的功能：回傳目前Stack裡的最小值。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>需要使用2個Stack。第1個Stack接收Push的值，而第2個Stack處理目前Stack最小值。<br>當有Push時，第1個Stack直接存，而第2個Stack若是空的或者比目前Top還要小或相等，則存起來。<br>　　當有Pop時，會先確認第2個Stack的Top是否跟第1個Top的值相等，若相等，代表當前的min也要被Pop；否則只需Pop第1個Stack。<br>getMin的實作為回傳第2個Stack的Top。</p>
<p>　　以下用圖片解釋方法，假設有2個空的Stack，分別為myStack和minStack如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-10.png" alt="LeetCode 155 Min Stack 圖1"></a></p>
<p>圖1</p>
<p>Push 1值，myStack新增1，而minStack目前為空的，也存進去，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-7.png" alt="LeetCode 155 Min Stack 圖2"></a></p>
<p>圖2</p>
<p>Push 2值，myStack新增2，而minStack的Top比2還小，所以不存進去，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-7.png" alt="LeetCode 155 Min Stack 圖3"></a></p>
<p>圖3</p>
<p>Push -1值，myStack新增-1，而minStack的Top比-1還大，所以存進去，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-7.png" alt="LeetCode 155 Min Stack 圖4"></a></p>
<p>圖4</p>
<p>再Push -1值，myStack新增-1，而minStack的Top與-1相等，所以存進去，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-7.png" alt="LeetCode 155 Min Stack 圖5"></a></p>
<p>圖5</p>
<p>取GetMin值，minStack的Top為-1，回傳此值，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-7.png" alt="LeetCode 155 Min Stack 圖6"></a></p>
<p>圖6</p>
<p>取Top值，myStack的Top為-1，回傳此值，如圖7.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-6.png" alt="圖7"></a></p>
<p>圖7</p>
<p>Push 3值，myStack新增3，而minStack的Top比3還小，所以不存進去，如圖8.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-3.png" alt="圖8"></a></p>
<p>圖8</p>
<p>Pop，myStack目前Top的值為3，而minStack的Top為-1，兩者不相等，所以只對myStack Pop，如圖9.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/9.png" alt="圖9"></a></p>
<p>圖9</p>
<p>Pop，myStack目前Top的值為-1，而minStack的Top為-1，兩者相等，所以myStack與minStack都Pop，如圖10.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/10.png" alt="圖10"></a></p>
<p>圖10</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/155.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/155.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/155.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/155.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 160 Intersection of Two Linked Lists</title>
    <url>/2019/08/27/leetcode-160-intersection-of-two-linked-lists/</url>
    <content><![CDATA[<p>LeetCode 160 Intersection of Two Linked Lists 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>160 - Intersection of Two Linked Lists</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">https://leetcode.com/problems/intersection-of-two-linked-lists/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2串Linked List，求出他們的交會點。若有交會點則回傳該交會的ListNode，否則回傳null。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/160_example_1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/160_example_1.png" alt="LeetCode 160 Intersection of Two Linked Lists 說明"></a></p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Reference of the node with value &#x3D; 8</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解題有兩種解法。</p>
<ul>
<li>使用Set：先歷遍 Linked List A，將每個Node的記憶體位置存到Set。換歷遍Linked List B，並檢查B的Node的記憶體位置有無在Set，若有在Set，代表這Node為交會點；否則沒有交會點。此方法需要額外Set的記憶體，但執行較快。</li>
<li>使用起點對齊的方式：</li>
</ul>
<ol>
<li>由於2個Linked List的長度可能不同，事先可以計算長度。假設Linked List A與Linked List B的長度分別為lenA與lenB。</li>
<li>lenA &gt; lenB時，A先往前lenA - lenB步；否則B先往前lenB - lenA步</li>
<li>對齊後，代表這2個Linked List以同樣速度往前移動，代表能一起同時到結尾。每次移動檢查記憶體位置是否相等，若有相等，則那位置是交會點。否則一起走到結尾null，代表沒交會點。</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/160.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/160.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/160.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/160.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 189 Rotate Array</title>
    <url>/2020/10/03/leetcode-189-rotate-array/</url>
    <content><![CDATA[<p>LeetCode - 189 Rotate Array 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>189 - Rotate Array</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/rotate-array/">https://leetcode.com/problems/rotate-array/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個陣列nums和位移量k，求nums元素往右k旋轉後的結果。題目要求只能用O(1)的空間複雜度。</p>
<p>比如範例輸入的nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3，每個元素都往右移3個位置變成[5,6,7,1,2,3,4]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>如果用暴力法，變成要執行O(n * k)的執行時間。 更有效率的解，只需要O(n)的執行時間，一開始從index &#x3D; 0，不斷往後k位移做換值的動作，直到執行次數等於nums的長度。特別的是陣列長度和k都是偶數時，不斷k位移又會回到同樣的index，因此需判斷k又回到原點時，需換下一個index。</p>
<p>再加速的方法是判斷k是否為0或者k是n的倍數，可以不用運算。再者k超過的n的長度時，可以把k &#x3D; k % n。</p>
<p>難度為Easy  </p>
<h4 id="程式碼GITHUB位置-C-與-C-："><a href="#程式碼GITHUB位置-C-與-C-：" class="headerlink" title="程式碼GITHUB位置(C++ 與 C#)："></a>程式碼GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/189.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/100-199/189.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/189.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/100-199/189.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 200 Number of Islands</title>
    <url>/2020/09/24/leetcode-200-number-of-islands/</url>
    <content><![CDATA[<p>LeetCode 200 Number of Islands 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>200 - Number of Islands</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入2維字元陣列，也代表一張地圖，只有1和0組成，1代表土地、0代表水域。只要地圖上下左右是1相鄰，能組成一座島嶼。求這張地圖有多少座島嶼。</p>
<p>比如範例輸入 grid &#x3D; [ [“1”,”1”,”0”,”0”,”0”], [“1”,”1”,”0”,”0”,”0”], [“0”,”0”,”1”,”0”,”0”], [“0”,”0”,”0”,”1”,”1”] ] 有左上角4個1、中間1個1、右下角2個1，共3座島嶼。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>經典的DFS問題，開一個Visit紀錄已經拜訪過的區域，從左上開始搜尋，遇到尚未拜訪的1字元就區域搜尋，累加每次搜尋的次數為答案。</p>
<p>難度為Medium (個人覺得Easy)</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/200.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/200.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/200.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/200.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 206 Reverse Linked List</title>
    <url>/2019/08/24/leetcode-206-reverse-linked-list/</url>
    <content><![CDATA[<p>LeetCode 206 Reverse Linked List 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>206 - Reverse Linked List</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/reverse-linked-list">https://leetcode.com/problems/reverse-linked-list</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一串Linked List，將此Linked List反轉，回傳反轉後的Head Node。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解法有許多種，若以最省空間的作法，只需另外宣告2個Node。 以下用圖片範例解釋方法，假設原始的Linked List如圖1，有用一個Head指向起點。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-5.png" alt="LeetCode 206 Reverse Linked List 圖1"></a></p>
<p>圖1</p>
<p>宣告1個Node為newHead，指向null，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-5.png" alt="LeetCode 206 Reverse Linked List 圖2"></a></p>
<p>圖2</p>
<p>宣告1個Node為Next，指向Head的Next，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-5.png" alt="LeetCode 206 Reverse Linked List 圖3"></a></p>
<p>圖3</p>
<p>將Head的Next指向newHead，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-5.png" alt="圖4"></a></p>
<p>圖4</p>
<p>newHead指向Head，Head再指向Next，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-5.png" alt="圖5"></a></p>
<p>圖5</p>
<p>重複圖3 ~ 圖5的步驟，直到Head為null，newHead所指的位置將會是反轉後的Head。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/206.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/206.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/206.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/206.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 21 Merge Two Sorted Lists</title>
    <url>/2019/09/01/leetcode-21-merge-two-sorted-lists/</url>
    <content><![CDATA[<p>LeetCode 21 Merge Two Sorted Lists 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>21 - Merge Two Sorted Lists</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">https://leetcode.com/problems/merge-two-sorted-lists/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2串Linked List，L1與L2，並將它們合併。合併的規則為每個節點的值由小排到大。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1-&gt;2-&gt;4 , 1-&gt;3-&gt;4</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>建立一個值為0的空間點tempHead和一個暫存的Node指標teap。tempHead是串完排序後的Linked List Head。</li>
<li>L1與L2各所指的值比對大小，再由temp去指定當前Node的Next到比較小值的Node。指定後L1&#x2F;L2 與 temp各往下個Node移動。</li>
<li>最後檢查是否有尚未串接完的List並接上它。</li>
<li>最後回傳tempHead的Next即為排序後的Linked List Head。</li>
</ol>
<p>　　以下用2個Linked List說明，分別為1-&gt;2-&gt;4-&gt;7與1-&gt;3-&gt;5 ，且宣告tempHead與temp，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-17.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-16.png" alt="LeetCode 21 Merge Two Sorted Lists 圖1"></a></p>
<p>圖1</p>
<p>　　目前L1與L2的值都為1，temp選L2做為串接對象，將temp的Next指向L2，L2再往L2的Next移動，temp再往temp的Next移動，如圖2至圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-13.png" alt="LeetCode 21 Merge Two Sorted Lists 圖2"></a></p>
<p>圖2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-13.png" alt="LeetCode 21 Merge Two Sorted Lists 圖3"></a></p>
<p>圖3</p>
<p>　 目前L1的值為1、L2的值為3，temp選L1做為串接對象，將temp的Next指向L1，L1再往L1的Next移動，temp再往temp的Next移動，如圖4至圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-13.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-12.png" alt="LeetCode 21 Merge Two Sorted Lists 圖4"></a></p>
<p>圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-13.png" alt="LeetCode 21 Merge Two Sorted Lists 圖5"></a></p>
<p>圖5</p>
<p>目前L1的值為2、L2的值為3，temp選L1做為串接對象，將temp的Next指向L1，L1再往L1的Next移動，temp再往temp的Next移動，如圖6至圖7.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-13.png" alt="LeetCode 21 Merge Two Sorted Lists 圖6"></a></p>
<p>圖6</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-10.png" alt="LeetCode 21 Merge Two Sorted Lists 圖7"></a></p>
<p>圖7</p>
<p>　　依照前述的比對邏輯，到最後會變成L2先指向NULL，如圖8。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-5.png" alt="圖8"></a></p>
<p>圖8</p>
<p>剩下L1還沒指向NULL，由temp的Next指向L1，如圖9。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/9-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/9-1.png" alt="圖9"></a></p>
<p>圖9</p>
<p>回傳tempHead的Next，即為新的Linked List Head，如圖10。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/10-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/10-1.png" alt="圖10"></a></p>
<p>圖10</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/21.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/21.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/21.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/21.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 215 Kth Largest Element in an Array</title>
    <url>/2019/09/22/leetcode-215-kth-largest-element-in-an-array/</url>
    <content><![CDATA[<p>LeetCode 215 Kth Largest Element in an Array 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>215 - Kth Largest Element in an Array</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">https://leetcode.com/problems/kth-largest-element-in-an-array/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個整數陣列nums，求陣列中第k大的數字。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>使用時間複雜度O(nlogn)的排序方法。</li>
<li>使用Heap，維護只有k個節點的Heap即可求出第k大的解，平均時間複雜度為O(nlogk)。</li>
<li>使用Quick Sort的原理，找第k大的數字，本篇採用使方案。依Quick Sort原理，會將陣列做部分排序，這裡從大排到小。隨機選一個點為pivot，從左邊與從右邊找出比pivot還小 &#x2F; 還大 互相交換，會分成2個區塊，再判斷k位置繼續往左邊或右邊尋找。時間複雜度為O(N)。以下用圖例解釋每個步驟。</li>
</ol>
<p>　　假設有1個輸入陣列nums為[4, 1 , 6 , 5 , 9 , 2]，left與right為最左&#x2F;最右的起始位置，分別是0與5，而設置i 與 j 也分別為left 與 right。pivot的選取採用nums[left]，也就是4，而K為第2大的數字，轉成索引後變成k &#x3D; 2 - 1 &#x3D; 1。如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-4.png" alt="LeetCode 215 Kth Largest Element in an Array 圖1"></a></p>
<p>圖1</p>
<p>　　從左邊開始，找nums[i] &lt;&#x3D; pivot的位置；從右邊開始，找nums[j] &gt;&#x3D; pivot的位置，i與j分別停在0 與 4 的位置，並且交換，再往下個位置，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-4.png" alt="LeetCode 215 Kth Largest Element in an Array 圖2"></a></p>
<p>圖2</p>
<p>再次找nums[i] &lt;&#x3D; pivot的位置與nums[j] &gt;&#x3D; pivot的位置，i 與 j停在 1 與 3，並且交換，再往下個位置，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-4.png" alt="LeetCode 215 Kth Largest Element in an Array 圖3"></a></p>
<p>圖3</p>
<p>再次找nums[i] &lt;&#x3D; pivot的位置與nums[j] &gt;&#x3D; pivot的位置，i 與 j停在 3 與 2，i與j的位置已超出邊界，而k &lt;&#x3D; j ，代表k在左邊的區塊，所以將進行第2輪的排序，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-4.png" alt="LeetCode 215 Kth Largest Element in an Array 圖4"></a></p>
<p>圖4</p>
<p>再次找nums[i] &lt;&#x3D; pivot的位置與nums[j] &gt;&#x3D; pivot的位置，i 與 j都停在1的位置，並且交換，並進到下個位置，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-3.png" alt="LeetCode 215 Kth Largest Element in an Array 圖5"></a></p>
<p>圖5</p>
<p>此時j已經超出left，所以k不會在左邊的區塊；而k &gt;&#x3D; i，代表k將在i 與right之間，進行第3輪的排序，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-4.png" alt="圖6"></a></p>
<p>圖6</p>
<p>pivot目前為nums[left] &#x3D; 5，再次找nums[i] &lt;&#x3D; pivot的位置與nums[j] &gt;&#x3D; pivot的位置，i 與 j停在1與2的位置，並且交換，再往下個位置，如圖7.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-2.png" alt="圖7"></a></p>
<p>圖7</p>
<p>由於j &lt;&#x3D; left 且 i &gt;&#x3D; right，已經沒有再排序的需要，回傳nums[k] &#x3D; nums[1] &#x3D; 6為解.</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/215.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/215.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/215.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/215.cs</a></p>
<p>LeetCode 215 Kth Largest Element in an Array</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 217 Contains Duplicate</title>
    <url>/2020/10/04/leetcode-217-contains-duplicate/</url>
    <content><![CDATA[<p>LeetCode 217 Contains Duplicate 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>217 - Contains Duplicate</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/contains-duplicate/">https://leetcode.com/problems/contains-duplicate/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個陣列nums，求nums元素是否有重複。</p>
<p>比如範例輸入的nums &#x3D; [1,2,3,1]，元素1重複，所以要回傳true。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用HashSet，每次檢查是否該元素已在HashSet裡，有的話就回傳true，否則把它加進HashSet。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/217.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/217.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/217.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/217.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 224 Basic Calculator</title>
    <url>/2019/09/17/leetcode-224-basic-calculator/</url>
    <content><![CDATA[<p>LeetCode 224 Basic Calculator 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>224 - Basic Calculator</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/basic-calculator/">https://leetcode.com/problems/basic-calculator/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入只有 ( ) + - 空格 與 非負整數的數學運算式，求這運算式的結果。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>完整的方法，需要使用Stack將中序(Infix)運算式轉成後序 (Postfix)，再解出運算結果。</li>
<li>網路看到有一種更快的解法，因為只有+ 跟 -，沒有其他優先序的符號，所以遇到 + 跟 - 都直接加起來，如果是有圓括 ( )的，將圓括裡面的加完再補到前面。</li>
<li>採用網路上另一種解法，用狀態機(Finite State Machine)，分析每一步驟要做的邏輯，如圖1. 共3種狀態，分別為Start、Number與Operatior。一開始在Start的狀態，讀取第1個字元後，將知道要往哪個狀態。Number狀態比較簡單，會一直讀數字，直到有非數字要往Operator狀態。完整的數字都存進Stack，如果前面有 + 或 - 的運算子，從Stack取出運算，再Push運算結果。Operator狀態需要分 ( ) + - 與 數字，遇到數字或( 回到Number狀態；遇到 ) 直接做+ -運算；若是+ 或 -，下一筆若是數字的話可以做+ - 運算 。詳細的方法可以參考程式碼，個人比較喜歡這種用狀態機的分析，比較清楚每一步驟的可能性。</li>
</ol>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-6.png" alt="LeetCode 224 Basic Calculator 圖解"></a></p>
<p>圖1</p>
<p>難度為Hard</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/224.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/224.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/224.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/224.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>程式解題</category>
        <category>Level-Hard</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 225 Implement Stack using Queues</title>
    <url>/2019/09/03/leetcode-225-implement-stack-using-queues/</url>
    <content><![CDATA[<p>LeetCode 225 Implement Stack using Queues 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>225 - Implement Stack using Queues</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/implement-stack-using-queues/">https://leetcode.com/problems/implement-stack-using-queues/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>用Queue實作Stack的功能, 包含top、pop、push與empty。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>如何將Stack的FILO特性用Queue實作，關鍵在於push的功能。push一個X值時，先放在Queue的最後位置，將前面N-1個值都pop再依序放到後面。這樣能使X移到Queue的最前面，也是Stack的Top。</p>
<p>　　以下用圖片解釋方法，假設有個空的Queue，如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-15.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-14.png" alt="LeetCode 225 Implement Stack using Queues 圖1"></a></p>
<p>圖1</p>
<p>Push 1值到Queue，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-11.png" alt="LeetCode 225 Implement Stack using Queues 圖2"></a></p>
<p>圖2</p>
<p>Push 2值到Queue, 再將前面的值 1 放到後面, 如圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-11.png" alt="LeetCode 225 Implement Stack using Queues 圖3"></a></p>
<p>圖3</p>
<p>Push 3值到Queue，再將前面的2與1依序放到後面，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-10.png" alt="LeetCode 225 Implement Stack using Queues 圖4"></a></p>
<p>圖4</p>
<p>Top功能為Queue的Front，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-11.png" alt="LeetCode 225 Implement Stack using Queues 圖5"></a></p>
<p>圖5</p>
<p>Pop一個值，被移除的值為3，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-11.png" alt="圖6"></a></p>
<p>圖6</p>
<p>Pop一個值，被移除的值為2，如圖7.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-8.png" alt="圖7"></a></p>
<p>圖7</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/225.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/225.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/225.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/225.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 23 Merge k Sorted Lists</title>
    <url>/2019/09/01/leetcode-23-merge-k-sorted-lists/</url>
    <content><![CDATA[<p>LeetCode 23 Merge k Sorted Lists 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>23 - Merge k Sorted Lists</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/merge-k-sorted-lists/">https://leetcode.com/problems/merge-k-sorted-lists/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給K串Linked List，並將它們全部合併。合併的規則為每個節點的值由小排到大。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>[ 1-&gt;4-&gt;5, 1-&gt;3-&gt;4, 2-&gt;6 ]</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解法有暴力法與Divide&amp;Conquer(分而治之法)，假設有K個Linked List，平均每串有N個Node。</p>
<p>首先分析暴力法的時間複雜度：先由第1與第2 Linked List互相比較並串新的Linked List，需要花費N + N的時間；第3個與前面新的Linked List互相比較並串新的Linked List，需要花費2N + N的時間；到最後第K個Linked List與前面新的Linked List互相比較並串新的Linked List，需要花費 (K - 1) * N + N的時間，所以全部的時間花費為  (N + N) + (2N + N) + …. + (K - 1) * N + N &#x3D; (2 + K) * (K - 1) &#x2F; 2 * N &#x3D; O(K^2 * N)</p>
<p>Divide&amp;Conquer的時間複雜度分析：將K個Linked List不斷切一半去合併，切到最小的單位（只剩2個Linked List）時，會需要K&#x2F;2次的比較，每次比較會有2N個Node；合併後再進行K&#x2F;4次的比較，每次比較會有4N個Node；到最後一次時；會變成K &#x2F; 2^logK次的比較，每次比較會有2^logK * N個Node。所以全部的時間花費為 (K&#x2F;2 * 2N) + (K&#x2F;4 * 4N) + …. + (K &#x2F; 2^ logK) * 2^logK * N  &#x3D; KN + KN + …. + KN &#x3D; O(logK * KN) 　</p>
<p>以時間上的比較，Divide&amp;Conquer快了暴力法logK &#x2F; K倍。採用Divide&amp;Conquer的2串合併時，延續<a href="https://geekcodeparadise.com/2019/09/leetcode-21-merge-two-sorted-lists/">[解題] LeetCode - 21 Merge Two Sorted Lists</a>的解法。實作上可參考Merge Sort或Quick Sort在切分子問題的精神。</p>
<p>難度為Hard</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/23.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/23.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/23.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/23.cs</a></p>
<p>LeetCode 23 Merge k Sorted Lists</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>程式解題</category>
        <category>Level-Hard</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 232 Implement Queue using Stacks</title>
    <url>/2019/09/05/leetcode-232-implement-queue-using-stacks/</url>
    <content><![CDATA[<p>LeetCode 232 Implement Queue using Stacks 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>232 - Implement Queue using Stacks</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/implement-queue-using-stacks/">https://leetcode.com/problems/implement-queue-using-stacks/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>用Stack實作Queue的功能, 包含peek、pop、push與empty。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>如何將Queue的FIFO特性用Stack實作，需要使用2個Stack。第1個Stack接收Push的值，而第2個Stack處理Peek和Pop的值。當有Peek&#x2F;Pop的需求時，會先確認第2個Stack是否為空的，若是空的，則會從第1個Stack的所有值都放過來，再從第2個Stack取Top&#x2F;Pop作為Queue的Peek&#x2F;Pop；若不是空的，則直接從第2個Stack取Top&#x2F;Pop作為Queue的Peek&#x2F;Pop。<br>Empty的實作為檢查是否這2個Stack都為空的。</p>
<p>　　以下用圖片解釋方法，假設有2個空的Stack，分別為myStack和bufferStack如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-13.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-12.png" alt="LeetCode 232 Implement Queue using Stacks 圖1"></a></p>
<p>圖1</p>
<p>Push 1值到myStack，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-9.png" alt="LeetCode 232 Implement Queue using Stacks 圖2"></a></p>
<p>圖2</p>
<p>Push 1值到myStack，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-9.png" alt="LeetCode 232 Implement Queue using Stacks 圖3"></a></p>
<p>圖3</p>
<p>Pop 1個值，但目前bufferStack為空的，於是先myStack的值都放到bufferStack，如圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-9.png" alt="LeetCode 232 Implement Queue using Stacks 圖4"></a></p>
<p>圖4</p>
<p>Push 3值到myStack，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-9.png" alt="圖5"></a></p>
<p>圖5</p>
<p>Peek 1個值，由於bufferStack不是空值，取它的Top為Peek，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-9.png" alt="圖6"></a></p>
<p>圖6</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/232.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/232.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/232.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/232.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 238 Product of Array Except Self</title>
    <url>/2020/09/30/leetcode-238-product-of-array-except-self/</url>
    <content><![CDATA[<p>LeetCode 238 Product of Array Except Self 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>238 - Product of Array Except Self</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/product-of-array-except-self/">https://leetcode.com/problems/product-of-array-except-self/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個陣列nums，需產生新的陣列output，而新的陣列的值output[i] 是原本陣列其他元素相乘但不包含相乘nums[i]的結果。題目要求時間複雜度為O(n)且不能用額外的計算空間。</p>
<p>比如範例輸入的[1, 2, 3 ,4]，答案是[2 * 3 * 4, 1 * 3 * 4, 1 * 2 * 4, 1 * 2 * 3] &#x3D; [24, 12, 8, 6]</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>可以先用數學代數分析題目，假設陣列的值是 [x, y, z, w]，第一次我們從索引值 i &#x3D; 0 往上遞增，先建立一版不包含當前nums[i]的相乘，之後再從i &#x3D; n - 1往下遞減，乘上當前nums[i+1]的解。</p>
<ol>
<li>先從i &#x3D; 0 到 n-1，output變化為 [1] &#x3D;&gt; [1, x * 1] &#x3D;&gt; [1, x, y * x] &#x3D;&gt; [1, x, yx, z * xy] &#x3D; [1, x, yx, zxy]</li>
<li>再從 i &#x3D; n -1 到 ，output變化為[1, x, yx, zxy * 1] &#x3D;&gt; [1, x, yx * w, zxy] &#x3D;&gt; [1, x * zw, yxw, zxy] &#x3D;&gt; [1 * zwy, xzw, yxw, zxy] &#x3D; [zwy, xzw, yxw, zxy]</li>
</ol>
<p>最終答案是[zwy, xzw, yxw, zxy]，每個元素都不包含原本nums[i]的值</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/238.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/238.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/238.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/238.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 242 Valid Anagram</title>
    <url>/2020/10/13/leetcode-242-valid-anagram/</url>
    <content><![CDATA[<p>LeetCode - 242 Valid Anagram 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>242 - Valid Anagram</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/valid-anagram/">https://leetcode.com/problems/valid-anagram/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2個字串s和t，求t是否為s的anagram，anagram的定義是一個字串的字母經過不同的排列組合，形成另一個字串。題目保證只有小寫英文字母。</p>
<p>比如範例輸入s &#x3D; “anagram”, t &#x3D; “nagaram”，它們彼此是anagram；但s &#x3D; “rat”, t &#x3D; “car”，並不是anagram，因為t沒有s的r字母、且多了c字母。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立2個陣列，分別記錄s和t每個a-z字母出現的次數，最後再比對這2個陣列a-z的次數是否相同，相同則代表是anagram。</p>
<p>難度為Easy  </p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/242.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/242.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/242.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/242.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 26 Remove Duplicates from Sorted Array</title>
    <url>/2020/10/01/leetcode-26-remove-duplicates-from-sorted-array/</url>
    <content><![CDATA[<p>LeetCode 26 Remove Duplicates from Sorted Array 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>26 - Remove Duplicates from Sorted Array</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個整數的陣列nums，裡面元素已經從小到大排序，求在nums移除重複的元素，並回傳移除後的陣列長度。題目不能用額外的計算空間。</p>
<p>比如範例輸入的[1, 1, 2]，移除重複元素的陣列是[1, 2]，並回傳長度2。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>用一個count變數，紀錄從i &#x3D; 1開始往後掃描，和i - 1有相同的值的次數，再用count做位移取代舊的值。最後要回傳的長度 &#x3D; 原始長度 - count。 比如輸入 [1, 1, 2, 3, 3]</p>
<ol>
<li>第2個元素1和第1個元素1相同，count變成1，nums[i - count] &#x3D; nums[i] &#x3D;&gt; nums[0] &#x3D; 1</li>
<li>第3個元素2和第2個元素1不相同，count不變，nums[i-count] &#x3D; nums[i] &#x3D;&gt; nums[1] &#x3D; 2</li>
<li>第4個元素3和第3個元素2不相同，count不變，nums[i-count] &#x3D; nums[i] &#x3D;&gt; nums[2] &#x3D; 3</li>
<li>第5個元素3和第4個元素3相同，count變成2，nums[i-count] &#x3D; nums[i] &#x3D;&gt; nums[2] &#x3D; 3 </li>
<li>最後陣列變成[1, 2, 3] 回傳的長度為 5 - 2 &#x3D; 3</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/26.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/26.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/26.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/26.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 283 Move Zeroes</title>
    <url>/2020/10/07/leetcode-283-move-zeroes/</url>
    <content><![CDATA[<p>LeetCode 283 Move Zeroes 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>283 - Move Zeroes</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/move-zeroes/">https://leetcode.com/problems/move-zeroes/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個陣列nums，將有0的元素都移到陣列最後面，而前面非0的元素相對順序要和原本一樣。</p>
<p>比如範例輸入的[0,1,0,3,12]，移動完後變成[1,3,12,0,0]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用一個變數lastZeroIndex，用來記錄0的位置。從索引值最小開始檢查每個nums的元素 ，只要是非0就做與nums[lastZeroIndex]交換的動作，這動作會把0一直往後移。 以範例輸入[0,1,0,3,12]：</p>
<ol>
<li>nums[0] &#x3D; 0，換下一個元素</li>
<li>nums[1] &#x3D; 1，交換nums[1] 與 nums[lastZeroIndex &#x3D; 0] &#x3D;&gt; 變成[1, 0, 0, 3, 12], lastZeroIndex + 1，換下一個元素</li>
<li>nums[2] &#x3D; 0，換下一個元素</li>
<li>nums[3] &#x3D; 3，交換nums[3] 與 nums[lastZeroIndex &#x3D; 1] &#x3D;&gt; 變成[1, 3, 0, 0, 12], lastZeroIndex + 1，換下一個元素</li>
<li>nums[4] &#x3D; 12，交換nums[4] 與 nums[lastZeroIndex &#x3D; 2] &#x3D;&gt; 變成[1, 3, 12, 0, 0], lastZeroIndex + 1</li>
</ol>
<p>所以最終答案是[1, 3, 12, 0, 0]</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/283.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/283.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/283.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/200-299/283.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 295 Find Median from Data Stream</title>
    <url>/2019/09/24/leetcode-295-find-median-from-data-stream/</url>
    <content><![CDATA[<p>LeetCode 295 Find Median from Data Stream 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>295 - Find Median from Data Stream</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/find-median-from-data-stream/">https://leetcode.com/problems/find-median-from-data-stream/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>會有連續性的整數輸入，實作addNum加入整數存起來與findMedian求目前存起來整數的中位數。如果有偶數個整數，則回傳2個中間值的平均值。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用2個Heap，分別是Max-Heap與Min-Heap。2個Heap的大小維持整個輸入整數數量的一半，Max-Heap的最大值為目前一半數量的最大值、Min-Heap的最小值為目前一半數量的最小值。取Median時，如果2個Heap大小一樣，取2邊Top的平均值；否則取數量較多的Top。</p>
<p>新增數字的時間複雜度為O(logN)、取中位數的時間複雜度為O(1)</p>
<p>　　以範例解釋。先建立2個Heap，Max-Heap與Min-Heap，如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-2.png" alt="LeetCode 295 Find Median from Data Stream 圖1"></a></p>
<p>圖1</p>
<p>新增數字5，一開始2個Heap都空的，加入至Max-Heap，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-2.png" alt="LeetCode 295 Find Median from Data Stream 圖2"></a></p>
<p>圖2</p>
<p>新增數字8，由於比Max-Heap的Top大，加入至Min-Heap，如圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-2.png" alt="LeetCode 295 Find Median from Data Stream 圖3"></a></p>
<p>圖3</p>
<p>新增數字6，由於2個Heap同樣大小，則比較Max-Heap的Top，6比5大，所以加入至Min-Heap，如圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-2.png" alt="LeetCode 295 Find Median from Data Stream 圖4"></a></p>
<p>圖4</p>
<p>　　 新增數字7，由於Min-Heap數量較多，則比較Min-Heap的Top，7比6大，所以加入至Min-Heap，但要pop目前的top加入至Max-Heap，再push 7 至Min-Heap，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-2.png" alt="LeetCode 295 Find Median from Data Stream 圖5"></a></p>
<p>圖5</p>
<p>取中位數，2個數量一樣，所以取2個Heap的Top的平均值為中位數，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-2.png" alt="LeetCode 295 Find Median from Data Stream 圖6"></a></p>
<p>圖6</p>
<p>新增數字3，由於2個Heap同樣大小，則比較Max-Heap的Top，3比6小，所以加入至Max-Heap，如圖7</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7.png" alt="圖7"></a></p>
<p>圖7</p>
<p>取中位數，Max-Heap數量較多，所以取Max-Heap的Top為中位數，如圖8.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/8.png" alt="圖8"></a></p>
<p>圖8</p>
<p>難度為Hard</p>
<h4 id="GITHUB位置-C-："><a href="#GITHUB位置-C-：" class="headerlink" title="GITHUB位置(C++)："></a>GITHUB位置(C++)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/295.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/200-299/295.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>程式解題</category>
        <category>Level-Hard</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 344 Reverse String</title>
    <url>/2020/10/10/leetcode-344-reverse-string/</url>
    <content><![CDATA[<p>LeetCode 344 Reverse String 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>344 - Reverse String</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/reverse-string/">https://leetcode.com/problems/reverse-string/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個字串s，在不使用額外記憶體的條件，將字串裡的字元做反轉。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立一個索引值i，從0開始到字串長度的一半len&#x2F;2，再將s[i]與s[len-i-1]做交換。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/344.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/344.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/344.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/344.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 350 Intersection of Two Arrays II</title>
    <url>/2020/10/05/leetcode-350-intersection-of-two-arrays-ii/</url>
    <content><![CDATA[<p>LeetCode 350 Intersection of Two Arrays II 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>350 - Intersection of Two Arrays II</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/">https://leetcode.com/problems/intersection-of-two-arrays-ii/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入2個陣列nums1和nums2，求這2個陣列有交集的元素。</p>
<p>比如範例輸入的nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]，元素有2個2都出現，所以要回傳[2, 2]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>對此2個陣列都從小到大排序，建立兩個指標i和j各自從nums1和nums2的最小值往上比對：</p>
<ul>
<li>如果目前指標指向的值一樣，代表是交集的元素，加入答案，i和j都遞增</li>
<li>如果目前指標指向的值nums1[i] &gt; nums2[j]，代表nums2更後面的值要拿來與nums1比對，所以只有j遞增</li>
<li>如果目前指標指向的值nums1[i] &lt; nums2[j]，代表nums1更後面的值要拿來與nums2比對，所以只有i遞增</li>
</ul>
<p>最終i和j有超過nums1&#x2F;nums2的長度就結束。 難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/350.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/350.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/350.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/350.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 36 Valid Sudoku</title>
    <url>/2020/10/09/leetcode-36-valid-sudoku/</url>
    <content><![CDATA[<p>LeetCode 36 Valid Sudoku 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>36 - Valid Sudoku</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/valid-sudoku/">https://leetcode.com/problems/valid-sudoku/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個數獨9*9的矩陣，檢查此數獨填的值是否符合數獨的規則。數獨規則有3：</p>
<ol>
<li>每一列出現1~9的數字只能各1次</li>
<li>每一行出現1~9的數字只能各1次</li>
<li>每3*3的小矩陣出現1~9的數字只能各1次</li>
</ol>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>將前述的三種規則，分別寫成3個函式，是否有重複出現的數字，可以用HashSet來記錄。 接著從每一行、每一列、每3*3矩陣分別呼叫對應的函式做檢查。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/36.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/36.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/36.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/36.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 376 Wiggle Subsequence</title>
    <url>/2020/09/20/leetcode-376-wiggle-subsequence/</url>
    <content><![CDATA[<p>LeetCode 376 Wiggle Subsequence 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>376 - Wiggle Subsequence</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/wiggle-subsequence/">https://leetcode.com/problems/wiggle-subsequence/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個數字序列，求有最長長度的擺動子序列(Wiggle Subsequence)，並輸出此原始序列的長度。擺動序列的定義為原本序列是[a, b, c, d, …. x]，而它們的相差序列[b - a, c - b, d - c, …., x - w]裡的元素都是以正和負交替呈現。</p>
<p>比如範例輸入的[1,7,4,9,2,5]，相差序列為[6,-3,5,-7,3]，符合擺動序列的規則，也是最長的擺動子序列，所以答案是6。 　　但如果序列是[1, 2, 3, 4]，最長的擺動子序列為[1]或[2]或[3]，所以答案是2 ( [1, 2] 或 [1, 3] 或 [1, 4] 或 [2, 3] 或 [2, 4] 或 [3, 4] )。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用貪婪法，貪婪的原則為只要遇到轉折點，也就是下一個值變小或者下一個值變大，則代表符合擺動序列的長度就加1。</p>
<p>像下方的狀態機，一開始在BEGIN的狀態，只要值一有變化，則進入到UP或DOWN的狀態。UP&#x2F;DOWN狀態則持續比對目前的值和下一個值是否有變小&#x2F;變大，有的話則長度加1。 　　</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/Untitled2BDiagram-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/Untitled2BDiagram.png" alt="LeetCode 376 Wiggle Subsequence state machine"></a></p>
<p>須注意edge case空值或只有1個元素的狀況。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/376.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/376.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/376.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/376.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 387 First Unique Character in a String</title>
    <url>/2020/10/12/leetcode-387-first-unique-character-in-a-string/</url>
    <content><![CDATA[<p>LeetCode 387 First Unique Character in a String 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>387 - First Unique Character in a String</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">https://leetcode.com/problems/first-unique-character-in-a-string/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個字串s，求它第一個只出現一次的字元的索引值，假如找不到則回傳-1。題目保證只有小寫英文字元。</p>
<p>比如範例輸入s &#x3D; “leetcode”，l是第1個出現且只出現一次的字元，所以回傳它的索引值0。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立2維度的陣列(或者List)，第1維度是字母a - z的索引值，第2維度是該字元的出現位置。s字串從頭掃描一遍，記錄每個字元的出現位置。最後再從2維陣列找出現位置只有1個且位置是最小的。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/387.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/387.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/387.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/387.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 392 Is Subsequence</title>
    <url>/2020/09/26/leetcode-392-is-subsequence/</url>
    <content><![CDATA[<p>LeetCode 392 Is Subsequence 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>392 - Is Subsequence</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/is-subsequence/">https://leetcode.com/problems/is-subsequence/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入兩個字串s 與 t，確認是否s是t的子序列。也就是s所有的元素，都出現在t，且出現的前後順序保持不變。</p>
<p>比如範例輸入的 s &#x3D; “abc”, t &#x3D; “ahbgdc”，abc都在t出現，且a與b與c的出現順序與在s一樣。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立兩個索引值i 與 j，分別在s和t的開頭掃描，遇到相同字元的則一起遞增看下一個字元，否則只有j遞增再看t的下個字元。最後如果i索引值掃描完s，代表s是t的子序列。 比如s &#x3D; “abc”, t &#x3D; “ahbgdc”，初始化i &#x3D; 0, j &#x3D; 0</p>
<ol>
<li>s[i] &#x3D; ‘a’ &#x3D; t[j] &#x3D; ‘a’, 所以i &#x3D; 1, j &#x3D; 1</li>
<li>s[i] &#x3D; ‘b’ !&#x3D; t[j] &#x3D; ‘h’, 所以i &#x3D; 1, j &#x3D; 2</li>
<li>s[i] &#x3D; ‘b’ &#x3D; t[j] &#x3D; ‘b’, 所以i &#x3D; 2, j &#x3D; 3</li>
<li>s[i] &#x3D; ‘c’ !&#x3D; t[j] &#x3D; ‘g’, 所以i &#x3D; 2, j &#x3D; 4</li>
<li>s[i] &#x3D; ‘c’ !&#x3D; t[j] &#x3D; ‘d’, 所以i &#x3D; 2, j &#x3D; 5</li>
<li>s[i] &#x3D; ‘c’ &#x3D; t[j] &#x3D; ‘c’, 所以i &#x3D; 3, j &#x3D; 6</li>
</ol>
<p>最後i已經都掃描過s字串，所以會是t的子序列。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/392.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/300-399/392.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/392.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/300-399/392.cs</a></p>
<p>LeetCode 392 Is Subsequence 解題報告</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 409 Longest Palindrome</title>
    <url>/2020/09/23/leetcode-409-longest-palindrome/</url>
    <content><![CDATA[<p>LeetCode 409 Longest Palindrome 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>409 - Longest Palindrome</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/longest-palindrome/">https://leetcode.com/problems/longest-palindrome/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個字串，裡面有不同的字元，且大小寫也視為不同，求從這些字元組成最大回文的長度。</p>
<p>比如範例輸入的abccccdd，能組成最大長度為7的回文，有可能是ccdadcc或者其他的組合。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>分析每個字元出現的頻率，假如X字元出現偶數次，則它一定能全部拿去組回文。但如果X字元出現奇數次，則只能取它的數量-1後再拿去組回文，假如目前回文的長度是偶數，則剛剛那筆奇數次的字元，被-1的數量要再補上去，這樣仍是回文。 以範例輸入的abccccdd：</p>
<ul>
<li>a的出現次數為1，能組成回文，目前回文長度為1</li>
<li>b的出現次數為1，無法加進回文，回文長度仍不變</li>
<li>c的出現次數為4，能組成回文，目前回文長度為5</li>
<li>d的出現次數為2，能組成回文，目前回文長度為7</li>
</ul>
<p>所以最長的長度為7。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/400-499/409.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/400-499/409.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/400-499/409.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/400-499/409.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 455 Assign Cookies</title>
    <url>/2020/09/16/leetcode-455-assign-cookies/</url>
    <content><![CDATA[<p>LeetCode 455 Assign Cookies 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>455 - Assign Cookies</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/assign-cookies/">https://leetcode.com/problems/assign-cookies/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個陣列g，代表小孩對於餅乾的需求度；另一個陣列s，代表餅乾提供的需求度，求這些餅乾最多能滿足幾位小朋友。</p>
<p>比如範例輸入的g &#x3D; [1, 2, 3], s &#x3D; [1, 1]，只有1個餅乾能滿足需求度為1的小孩，所以答案為1。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用貪婪法，將g和s都由小到大排序，每次都從最小需求度的小孩和餅乾開始比對，如果目前小孩的需求度無法滿足，就挑下一個餅乾。最終能計算有幾位小朋友得到餅乾。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/400-499/455.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/400-499/455.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/400-499/455.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/400-499/455.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 48 Rotate Image</title>
    <url>/2019/09/28/leetcode-48-rotate-image/</url>
    <content><![CDATA[<p>LeetCode 48 Rotate Image 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>48 - Rotate Image</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/rotate-image/">https://leetcode.com/problems/rotate-image/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個n * n大小陣列matrix，將陣列向右90度旋轉。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>非優化空間的方法：</p>
<p>建立另一個同n * n大小的陣列matrix2，將旋轉結果存在matrix2後再存回matrix。但需要O(n^2)的空間。</p>
<p>優化空間的方法：</p>
<p>只需要在matrix完成旋轉的功能，需用一個暫存變數，每一回合換4個位置。只需要O(1)的空間。</p>
<p>　　假設有4 * 4陣列maxtix為[[1,2,3,4], [5,6,7,8],[9,10,11,12], [13,14,15,16]]。如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1.png" alt="LeetCode 48 Rotate Image 圖1"></a></p>
<p>圖1</p>
<p>從最外層開始，由(0,0)等4個角 1 、4、16、13旋轉，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2.png" alt="LeetCode 48 Rotate Image 圖2"></a></p>
<p>圖2</p>
<p>再從外層第2個位置 2、8、15、9旋轉，如圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3.png" alt="LeetCode 48 Rotate Image 圖3"></a></p>
<p>圖3</p>
<p>再從外層第3個位置 3、12、14、5旋轉，如圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4.png" alt="LeetCode 48 Rotate Image 圖4"></a></p>
<p>圖4</p>
<p>最外層已旋轉完，進到裡面那一層(1,1)位置， 6、7、11、10旋轉，如圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5.png" alt="圖5"></a></p>
<p>圖5</p>
<p>最終的結果如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6.png" alt="圖6"></a></p>
<p>圖6</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/48.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/48.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/48.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/48.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 66 Plus One</title>
    <url>/2020/10/06/leetcode-66-plus-one/</url>
    <content><![CDATA[<p>LeetCode 66 Plus One 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>66 - Plus One</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/plus-one/">https://leetcode.com/problems/plus-one/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個陣列digits，每個元素代表1個整數的位數，求第1位數加1後的digits的變化，包含能進位。</p>
<p>比如範例輸入的digits &#x3D; [1,2,3]，代表整數123，加1後變成124，而要回傳[1,2,4]。 如果digits &#x3D; [9]，代表整數9，加1後變成10，而要回傳[1, 0]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>從最小位數開始加1後，檢查是否有進位，有進位則往更高位數加1。特殊狀況是遇到最高位數是9且又加1，需另外開空間存。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/66.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/66.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/66.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/66.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 7 Reverse Integer</title>
    <url>/2020/10/11/leetcode-7-reverse-integer/</url>
    <content><![CDATA[<p>LeetCode 7 Reverse Integer 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>7 - Reverse Integer</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/reverse-integer/">https://leetcode.com/problems/reverse-integer/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個32位元的整數x，求他的位數反轉。但如果反轉後的位數會overflow，則回傳0。</p>
<p>比如x &#x3D; 123，答案為321；x &#x3D; -123，答案為-321；x &#x3D; 1234567899，答案為0。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立一個long的變數ans，不斷地將x的第1位數轉成ans新的進位數。最終再用Math函式庫的abs檢查是否ans超出32位元整數的最大值，超過就回傳0，否則回傳轉型32位元的ans。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/7.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/7.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/7.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/7.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 73 Set Matrix Zeroes</title>
    <url>/2019/10/01/leetcode-73-set-matrix-zeroes/</url>
    <content><![CDATA[<p>LeetCode 73 Set Matrix Zeroes 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>73 - Set Matrix Zeroes</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/set-matrix-zeroes/">https://leetcode.com/problems/set-matrix-zeroes/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個m * n大小陣列matrix，若陣列中有元素為0的值，則該列與該行的元素都設為0。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>非優化空間的方法：</p>
<p>建立2個HashMap，掃描matrix並分別記錄有0的Row索引與Col索引，再用這2個HashMap檢查目前[row, col]位置是否要設為0。需要O(m + n)的空間、O(mn)的時間。</p>
<p>優化空間的方法：</p>
<p>優化空間有一些步驟，如下：</p>
<ol>
<li>尋找第0列是否有0的值，若有則標記hasCol &#x3D; true</li>
<li>尋找第0行是否有0的值，若有則標記hasRow &#x3D; true</li>
<li>從中間尋找有0的值，若為0則將該位置[row,col]的[row,0]與[0, col] 設為0</li>
<li>從中間尋找邊界為0的值，若[row, 0]或[0, col]為0則將該位置[row,col] 設為0</li>
<li>若hasCol &#x3D; true, 將[0, 0 to n - 1]設為0</li>
<li>若hasRow &#x3D; true, 將[0 to m - 1, 0]設為0</li>
</ol>
<p>　　其解法在於先標記上方與左方有0元素的條件，中間與上&#x2F;左方元素換成0後，最後在處理原本上&#x2F;左方有0的狀況。只需要O(1)的空間、O(mn)的時間。<br>　　以下用影片解釋此方法：</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/73.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/73.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/73.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/73.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 739 Daily Temperatures</title>
    <url>/2020/09/15/leetcode-739-daily-temperatures/</url>
    <content><![CDATA[<p>LeetCode 739 Daily Temperatures 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>739 - Daily Temperatures</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/daily-temperatures/">https://leetcode.com/problems/daily-temperatures/</a></p>
<h3 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h3><p>輸入一個n大小陣列T，求第x天的溫度T，要經過y天是否會遇到比溫度T還高，有的話標記第x天的答案為y，否則為0。</p>
<p>比如範例輸入的[73, 74, 75, 71, 69, 72, 76, 73], </p>
<ol>
<li>第1天的溫度73度只隔1天就遇到比它高溫的74度，所以標記為1</li>
<li>第2天的溫度74度只隔1天就遇到比它高溫的75度，所以標記為1</li>
<li>第3天的溫度75度需隔4天才遇到比它高溫的76度，所以標記為4</li>
</ol>
<p>最終的答案為[1, 1, 4, 2, 1, 1, 0, 0] 。</p>
<h3 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h3><p>使用Stack，將第x天溫度的x值push至此stack。當stack不為空時，檢查是否第y天的溫度有高於目前stack的top對應的溫度，如果有則可算出y - x為第x天的答案；如果沒有高於stack top的溫度則換下一天。</p>
<p>以前面範例輸入為例：</p>
<p>1. Stack[] 現在是空的, 增加為Stack[0]</p>
<p>2. 第2天是74度，74度 &gt; T[Stack.top] &#x3D; 73，所以ans[0] &#x3D; 1 - 0 &#x3D; 1，而Stack.pop()後已經空了，再push(1)，變成Stack[1]。</p>
<p>3. 第3天是75度，75度 &gt; T[Stack.top] &#x3D; 74，所以ans[1] &#x3D; 2 - 1 &#x3D; 1，而Stack.pop()後已經空了，再push(2)，變成Stack[2]。 　</p>
<p>4. 第4天是71度，71度 &lt; T[Stack.top] &#x3D; 75，換下一天，並push(3)，變成Stack[2, 3]。 　</p>
<p>5. 第5天是69度，69度 &lt; T[Stack.top] &#x3D; 71，換下一天，並push(4)，變成Stack[2, 3, 4]。</p>
<p>6. 第6天是72度，72度 &gt; T[Stack.top] &#x3D; 69，所以ans[4] &#x3D; 5 - 4 &#x3D; 1，Stack.pop()換下一個，72度 &gt; T[Stack.top] &#x3D; 71，所以ans[3] &#x3D; 5 - 3 &#x3D; 2，Stack.pop()換下一個，72度 &lt; T[Stack.top] &#x3D; 75，換下一天，並push(5)，變成Stack[2, 5]。 　</p>
<p>7. 第7天是76度，76度 &gt; T[Stack.top] &#x3D; 72，所以ans[5] &#x3D; 6 - 5 &#x3D; 1，Stack.pop()換下一個，76度 &gt; T[Stack.top] &#x3D; 75，所以ans[2] &#x3D; 6 - 2 &#x3D; 4，而Stack.pop()後已經空了，再push(6)，變成Stack[6]。 　</p>
<p>8. 第8天是73度，73度 &lt; T[Stack.top] &#x3D; 76，換下一天，並push(7)，變成Stack[6, 7]。</p>
<p>剩下沒被標記答案的都是0。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/700-799/739.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/700-799/739.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/700-799/739.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/700-799/739.cs</a></p>
<h3 id="LeetCode-739-Daily-Temperatures"><a href="#LeetCode-739-Daily-Temperatures" class="headerlink" title="LeetCode 739 Daily Temperatures"></a>LeetCode 739 Daily Temperatures</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 8 String to Integer (atoi)</title>
    <url>/2020/10/29/leetcode-8-string-to-integer-atoi/</url>
    <content><![CDATA[<p>LeetCode - 8 String to Integer (atoi) 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>8 - String to Integer (atoi)</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/valid-palindrome/">https://leetcode.com/problems/valid-palindrome/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1個字串s，實作atoi函式，將此字串轉成整數。字串裡可能包含多個非數字字元，像是+號、-號、空白、非數字等。前面遇到空白都略過，直到第一個非空白字元。接著有可選的+號字元或者-號，後面可能接著數字或者其他字元。</p>
<p>在數字之後的其他字元就都排除不理。</p>
<p>如果在空白字元之後的字串，沒有合理的數字或者是空字串或者只有空白，則回傳0。</p>
<p>解析後的數字如果超出32位元整數的上限&#x2F;下限，則回傳32位元整數的上限&#x2F;下限。</p>
<p>比如範例輸入s &#x3D; “   -42”，回傳-42</p>
<p>s &#x3D; “4193 with words”，4193後出現非數字字元，所以只需解析前面的數字，回傳4193</p>
<p>s &#x3D; “words and 987”，一開始出現非數字字元，屬於非合理的數字，回傳0</p>
<p>s &#x3D; “-91283472332”，低於32位元整數的下限，所以回傳32位元整數的下限-2147483648</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>有2階段的處理流程，第1階段是解析該字串前面是否有無效的整數規則，如下圖1的解析流程。</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2021/12/Untitled_Diagram.png" alt="LeetCode 8 String to Integer (atoi) solution"></p>
<p>圖1</p>
<p>第2階段是前面得知是正數或負數，用64位元變數做進位計算，直到字串讀到結尾或者非數字。再判斷long變數有無超出32位元整數的上限&#x2F;下限。最後回傳轉型32位元整數。</p>
<p>難度為Medium  </p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/8.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/8.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/8.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/8.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 821 Shortest Distance to a Character</title>
    <url>/2020/09/27/leetcode-821-shortest-distance-to-a-character/</url>
    <content><![CDATA[<p>LeetCode 821 Shortest Distance to a Character 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>821 - Shortest Distance to a Character</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/shortest-distance-to-a-character/">https://leetcode.com/problems/shortest-distance-to-a-character/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個字串S 與 1個字元C，這字串S至少出現1個C字元，求S的每個字元到C字元的最短距離。</p>
<p>比如範例輸入的 S &#x3D; “loveleetcode”, C &#x3D; ‘e’，第1個字元l距離e的最短距離為3、第2個字元o距離e的最短距離為2、第3個字元v距離e的最短距離為1、第4個字元e距離e的最短距離為0，完整的答案為[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]。</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>一開始從左邊掃描目前有C字元的位置，並與之後每個位置計算距離，如果目前都沒遇到C字元，則當下那位置會標記為一個無限大的值。 再從右邊掃描，一樣紀目前有C字元的位置，並與之後每個位置計算距離，並比對前面從左邊掃描的距離誰是最小的，則為答案。 比如 S &#x3D; “loveleetcode”, C &#x3D; ‘e’，初始化一個陣列ans[12] 從左邊掃描，ans的變化為 [inf, inf, inf, 0, 1, 0, 0, 1, 2, 3, 4, 0] 再換右邊掃描，ans的變化為[min(inf, 3), min(inf, 2), min(inf, 1), 0, min(1, 1), 0, 0, min(1, 4), min(2, 3), min(3, 2) , min(4, 1), 0] &#x3D; [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/800-899/821.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/800-899/821.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/800-899/821.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/800-899/821.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 832 Flipping an Image</title>
    <url>/2020/09/28/leetcode-832-flipping-an-image/</url>
    <content><![CDATA[<p>LeetCode 832 Flipping an Image 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>832 - Flipping an Image</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/flipping-an-image/">https://leetcode.com/problems/flipping-an-image/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入1個二維陣列A，A的列與行的長度相等，求把這二維陣列翻轉的結果。翻轉的定義為先把每一列的值作順序倒轉，再把每個值從0改1、從1改0。</p>
<p>比如範例輸入的 [1,1,0,0], [1,0,0,1], [0,1,1,1], [1,0,1,0] 先做順序倒轉，變成 [0,0,1,1], [1,0,0,1], [1,1,1,0], [0,1,0,1] 再做0改1、1改0，變成 [1,1,0,0], [0,1,1,0], [0,0,0,1], [1,0,1,0]</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>雙層迴圈，從陣列A的第1列開始循環，利用長度n - i - 1即可計算倒轉的順序索引值。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/800-899/832.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/800-899/832.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/800-899/832.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/800-899/832.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 86 Partition List</title>
    <url>/2019/08/30/leetcode-86-partition-list/</url>
    <content><![CDATA[<p>LeetCode 86 Partition List 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>86 - Partition List</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/partition-list/">https://leetcode.com/problems/partition-list/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1串Linked List與一個數字X，將此Linked List的節點做重新串接，小於X的節點在前面、大於或等於X的節點在後面，而節點的前後順序要與原始的一樣。以範例輸入來看，小於X &#x3D; 3的有1、2、2，大於或等於X &#x3D; 3的有4、3、5，所以重新串接後的Linked List &#x3D; 1 -&gt; 2 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; 5 。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>head &#x3D; 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x &#x3D; 3</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>起點設2個空節點，分別為lessNode與greaterNode。這2個節點分別串接小於X 和 大於&#x2F;等於X的節點。</li>
<li>再設2個ListNode指標，分別為lessPtr與greaterPtr，一開始分別指向lessNode與greaterNode。</li>
<li>以Head歷遍各節點，比對該節點的值與X，用lessPtr與greaterPtr連結這些節點。</li>
<li>最後將lessNode與greaterNode串接，完成新的LinkedList。</li>
</ol>
<p>　　以下用範例輸入說明，一開始為1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 的LinkedList 且 X &#x3D; 3，設置lessNode、greaterNode、lessPtr與，如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-2.png" alt="LeetCode 86 Partition List 圖1"></a></p>
<p>圖1</p>
<p>　Head目前節點的值為1，小於X，將lessPtr的Next指向Head，lessPtr往Next移動，Head往下個Node移動，如圖2 至 圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-2.png" alt="LeetCode 86 Partition List 圖2"></a></p>
<p>圖2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-2.png" alt="LeetCode 86 Partition List 圖3"></a></p>
<p>圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-2.png" alt="LeetCode 86 Partition List 圖4"></a></p>
<p>圖4</p>
<p>Head目前節點的值為4，大於X，將greaterPrt的Next指向Head，greaterPrt往Next移動，Head往下個Node移動，如圖5 至 圖7</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-2.png" alt="LeetCode 86 Partition List 圖5"></a></p>
<p>圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/6-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/6-2.png" alt="LeetCode 86 Partition List 圖6"></a></p>
<p>圖6</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/7.png" alt="LeetCode 86 Partition List 圖7"></a></p>
<p>圖7</p>
<p>Head目前節點的值為3，等於X，將greaterPrt的Next指向Head，greaterPrt往Next移動，Head往下個Node移動，如圖8 至 圖9</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/8.png" alt="LeetCode 86 Partition List 圖8"></a></p>
<p>圖8</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/9.png" alt="LeetCode 86 Partition List 圖9"></a></p>
<p>圖9</p>
<p>Head目前節點的值為2，小於X，將lessPrt的Next指向Head，lessPrt往Next移動，Head往下個Node移動，如圖10 至 圖12</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/10.png" alt="LeetCode 86 Partition List 圖10"></a></p>
<p>圖10</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/11.png" alt="LeetCode 86 Partition List 圖11"></a></p>
<p>圖11</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/12.png" alt="LeetCode 86 Partition List 圖12"></a></p>
<p>圖12</p>
<p>Head目前節點的值為5，大於X，將greaterPrt的Next指向Head，greaterPrt往Next移動，Head往下個Node移動，如圖13 至 圖15</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/13.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/13.png" alt="LeetCode 86 Partition List 圖13"></a></p>
<p>圖13</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/14.png" alt="LeetCode 86 Partition List 圖14"></a></p>
<p>圖14</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/15.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/15.png" alt="圖15"></a></p>
<p>圖15</p>
<p>Head目前節點的值為2，小於X，將lessPrt的Next指向Head，lessPrt往Next移動，Head最後是指向null，如圖16 至 圖18</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/16.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/16.png" alt="圖16"></a></p>
<p>圖16</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/17.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/17.png" alt="圖17"></a></p>
<p>圖17</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/18.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/18.png" alt="圖18"></a></p>
<p>圖18</p>
<p>將lessPtr的Next指向greaterNode的Next，代表將小的Linked List串大的Linked List，如圖19</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/19.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/19.png" alt="圖19"></a></p>
<p>圖19</p>
<p>將greaterPtr的Next指向null，如圖20</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/20.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/20.png" alt="圖20"></a></p>
<p>圖20</p>
<p>lessNode的Next即為新的Linked List，如圖21</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/21.png"></p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/86.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/86.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/86.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/86.cs</a></p>
<p>LeetCode 86 Partition List</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>Pig 0.15.0 安裝</title>
    <url>/2015/11/05/pig-0-15-0/</url>
    <content><![CDATA[<p>Pig 0.15.0 安裝</p>
<h4 id="1-Pig簡介"><a href="#1-Pig簡介" class="headerlink" title="1.Pig簡介"></a>1.Pig簡介</h4><p>　　Pig是資料分析的工具，可以用Pig Latin類似SQL的語言對資料做分析，比如排序、過濾特定條件、分組等。Pig可以透過Hadoop的MapReduce對巨量資量做分散式運算，對於不會寫JAVA的使用者，透過Pig Latin簡短的程式碼即可完成資料的分析。</p>
<h4 id="2-安裝Pig"><a href="#2-安裝Pig" class="headerlink" title="2.安裝Pig"></a>2.安裝Pig</h4><p>　　本篇Pig會以分散式模式安裝。首先用wget下載0.15.0版的Pig：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/pig/pig-0.15.0/pig-0.15.0.tar.gz</span><br><span class="line">tar -zxf pig-0.15.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　解壓縮後，新增Pig相關的環境變數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/test/pig-0.15.0/bin </span><br><span class="line"><span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$HADOOP_CLASSPATH</span>:/home/test/pig-0.15.0/lib</span><br><span class="line"><span class="built_in">export</span> PIG_HOME=/home/test/pig-0.15.0</span><br><span class="line"><span class="built_in">export</span> PIG_CONF_DIR=/home/test/pig-0.15.0/conf</span><br><span class="line"><span class="built_in">export</span> PIG_CLASSPATH=/home/test/hadoop-2.7.1/etc/hadoop <span class="comment">#此行要讀取hadoop的conf資料</span></span><br></pre></td></tr></table></figure>

<p>　　Pig要在MapReduce運行，要將相關的lib複製到Hadoop的lib底下。雖然我有設定HADOOP_CLASSPATH了，但不知為何不會work….</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/test/pig-0.15.0/lib/antlr-runtime-3.4.jar /home/test/hadoop-2.7.1/share/hadoop/mapreduce</span><br><span class="line"><span class="built_in">cp</span> /home/test/pig-0.15.0/lib/automaton-1.11-8.jar /home/test/hadoop-2.7.1/share/hadoop/mapreduce</span><br><span class="line"><span class="built_in">cp</span> /home/test/pig-0.15.0/lib/jline-1.0.jar /home/test/hadoop-2.7.1/share/hadoop/mapreduce</span><br><span class="line"><span class="built_in">cp</span> /home/test/pig-0.15.0/lib/joda-time-2.5.jar /home/test/hadoop-2.7.1/share/hadoop/mapreduce</span><br></pre></td></tr></table></figure>

<h4 id="3-執行Pig"><a href="#3-執行Pig" class="headerlink" title="3.執行Pig"></a>3.執行Pig</h4><p>　　Hadoop啟動後，在command輸入pig，可以進入到grunt shell，如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/11/pig2Bcommand-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/pig2Bcommand.png" alt=" shell script"></a></p>
<p>　　在HDFS裡，有放了一筆在美國一座城市的薪資資料，用此.csv資料做示範。檔案下載位置：<a href="https://catalog.data.gov/dataset/employee-salaries-2014">data.montgomerycountymd.gov：Employee Salaries - 2014</a>。下載可以看其header的定義，匯入到HDFS前要把Header去掉。<br>　　假設我們要撈出的資料是在科技業工作、年薪高於7萬美元的人，首先在shell輸入讀取資料的指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt&gt; salarydata = LOAD <span class="string">&#x27;hdfs://hadoop01:9000/salary_data/Employee_Salaries.csv&#x27;</span> USING PigStorage(<span class="string">&#x27;,&#x27;</span>) AS ( FullName1:chararray , FullName2:chararray ,</span><br><span class="line">Gender:chararray , CurrentAnnualSalary : chararray, GrossPayReceived2014 : chararray ,OvertimePay2014:chararray , Department:chararray , DepartmentName:chararray,Division:chararray, AssignmentCategory: chararray , PositionTitle: chararray, </span><br><span class="line">UnderfilledJobTitle: chararray,DateFirstHired:chararray);</span><br></pre></td></tr></table></figure>

<p>　　用LOAD讀取HDFS上的資料，要帶入完整的路徑；USING PigStorage(‘,’)代表資料是用逗點分隔；AS之後一串為每列資料的變數名稱與資料型態chararray 為字串，其他的型別有int、long、float、double、tuple、bag、map等。這一串資料讀取後存到salarydata 變數。 　　<br>　　這一份資料有些需要額外轉型、合併的處理,比如FullName切成兩個，要把它們合併在一起；另一個是三種薪水的值前面都有$符號，要把他們刪除並轉型成double，因此使用下面的指令可以快速轉型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt&gt; transformdata = FOREACH salarydata GENERATE (FullName1 , FullName2) ,Gender , (double) REPLACE(CurrentAnnualSalary, <span class="string">&#x27;\\\$&#x27;</span>, <span class="string">&#x27;&#x27;</span>) AS (CurrentAnnualSalary), (double) REPLACE(GrossPayReceived2014, <span class="string">&#x27;\\\$&#x27;</span>, <span class="string">&#x27;&#x27;</span>) As (GrossPayReceived2014),　(double) REPLACE(OvertimePay2014, <span class="string">&#x27;\\\$&#x27;</span>, <span class="string">&#x27;&#x27;</span>) AS (OvertimePay2014) , Department, DepartmentName , Division , AssignmentCategory , PositionTitle , UnderfilledJobTitle ,　DateFirstHired;</span><br></pre></td></tr></table></figure>

<p>　　用GENERATE 語法可以將salarydata的內容轉成另一份變數，其中FullName1和FullName2合併為一組field，而CurrentAnnualSalary、GrossPayReceived2014和OvertimePay2014用REPLACE把$符號去除，再用(double)轉型。經過這一些的轉型，產生了新的transformdata變數。 　　<br>　　再用FILTER將transformdata的CurrentAnnualSalary 和 Department 做條件運算，運算的結果存到變數filterdata ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt&gt; filterdata = FILTER transformdata BY CurrentAnnualSalary &gt; 70000 AND Department == <span class="string">&#x27;DTS&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>　　最後將filterdata儲存到檔案裡：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt&gt; STORE filterdata INTO <span class="string">&#x27;hdfs://hadoop01:9000/salary_data/filter_data&#x27;</span> USING PigStorage();</span><br></pre></td></tr></table></figure>

<p>　　輸入STORE指令後，將會啟動MapReduce工作。之前的LOAD、GENERATE、FILTER還沒遇到STORE指令是不會work，等遇到STORE相同的Action指令才會運算。最後執行出來會存在hdfs:&#x2F;&#x2F;hadoop01:9000&#x2F;salary_data&#x2F;filter_data資料夾裡。分析後的結果如下：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/result.png" alt="Pig 0.15.0 result"></p>
<h4 id="4-結論"><a href="#4-結論" class="headerlink" title="4.結論"></a>4.結論</h4><p>　　Pig安裝不麻煩，而是在研究Pig Latin語法花了一段時間…被$符號搞好久～～但覺得若熟Pig語法，做資料分析會蠻方便的，跟之前Hive很像，未來再來研究Hive跟Pig的使用比較。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li>劉鵬 實戰Hadoop 第6章 Pig</li>
<li><a href="https://pig.apache.org/">Apache Pig官方網站</a></li>
<li><a href="http://stackoverflow.com/questions/23774447/pig-script-replace-with-pipe-symbol">Stackoverflow：PIG Script REPLACE with pipe symbol</a></li>
<li><a href="http://stackoverflow.com/questions/16840483/replace-a-value-of-a-field-in-a-tuple-in-pig">Stackoverflow：Replace a value of a field in a tuple in Pig</a></li>
<li><a href="http://stackoverflow.com/questions/25939194/unable-to-remove-special-characters-in-pig">Stackoverflow：Unable to Remove Special Characters In Pig</a></li>
</ol>
<p>Pig 0.15.0</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Pig</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 92 Reverse Linked List II</title>
    <url>/2019/08/25/leetcode-92-reverse-linked-list-ii/</url>
    <content><![CDATA[<p>LeetCode 92 Reverse Linked List II 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>LeetCode</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>92 - Reverse Linked List II</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://leetcode.com/problems/reverse-linked-list-ii/">https://leetcode.com/problems/reverse-linked-list-ii/</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一串Linked List、起始位置m與結尾位置n，將此Linked List裡m與n之間元素反轉，回傳反轉後的Head Node。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m &#x3D; 2, n &#x3D; 4</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解題過程分三步驟。</p>
<ol>
<li>先確定要反轉的起始位置與起始位置的前一個節點</li>
<li>介於m與n的反轉：可參考在<a href="https://geekcodeparadise.com/2019/08/leetcode-206-reverse-linked-list/">LeetCode - 206 Reverse Linked List</a>的解法</li>
<li>中間反轉後的LinkedList再串接頭與尾</li>
</ol>
<p>以下用圖片範例解釋方法，假設原始的Linked List、m &#x3D; 2、n &#x3D; 4如圖1，有用一個Head指向起點。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/1-3.png" alt="LeetCode 92 Reverse Linked List II 圖1"></a></p>
<p>圖1</p>
<p>宣告2個Node，第1個為preHead，指向null；第2個為result，指向Head。如圖2。preHead的作用為記錄起始位置的前一個節點、result為反轉後新Head。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/2-3.png" alt="LeetCode 92 Reverse Linked List II 圖2"></a></p>
<p>圖2</p>
<p>用迴圈的方式，將Head指向m的位置、preHead為m的前一個位置，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/3-3.png" alt="LeetCode 92 Reverse Linked List II 圖3"></a></p>
<p>圖3</p>
<p>宣告1個Node為newPreTail，指向目前Head的位置，代表m與n中間反轉後的最後Node位置；也宣告準備要反轉範圍的新Head，指向null，如圖4.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/4-3.png" alt="LeetCode 92 Reverse Linked List II 圖4"></a></p>
<p>圖4</p>
<p>宣告一個Next指向Head的Next、Head的Next再指向newHead，如圖5.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/5-3.png" alt="LeetCode 92 Reverse Linked List II 圖5"></a></p>
<p>圖5</p>
<p>newHead指向Head、Head再指向Next，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/6-4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/6-3.png" alt="LeetCode 92 Reverse Linked List II 圖6"></a></p>
<p>圖6</p>
<p>重複圖5 ~ 圖6的步驟，直到已循環 m - n + 1 次或Head為null，以範例為循環3次，結果如圖7。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/7-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/7-1.png" alt="圖7"></a></p>
<p>圖7</p>
<p>將newPreTail的Next指向Head，如圖8</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/8-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/8-1.png" alt="圖8"></a></p>
<p>圖8</p>
<p>最後判斷preHead是否為空值：當m &#x3D; 1的時候，preHead會是空的，所以要把result指向newHead；否則preHead的Next指向newHead。以範例preHead不是空的，如圖9.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/08/9-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/08/9-1.png" alt="圖9"></a></p>
<p>圖9</p>
<p>將result回傳，為反轉後的新Head。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置-C-與-C-："><a href="#GITHUB位置-C-與-C-：" class="headerlink" title="GITHUB位置(C++ 與 C#)："></a>GITHUB位置(C++ 與 C#)：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/92.cpp">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%2B%2B/1-99/92.cpp</a></p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/92.cs">https://github.com/u8989332/ProblemSolving/blob/master/LeetCode/C%23/1-99/92.cs</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>LeetCode</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
      </categories>
  </entry>
  <entry>
    <title>Active Record Pattern</title>
    <url>/2021/07/01/poeaa-data-source-architectural-pattern-active-record/</url>
    <content><![CDATA[<h3 id="1-What-is-Active-Record"><a href="#1-What-is-Active-Record" class="headerlink" title="1. What is Active Record"></a>1. What is Active Record</h3><p>According to [PoEAA], Active Record definition is “An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.”</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/activeRecordSketch-1.gif"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/activeRecordSketch-1.gif" alt="Active Record"></a></p>
<p>Figure 1. Active Record (From <a href="https://www.martinfowler.com/eaaCatalog/activeRecord.html">PoEAA Page</a>)</p>
<h4 id="1-1-How-it-works"><a href="#1-1-How-it-works" class="headerlink" title="1.1 How it works"></a>1.1 How it works</h4><p>It is a Domain Model. Every Active Record’s class is mapped to a record of the database and loads the data source to process with domain logic.<br>An approximate equality this pattern ≈ Row Data Gateway + Domain Logic</p>
<h4 id="1-2-When-to-use-it"><a href="#1-2-When-to-use-it" class="headerlink" title="1.2 When to use it"></a>1.2 When to use it</h4><ol>
<li>For simple domain logic.</li>
<li>When design Domain Model pattern, choose either this pattern or  Data Mapper.</li>
<li>If the application becomes more complex, Data Mapper is a better choice.</li>
<li>This pattern is hard to do refactoring because of tightly coupling with database.</li>
<li>When use Transaction Script, Row Data Gateway gradually evolves into Active Record.</li>
</ol>
<h3 id="2-Pattern-Practice-The-Person-Management"><a href="#2-Pattern-Practice-The-Person-Management" class="headerlink" title="2. Pattern Practice: The Person Management"></a>2. Pattern Practice: The Person Management</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/06/20/poeaa-data-source-architectural-pattern-table-data-gateway/">[PoEAA] Data Source Architectural Pattern - Table Data Gateway</a>. This article uses this pattern to build the data source architectural layer.</p>
<h4 id="2-1-Implementation-by-C-SQLite"><a href="#2-1-Implementation-by-C-SQLite" class="headerlink" title="2.1 Implementation by C# &amp; SQLite"></a>2.1 Implementation by C# &amp; SQLite</h4><p>This pattern is implemented by C# based on the content of <strong>Chapter 10 Data Source Architectural Patterns - Active Record</strong> of PoEAA. The database is SQLite.</p>
<p>By Martin’s implementation, it doesn’t contain a Delete function in a record. So this article also has no Delete function.</p>
<h5 id="2-1-1-Person-class"><a href="#2-1-1-Person-class" class="headerlink" title="2.1.1 Person class"></a>2.1.1 Person class</h5><p>This Person class creates Insert&#x2F;Update&#x2F;Find&#x2F;Load basic functions to manipulate person table. One instance function GetExemption() is a business logic.  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> : <span class="title">BaseActiveRecord</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> NumberOfDependents &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> FindStatementString = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">SELECT id, lastname, firstname, numberOfDependents</span></span><br><span class="line"><span class="string">FROM person</span></span><br><span class="line"><span class="string">WHERE id = $id</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> UpdateStatementString =</span><br><span class="line"><span class="string">@&quot;UPDATE person </span></span><br><span class="line"><span class="string">SET lastname = $lastname, firstname = $firstname, numberOfDependents = $numberOfDependents</span></span><br><span class="line"><span class="string">where id = $id&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> InsertStatementString =</span><br><span class="line"><span class="string">@&quot;INSERT INTO person </span></span><br><span class="line"><span class="string">VALUES ($id, $lastname, $firstname, $numberOfDependents)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> lastName, <span class="built_in">string</span> firstName, <span class="built_in">int</span> numberOfDependents</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Id = id;</span><br><span class="line">LastName = lastName;</span><br><span class="line">FirstName = firstName;</span><br><span class="line">NumberOfDependents = numberOfDependents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">Find</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Person result = Registry.GetPerson(id);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> conn = DbManager.CreateConnection();</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="keyword">using</span> IDbCommand comm = <span class="keyword">new</span> SQLiteCommand(FindStatementString, conn);</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$id&quot;</span>, id));</span><br><span class="line"><span class="keyword">using</span> IDataReader reader = comm.ExecuteReader();</span><br><span class="line">reader.Read();</span><br><span class="line">result = Load(reader);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">Load</span>(<span class="params">IDataReader reader</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">object</span>[] resultSet = <span class="keyword">new</span> <span class="built_in">object</span>[reader.FieldCount];</span><br><span class="line">reader.GetValues(resultSet);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> id = (<span class="built_in">int</span>)resultSet[<span class="number">0</span>];</span><br><span class="line">Person result = Registry.GetPerson(id);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> lastName = resultSet[<span class="number">1</span>].ToString();</span><br><span class="line"><span class="built_in">string</span> firstName = resultSet[<span class="number">2</span>].ToString();</span><br><span class="line"><span class="built_in">int</span> numberOfDependents = (<span class="built_in">int</span>)resultSet[<span class="number">3</span>];</span><br><span class="line">result = <span class="keyword">new</span> Person(id, lastName, firstName, numberOfDependents);</span><br><span class="line">Registry.AddPerson(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> conn = DbManager.CreateConnection();</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="keyword">using</span> IDbCommand comm = <span class="keyword">new</span> SQLiteCommand(UpdateStatementString, conn);</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$lastname&quot;</span>, LastName));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$firstname&quot;</span>, FirstName));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$numberOfDependents&quot;</span>, NumberOfDependents));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$id&quot;</span>, Id));</span><br><span class="line">comm.ExecuteNonQuery();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Insert</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> conn = DbManager.CreateConnection();</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="keyword">using</span> IDbCommand comm = <span class="keyword">new</span> SQLiteCommand(InsertStatementString, conn);</span><br><span class="line">Id = FindNextDatabaseId();</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$id&quot;</span>, Id));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$lastname&quot;</span>, LastName));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$firstname&quot;</span>, FirstName));</span><br><span class="line">comm.Parameters.Add(<span class="keyword">new</span> SQLiteParameter(<span class="string">&quot;$numberOfDependents&quot;</span>, NumberOfDependents));</span><br><span class="line">comm.ExecuteNonQuery();</span><br><span class="line">Registry.AddPerson(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">GetExemption</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Money baseExemption = Money.Dollars(<span class="number">1500</span>d);</span><br><span class="line">Money dependentExemption = Money.Dollars(<span class="number">750</span>d);</span><br><span class="line"><span class="keyword">return</span> baseExemption.Add(dependentExemption.Multiply((<span class="built_in">double</span>) NumberOfDependents));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">FindNextDatabaseId</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">&quot;SELECT max(id) as curId from person&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> conn = DbManager.CreateConnection();</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="keyword">using</span> IDbCommand comm = <span class="keyword">new</span> SQLiteCommand(sql, conn);</span><br><span class="line"><span class="keyword">using</span> IDataReader reader = comm.ExecuteReader();</span><br><span class="line"><span class="built_in">bool</span> hasResult = reader.Read();</span><br><span class="line"><span class="keyword">if</span> (hasResult)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="built_in">int</span>)((<span class="built_in">long</span>)reader[<span class="string">&quot;curId&quot;</span>] + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">BaseActiveRecord</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-Registry"><a href="#2-1-2-Registry" class="headerlink" title="2.1.2 Registry"></a>2.1.2 Registry</h5><p>The Registry has been used in <a href="https://geekcodeparadise.com/2021/06/23/poeaa-data-source-architectural-pattern-row-data-gateway/">[PoEAA] Data Source Architectural Pattern - Row Data Gateway</a>. This article uses it to register Person instances.  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Registry</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Registry Instance = <span class="keyword">new</span> Registry();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">int</span>, Person&gt; _personsMap = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, Person&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Registry</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddPerson</span>(<span class="params">Person person</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Instance._personsMap.Add(person.Id, person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">GetPerson</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Instance._personsMap.ContainsKey(id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Instance._personsMap[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Demo"><a href="#2-2-Demo" class="headerlink" title="2.2 Demo"></a>2.2 Demo</h4><p>Create a console program and create 3 Persons in SQLite as the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> FindAllPersonsStatementString = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">SELECT id, lastname, firstname, numberOfDependents</span></span><br><span class="line"><span class="string">FROM person</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">InitializeData();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Get persons&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> people = FindPersons();</span><br><span class="line">PrintPerson(people);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Insert a new person&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> Person(<span class="number">0</span>, <span class="string">&quot;Rose&quot;</span>, <span class="string">&quot;Jackson&quot;</span>, <span class="number">60</span>).Insert();</span><br><span class="line">people = FindPersons();</span><br><span class="line">PrintPerson(people);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Update a person&#x27;s first name&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> firstPerson = Person.Find(<span class="number">1</span>);</span><br><span class="line">firstPerson.FirstName = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">firstPerson.Update();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Update a person&#x27;s number of dependents&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> secondPerson = Person.Find(<span class="number">2</span>);</span><br><span class="line">secondPerson.NumberOfDependents = <span class="number">0</span>;</span><br><span class="line">secondPerson.Update();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Get persons again&quot;</span>);</span><br><span class="line">people = FindPersons();</span><br><span class="line">PrintPerson(people);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">FindPersons</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;Person&gt; result = <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> conn = DbManager.CreateConnection();</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="keyword">using</span> IDbCommand comm = <span class="keyword">new</span> SQLiteCommand(FindAllPersonsStatementString, conn);</span><br><span class="line"><span class="keyword">using</span> IDataReader reader = comm.ExecuteReader();</span><br><span class="line"><span class="keyword">while</span> (reader.Read())</span><br><span class="line">&#123;</span><br><span class="line">result.Add(Person.Load(reader));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintPerson</span>(<span class="params">IEnumerable&lt;Person&gt; people</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> person <span class="keyword">in</span> people)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;ID: <span class="subst">&#123;person.Id&#125;</span>, &quot;</span> +</span><br><span class="line">  <span class="string">$&quot;last name: <span class="subst">&#123;person.LastName&#125;</span>, &quot;</span> +</span><br><span class="line">  <span class="string">$&quot;first name: <span class="subst">&#123;person.FirstName&#125;</span>, &quot;</span> +</span><br><span class="line">  <span class="string">$&quot;number of dependents: <span class="subst">&#123;person.NumberOfDependents&#125;</span>, &quot;</span> +</span><br><span class="line">  <span class="string">$&quot;exemption: <span class="subst">&#123;person.GetExemption().Amount&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = DbManager.CreateConnection())</span><br><span class="line">&#123;</span><br><span class="line">connection.Open();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> command = connection.CreateCommand())</span><br><span class="line">&#123;</span><br><span class="line">command.CommandText =</span><br><span class="line"><span class="string">@&quot;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS person;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">command.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">command.CommandText =</span><br><span class="line"><span class="string">@&quot;</span></span><br><span class="line"><span class="string">CREATE TABLE person (Id int primary key, lastname TEXT, firstname TEXT, numberOfDependents int);</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">command.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line">command.CommandText =</span><br><span class="line"><span class="string">@&quot;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">INSERT INTO person</span></span><br><span class="line"><span class="string">VALUES (1, &#x27;Sean&#x27;, &#x27;Reid&#x27;, 5);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INSERT INTO person</span></span><br><span class="line"><span class="string">VALUES (2, &#x27;Madeleine&#x27;, &#x27;Lyman&#x27;, 13);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INSERT INTO person</span></span><br><span class="line"><span class="string">VALUES (3, &#x27;Oliver&#x27;, &#x27;Wright&#x27;, 66);</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">command.ExecuteNonQuery();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-7.png" alt="active record result"></a></p>
<h3 id="3-Conclusions-for-Active-Record"><a href="#3-Conclusions-for-Active-Record" class="headerlink" title="3. Conclusions for Active Record"></a>3. Conclusions for Active Record</h3><p>This pattern is a advanced version of Row Data Gateway. The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_ActiveRecord">Github Repository</a>.</p>
<p>For next article I will write <strong>D</strong>ata Mapper pattern according to <strong>Chapter 10 Data Source Architectural Pattern - Data Mapper</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/3gV8eak">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Data Mapper Pattern</title>
    <url>/2021/07/08/poeaa-data-source-architectural-pattern-data-mapper/</url>
    <content><![CDATA[<h3 id="1-What-is-Data-Mapper"><a href="#1-What-is-Data-Mapper" class="headerlink" title="1. What is Data Mapper"></a>1. What is Data Mapper</h3><p>According to [PoEAA], this definition is “A layer of Mappers that moves data between objects and a database while keeping them independent of each other and the mapper itself.”</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-3.png"></a></p>
<p>Figure 1. Data Mapper (From <a href="https://martinfowler.com/eaaCatalog/index.html">PoEAA Page</a>)</p>
<h4 id="1-1-How-it-works"><a href="#1-1-How-it-works" class="headerlink" title="1.1 How it works"></a>1.1 How it works</h4><p><strong>Separating Domain from Data Source is the main ability.</strong> Figure 2 shows that a client uses a person mapper’s Find function to get a person instance from database. This mapper uses an <strong>Identity Map</strong> to check if the person instance is loaded or not. If it’s not loaded, then loads it to the map.   Figure 3 shows that a client uses mapper’s Update function and mapper reads the data from person instance to write data into database.  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/ReadData-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/ReadData-1.png" alt="Retrieving data from database data mapper"></a></p>
<p>Figure 2. Retrieving data from database</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/Update-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/Update-1.png" alt="Updating Data data mapper"></a></p>
<p>Figure 3. Updating Data</p>
<p>For finding function, there are 3 topics to discuss:</p>
<h5 id="1-1-1-Handling-Finders"><a href="#1-1-1-Handling-Finders" class="headerlink" title="1.1.1 Handling Finders"></a>1.1.1 Handling Finders</h5><p>Usually presentation layer uses mapper’s finding function to load objects from database. But sometimes domain layer needs to use mapper’s finding function. This situation can be avoided by using Lazy Load pattern.   Separating finding interfaces to domain namespace(package) for mapper’s implementation is a decoupling method.</p>
<h5 id="1-1-2-Mapping-Data-to-Domain-Fields"><a href="#1-1-2-Mapping-Data-to-Domain-Fields" class="headerlink" title="1.1.2 Mapping Data to Domain Fields"></a>1.1.2 Mapping Data to Domain Fields</h5><p>Mapper creating a rich constructor to create a domain object is a recommend method. Avoid directly setting fields&#x2F;properties of domain object. If two objects are referenced each other when mapper creates them by rich constructor, using Lazy Load is a method to solve it.  </p>
<h5 id="1-1-3-Metadata-Based-Mappings"><a href="#1-1-3-Metadata-Based-Mappings" class="headerlink" title="1.1.3 Metadata-Based Mappings"></a>1.1.3 Metadata-Based Mappings</h5><p>Metadata-Mapping pattern is a method that transfers domain object’s fields into database’s records. The metadata is saved in a class or a independent file. Using it can have no more source code&#x2F;code generation&#x2F;reflection programs.</p>
<h4 id="1-2-When-to-use-it"><a href="#1-2-When-to-use-it" class="headerlink" title="1.2 When to use it"></a>1.2 When to use it</h4><ol>
<li>Domain Model don’t understand database existence. Modifying domain objects or mappers is more efficient.</li>
<li>For more complex business logic.</li>
<li>If Domain Model is not used, Data Mapper is not required.</li>
</ol>
<h3 id="2-Pattern-Practice-The-Person-Management"><a href="#2-Pattern-Practice-The-Person-Management" class="headerlink" title="2. Pattern Practice: The Person Management"></a>2. Pattern Practice: The Person Management</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/06/20/poeaa-data-source-architectural-pattern-table-data-gateway/">[PoEAA] Data Source Architectural Pattern - Table Data Gateway</a>. This article uses Data Mapper to build the data source architectural layer.</p>
<h4 id="2-1-Implementation-by-C-SQLite"><a href="#2-1-Implementation-by-C-SQLite" class="headerlink" title="2.1 Implementation by C# &amp; SQLite"></a>2.1 Implementation by C# &amp; SQLite</h4><p>This pattern is implemented by C# based on the content of <strong>Chapter 10 Data Source Architectural Patterns - Data Mapper</strong> of PoEAA. The database is SQLite.</p>
<p>By Martin’s implementation, it doesn’t contain a Delete function in a data mapper. So this article also has no Delete function.</p>
<h5 id="2-1-1-Domain-Mapper-layers"><a href="#2-1-1-Domain-Mapper-layers" class="headerlink" title="2.1.1 Domain&#x2F;Mapper layers"></a>2.1.1 Domain&#x2F;Mapper layers</h5><p>Create Domain and Mapper these 2 layers to separate responsibilities. Figure 4 shows:  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/Architecture-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/Architecture-1.png" alt="Domain/Mapper layers data mapper"></a></p>
<p>Figure 4. Domain&#x2F;Mapper layers</p>
<p>Following sections explain what they work for.</p>
<h5 id="2-1-2-AbstractMapper-PersonMapper-classes"><a href="#2-1-2-AbstractMapper-PersonMapper-classes" class="headerlink" title="2.1.2 AbstractMapper&#x2F;PersonMapper classes"></a>2.1.2 AbstractMapper&#x2F;PersonMapper classes</h5><p>AbstractMapper class has common behaviors for concrete child Mapper classes. AbstractMapper has a <strong>Identity Map</strong>: Dictionary&lt;int, DomainObject&gt; LoadedMap. When loading is processing, mapper uses this map to check whether this domain object has been loaded or not. If not, then mapper loads it from database.   AbstractMapper’s DoLoad&#x2F;DoInsert are abstract methods. They are override by concrete child Mapper classes. PersonMapper implements these abstract methods and access Person domain objects from database.   For Update function, this is implemented by concrete Mapper instead of abstract method.   PersonMapper has implemented IPersonFinder interface. This interface is defined in Domain layer for responsibility.  </p>
<p>public abstract class AbstractMapper<br>{<br>protected Dictionary&lt;int, DomainObject&gt; LoadedMap &#x3D; new Dictionary&lt;int, DomainObject&gt;();<br>protected abstract string FindStatement();<br>protected abstract string InsertStatement();</p>
<p>protected abstract int FindNextDatabaseId();</p>
<p>protected DomainObject AbstractFind(int id)<br>{<br>bool findResult &#x3D; LoadedMap.TryGetValue(id, out DomainObject result);<br>if (findResult)<br>{<br>return result;<br>}</p>
<p>try<br>{<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(FindStatement(), conn);<br>comm.Parameters.Add(new SQLiteParameter(“$id”, id));<br>using IDataReader reader &#x3D; comm.ExecuteReader();<br>reader.Read();<br>result &#x3D; Load(reader);<br>return result;<br>}<br>catch (Exception ex)<br>{<br>throw new ApplicationException(ex.Message);<br>}<br>}</p>
<p>protected DomainObject Load(IDataReader reader)<br>{<br>object[] resultSet &#x3D; new object[reader.FieldCount];<br>reader.GetValues(resultSet);</p>
<p>int id &#x3D; (int)resultSet[0];<br>if (LoadedMap.ContainsKey(id))<br>{<br>return LoadedMap[id];<br>}</p>
<p>DomainObject result &#x3D; DoLoad(id, reader);<br>LoadedMap.Add(id, result);<br>return result;<br>}</p>
<p>protected List&lt;DomainObject&gt; LoadAll(IDataReader reader)<br>{<br>List&lt;DomainObject&gt; result &#x3D; new List&lt;DomainObject&gt;();<br>while (reader.Read())<br>{<br>result.Add(Load(reader));<br>}</p>
<p>return result;<br>}</p>
<p>protected abstract DomainObject DoLoad(int id, IDataReader reader);</p>
<p>public int Insert(DomainObject subject)<br>{<br>try<br>{<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(InsertStatement(), conn);<br>subject.Id &#x3D; FindNextDatabaseId();<br>var parameter &#x3D; comm.CreateParameter();<br>parameter.DbType &#x3D; DbType.Int32;<br>parameter.Value &#x3D; subject.Id;<br>comm.Parameters.Add(parameter);<br>DoInsert(subject, comm);<br>comm.ExecuteNonQuery();<br>LoadedMap.Add(subject.Id, subject);<br>return subject.Id;<br>}<br>catch (Exception ex)<br>{<br>throw new ApplicationException(ex.Message);<br>}</p>
<p>}</p>
<p>protected abstract void DoInsert(DomainObject subject, IDbCommand insertStatement);</p>
<p>public List&lt;DomainObject&gt; FindMany(IStatementSource source)<br>{<br>try<br>{<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(source.Sql, conn);<br>foreach (var p in source.Parameters)<br>{<br>var parameter &#x3D; comm.CreateParameter();<br>parameter.DbType &#x3D; DbType.Object;<br>parameter.Value &#x3D; p;<br>comm.Parameters.Add(parameter);<br>}<br>using IDataReader reader &#x3D; comm.ExecuteReader();<br>return LoadAll(reader);<br>}<br>catch (Exception ex)<br>{<br>throw new ApplicationException(ex.Message);<br>}<br>}</p>
<p>}</p>
<p>public class PersonMapper : AbstractMapper, IPersonFinder<br>{<br>private const string Columns &#x3D; “ id, lastname, firstname, numberOfDependents “;</p>
<p>private const string UpdateStatementString &#x3D;<br>“UPDATE person SET lastname &#x3D; ?, firstname &#x3D; ?, numberOfDependents &#x3D; ? WHERE id &#x3D; ?”;<br>protected override string FindStatement()<br>{<br>return “SELECT “ + Columns + “ FROM person WHERE id &#x3D; $id”;<br>}</p>
<p>protected override string InsertStatement()<br>{<br>return “INSERT INTO person VALUES (?, ?, ?, ?)”;<br>}</p>
<p>protected override int FindNextDatabaseId()<br>{<br>string sql &#x3D; “SELECT max(id) as curId from person”;<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>using IDataReader reader &#x3D; comm.ExecuteReader();<br>bool hasResult &#x3D; reader.Read();<br>if (hasResult)<br>{<br>return ((int)((long)reader[“curId”] + 1));<br>}<br>else<br>{<br>return 1;<br>}<br>}</p>
<p>protected override DomainObject DoLoad(int id, IDataReader reader)<br>{<br>object[] resultSet &#x3D; new object[reader.FieldCount];<br>reader.GetValues(resultSet);<br>string lastName &#x3D; resultSet[1].ToString();<br>string firstName &#x3D; resultSet[2].ToString();<br>int numberOfDependents &#x3D; (int)resultSet[3];<br>return new Person(id, lastName, firstName, numberOfDependents);<br>}</p>
<p>protected override void DoInsert(DomainObject subject, IDbCommand insertStatement)<br>{<br>Person person &#x3D; (Person) subject;<br>var p1 &#x3D; insertStatement.CreateParameter();<br>p1.DbType &#x3D; DbType.String;<br>p1.Value &#x3D; person.LastName;</p>
<p>var p2 &#x3D; insertStatement.CreateParameter();<br>p2.DbType &#x3D; DbType.String;<br>p2.Value &#x3D; person.FirstName;</p>
<p>var p3 &#x3D; insertStatement.CreateParameter();<br>p3.DbType &#x3D; DbType.Int32;<br>p3.Value &#x3D; person.NumberOfDependents;<br>insertStatement.Parameters.Add(p1);<br>insertStatement.Parameters.Add(p2);<br>insertStatement.Parameters.Add(p3);<br>}</p>
<p>public Person Find(int id)<br>{<br>return (Person) AbstractFind(id);<br>}</p>
<p>public IList&lt;Person&gt; FindByLastName2(string pattern)<br>{<br>return FindMany(new FindByLastName(pattern))<br>.Cast&lt;Person&gt;().ToList();<br>}</p>
<p>public IList&lt;Person&gt; FinAll()<br>{<br>return FindMany(new FindAllStatement())<br>.Cast&lt;Person&gt;().ToList();<br>}</p>
<p>public void Update(Person subject)<br>{<br>try<br>{<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(UpdateStatementString, conn);<br>var p1 &#x3D; comm.CreateParameter();<br>p1.DbType &#x3D; DbType.String;<br>p1.Value &#x3D; subject.LastName;</p>
<p>var p2 &#x3D; comm.CreateParameter();<br>p2.DbType &#x3D; DbType.String;<br>p2.Value &#x3D; subject.FirstName;</p>
<p>var p3 &#x3D; comm.CreateParameter();<br>p3.DbType &#x3D; DbType.Int32;<br>p3.Value &#x3D; subject.NumberOfDependents;</p>
<p>var p4 &#x3D; comm.CreateParameter();<br>p4.DbType &#x3D; DbType.Int32;<br>p4.Value &#x3D; subject.Id;</p>
<p>comm.Parameters.Add(p1);<br>comm.Parameters.Add(p2);<br>comm.Parameters.Add(p3);<br>comm.Parameters.Add(p4);</p>
<p>comm.ExecuteNonQuery();<br>}<br>catch (Exception ex)<br>{<br>throw new ApplicationException(ex.Message);<br>}<br>}</p>
<p>private class FindByLastName : IStatementSource<br>{<br>private readonly string _lastName;</p>
<p>public string Sql { get; } &#x3D;<br>“SELECT “ + Columns + “ FROM person WHERE UPPER(lastname) like UPPER(?) ORDER BY lastName”;</p>
<p>public object[] Parameters<br>{<br>get<br>{<br>return new object[] {_lastName};<br>}<br>}</p>
<p>public FindByLastName(string lastName)<br>{<br>_lastName &#x3D; lastName;<br>}<br>}</p>
<p>private class FindAllStatement : IStatementSource<br>{<br>private readonly string _lastName;</p>
<p>public string Sql { get; } &#x3D;<br>“SELECT * FROM person”;</p>
<p>public object[] Parameters<br>{<br>get<br>{<br>return new object[] {};<br>}<br>}<br>}<br>}</p>
<h5 id="2-1-3-IStatementSource-interface"><a href="#2-1-3-IStatementSource-interface" class="headerlink" title="2.1.3 IStatementSource interface"></a>2.1.3 IStatementSource interface</h5><p>This interface packs SQL string and SQL parameters for FindMany method.  </p>
<p>public interface IStatementSource<br>{<br>    string Sql { get; }<br>    object[] Parameters { get; }<br>}</p>
<h5 id="2-1-4-DomainObject-Person-classes-and-IPersonFinder-interface"><a href="#2-1-4-DomainObject-Person-classes-and-IPersonFinder-interface" class="headerlink" title="2.1.4 DomainObject&#x2F;Person classes and IPersonFinder interface"></a>2.1.4 DomainObject&#x2F;Person classes and IPersonFinder interface</h5><p>Domain Model’s super class is DomainObject. For this person management case, Person class is the main Domain Model to perform business logic.   IPersonFinder interface associates with Person class and provides Find methods.</p>
<p>public abstract class DomainObject<br>{<br>public int Id { get; set; }<br>}</p>
<p>public class Person : DomainObject<br>{<br>public string LastName { get; }<br>public string FirstName { get; }<br>public int NumberOfDependents { get; }<br>public Person(int id, string lastName, string firstName, int numberOfDependents)<br>{<br>Id &#x3D; id;<br>LastName &#x3D; lastName;<br>FirstName &#x3D; firstName;<br>NumberOfDependents &#x3D; numberOfDependents;<br>}</p>
<p>public Money GetExemption()<br>{<br>Money baseExemption &#x3D; Money.Dollars(1500d);<br>Money dependentExemption &#x3D; Money.Dollars(750d);<br>return baseExemption.Add(dependentExemption.Multiply((double)NumberOfDependents));<br>}<br>}</p>
<p>public interface IPersonFinder<br>{<br>IList&lt;Person&gt; FinAll();<br>Person Find(int id);<br>IList&lt;Person&gt; FindByLastName2(string pattern);<br>}</p>
<h4 id="2-2-Demo"><a href="#2-2-Demo" class="headerlink" title="2.2 Demo"></a>2.2 Demo</h4><p>Create a console program and create 3 Persons in SQLite as the following code:</p>
<p>class Program<br>{<br>static void Main(string[] args)<br>{<br>InitializeData();</p>
<p>Console.WriteLine(“Get persons”);<br>PersonMapper mapper &#x3D; new PersonMapper();<br>&#x2F;&#x2F; get all persons<br>var people &#x3D; mapper.FinAll();<br>PrintPerson(people);</p>
<p>Console.WriteLine(“Insert a new person”);<br>mapper.Insert(new Person(0, “Rose”, “Jackson”, 60));<br>people &#x3D; mapper.FinAll();<br>PrintPerson(people);</p>
<p>Console.WriteLine(“Update a person’s first name”);<br>var firstPerson &#x3D; mapper.Find(1);<br>firstPerson.FirstName &#x3D; “Jack”;<br>mapper.Update(firstPerson);</p>
<p>Console.WriteLine(“Update a person’s number of dependents”);<br>var secondPerson &#x3D; mapper.Find(2);<br>secondPerson.NumberOfDependents &#x3D; 0;<br>mapper.Update(secondPerson);</p>
<p>Console.WriteLine(“Get persons again”);<br>people &#x3D; mapper.FinAll();<br>PrintPerson(people);</p>
<p>Console.WriteLine(“Get persons with lastname containing n”);<br>people &#x3D; mapper.FindByLastName2(“%n%”);<br>PrintPerson(people);<br>}</p>
<p>private static void PrintPerson(IEnumerable&lt;Person&gt; people)<br>{<br>foreach (var person in people)<br>{<br>Console.WriteLine($”ID: {person.Id}, “ +<br>  $”last name: {person.LastName}, “ +<br>  $”first name: {person.FirstName}, “ +<br>  $”number of dependents: {person.NumberOfDependents}, “ +<br>  $”exemption: {person.GetExemption().Amount}”);<br>}<br>}</p>
<p>private static void InitializeData()<br>{<br>using (var connection &#x3D; DbManager.CreateConnection())<br>{<br>connection.Open();</p>
<p>using (var command &#x3D; connection.CreateCommand())<br>{<br>command.CommandText &#x3D;<br>@”<br>DROP TABLE IF EXISTS person;<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”<br>CREATE TABLE person (Id int primary key, lastname TEXT, firstname TEXT, numberOfDependents int);<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”</p>
<p>INSERT INTO person<br>VALUES (1, ‘Sean’, ‘Reid’, 5);</p>
<p>INSERT INTO person<br>VALUES (2, ‘Madeleine’, ‘Lyman’, 13);</p>
<p>INSERT INTO person<br>VALUES (3, ‘Oliver’, ‘Wright’, 66);<br>“;<br>command.ExecuteNonQuery();<br>}</p>
<p>}<br>}<br>}</p>
<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/image-4.png" alt="data mapper result"></a></p>
<h3 id="3-Conclusions-for-Data-Mapper"><a href="#3-Conclusions-for-Data-Mapper" class="headerlink" title="3. Conclusions for Data Mapper"></a>3. Conclusions for Data Mapper</h3><p>I very like “Data Mapper” pattern because of decoupling between Domain Model and Data Source. For testings and maintenance, these works are easier than other data source patterns. The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_DataMapper">Github Repository</a>.</p>
<p>For next article I will write <strong>Unit of Work</strong> pattern according to <strong>Chapter 11 Object-Relational Behavioral Patterns - Unit of Work</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Row Data Gateway Pattern</title>
    <url>/2021/06/23/poeaa-data-source-architectural-pattern-row-data-gateway/</url>
    <content><![CDATA[<h3 id="1-What-is-Row-Data-Gateway"><a href="#1-What-is-Row-Data-Gateway" class="headerlink" title="1. What is Row Data Gateway"></a>1. What is Row Data Gateway</h3><p>According to [PoEAA], Row Data Gateway definition is “An object that acts as a Gateway to a single record in a data source. There is one instance per row.”</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-8.png"></a></p>
<p>Figure 1. Row Data Gateway (From <a href="https://www.martinfowler.com/eaaCatalog/rowDataGateway.html">PoEAA Page</a>)</p>
<h4 id="1-1-How-it-works"><a href="#1-1-How-it-works" class="headerlink" title="1.1 How it works"></a>1.1 How it works</h4><p>In a gateway, the property&#x2F;field is mapped to a record’s attribute. For finding function, there are Finder  Class and Gateway Class to retrieve a table’s records. As the following sequence diagram shows:  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/rowdatagateway_with_finder-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/rowdatagateway_with_finder-1.png"></a></p>
<p>Figure 2. Interactions for a find with a row-based Row Data Gateway.</p>
<h4 id="1-2-When-to-use-it"><a href="#1-2-When-to-use-it" class="headerlink" title="1.2 When to use it"></a>1.2 When to use it</h4><ol>
<li>Consider whether the architecture needs a gateway and what gateway to use (Table&#x2F;Row Data Gateway).</li>
<li>Transaction Script pattern fits this pattern.</li>
<li>Domain Model pattern is not recommended to use this pattern.</li>
<li>When use Transaction Script and this pattern and the application becomes more complex, this pattern will evolve into an Active Record.</li>
<li>This pattern can combine with Data Mapper when gateway is generated by Metadata Mapping</li>
</ol>
<h3 id="2-Pattern-Practice-The-Person-Management"><a href="#2-Pattern-Practice-The-Person-Management" class="headerlink" title="2. Pattern Practice: The Person Management"></a>2. Pattern Practice: The Person Management</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/06/20/poeaa-data-source-architectural-pattern-table-data-gateway/">[PoEAA] Data Source Architectural Pattern - Table Data Gateway</a>. This article uses this pattern to build the data source architectural layer.</p>
<h4 id="2-1-Implementation-by-C-SQLite"><a href="#2-1-Implementation-by-C-SQLite" class="headerlink" title="2.1 Implementation by C# &amp; SQLite"></a>2.1 Implementation by C# &amp; SQLite</h4><p>This pattern is implemented by C# based on the content of <strong>Chapter 10 Data Source Architectural Patterns - Row Data Gateway</strong> of PoEAA. The database is SQLite.</p>
<p>By Martin’s implementation, it doesn’t contain a Delete function in a gateway. So this article also has no Delete function.</p>
<h5 id="2-1-1-PersonGateway"><a href="#2-1-1-PersonGateway" class="headerlink" title="2.1.1 PersonGateway"></a>2.1.1 PersonGateway</h5><p>This gateway creates Insert&#x2F;Update basic functions to manipulate person table. One static Load function is used by Finder Class.  </p>
<p>class PersonGateway: BaseGateway {<br>  public PersonGateway(int id, string lastName, string firstName, int numberOfDependents) {<br>    Id &#x3D; id;<br>    LastName &#x3D; lastName;<br>    FirstName &#x3D; firstName;<br>    NumberOfDependents &#x3D; numberOfDependents;<br>  }<br>  private<br>  const string UpdateStatementString &#x3D; @ “UPDATE person SET lastname &#x3D; $lastname, firstname &#x3D; $firstname, numberOfDependents &#x3D; $numberOfDependentswhere id &#x3D; $id”;<br>  private<br>  const string InsertStatementString &#x3D; @ “INSERT INTO person VALUES ($id, $lastname, $firstname, $numberOfDependents)”;<br>  public string LastName {<br>    get;<br>    set;<br>  }<br>  public string FirstName {<br>    get;<br>    set;<br>  }<br>  public int NumberOfDependents {<br>    get;<br>    set;<br>  }<br>  public static PersonGateway Load(IDataReader reader) {<br>    object[] resultSet &#x3D; new object[reader.FieldCount];<br>    reader.GetValues(resultSet);<br>    int id &#x3D; (int) resultSet[0];<br>    PersonGateway result &#x3D; Registry.GetPerson(id);<br>    if (result !&#x3D; null) {<br>      return result;<br>    }<br>    string lastName &#x3D; resultSet[1].ToString();<br>    string firstName &#x3D; resultSet[2].ToString();<br>    int numberOfDependents &#x3D; (int) resultSet[3];<br>    result &#x3D; new PersonGateway(id, lastName, firstName, numberOfDependents);<br>    Registry.AddPerson(result);<br>    return result;<br>  }<br>  public void Update() {<br>    try {<br>      using<br>      var conn &#x3D; DbManager.CreateConnection();<br>      conn.Open();<br>      using IDbCommand comm &#x3D; new SQLiteCommand(UpdateStatementString, conn);<br>      comm.Parameters.Add(new SQLiteParameter(“$lastname”, LastName));<br>      comm.Parameters.Add(new SQLiteParameter(“$firstname”, FirstName));<br>      comm.Parameters.Add(new SQLiteParameter(“$numberOfDependents”, NumberOfDependents));<br>      comm.Parameters.Add(new SQLiteParameter(“$id”, Id));<br>      comm.ExecuteNonQuery();<br>    } catch (Exception ex) {<br>      throw new ApplicationException(ex.Message);<br>    }<br>  }<br>  public int Insert() {<br>    try {<br>      using<br>      var conn &#x3D; DbManager.CreateConnection();<br>      conn.Open();<br>      using IDbCommand comm &#x3D; new SQLiteCommand(InsertStatementString, conn);<br>      Id &#x3D; FindNextDatabaseId();<br>      comm.Parameters.Add(new SQLiteParameter(“$id”, Id));<br>      comm.Parameters.Add(new SQLiteParameter(“$lastname”, LastName));<br>      comm.Parameters.Add(new SQLiteParameter(“$firstname”, FirstName));<br>      comm.Parameters.Add(new SQLiteParameter(“$numberOfDependents”, NumberOfDependents));<br>      comm.ExecuteNonQuery();<br>      Registry.AddPerson(this);<br>      return Id;<br>    } catch (Exception ex) {<br>      throw new ApplicationException(ex.Message);<br>    }<br>  }<br>  private int FindNextDatabaseId() {<br>    string sql &#x3D; “SELECT max(id) as curId from person”;<br>    using<br>    var conn &#x3D; DbManager.CreateConnection();<br>    conn.Open();<br>    using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>    using IDataReader reader &#x3D; comm.ExecuteReader();<br>    bool hasResult &#x3D; reader.Read();<br>    if (hasResult) {<br>      return ((int)((long) reader[“curId”] + 1));<br>    } else {<br>      return 1;<br>    }<br>  }<br>}<br>internal class BaseGateway {<br>  public int Id {<br>    get;<br>    set;<br>  }<br>  public BaseGateway() {}<br>}</p>
<h5 id="2-1-2-PersonFinder"><a href="#2-1-2-PersonFinder" class="headerlink" title="2.1.2 PersonFinder"></a>2.1.2 PersonFinder</h5><p>This finder class queries single&#x2F;multiple record(s) with PersonGateway.  </p>
<p>class PersonFinder {<br>  private<br>  const string FindStatementString &#x3D; @ “SELECT id, lastname, firstname, numberOfDependentsfrom personWHERE id &#x3D; $id”;<br>  private<br>  const string FindResponsibleStatementString &#x3D; @ “SELECT id, lastname, firstname, numberOfDependentsfrom personWHERE numberOfDependents &gt; 0”;<br>  public PersonGateway Find(int id) {<br>    PersonGateway result &#x3D; Registry.GetPerson(id);<br>    if (result !&#x3D; null) {<br>      return result;<br>    }<br>    try {<br>      using<br>      var conn &#x3D; DbManager.CreateConnection();<br>      conn.Open();<br>      using IDbCommand comm &#x3D; new SQLiteCommand(FindStatementString, conn);<br>      comm.Parameters.Add(new SQLiteParameter(“$id”, id));<br>      using IDataReader reader &#x3D; comm.ExecuteReader();<br>      reader.Read();<br>      result &#x3D; PersonGateway.Load(reader);<br>      return result;<br>    } catch (Exception ex) {<br>      throw new ApplicationException(ex.Message);<br>    }<br>  }<br>  public List<PersonGateway> FindResponsibles() {<br>    List<PersonGateway> result &#x3D; new List<PersonGateway>();<br>    try {<br>      using<br>      var conn &#x3D; DbManager.CreateConnection();<br>      conn.Open();<br>      using IDbCommand comm &#x3D; new SQLiteCommand(FindResponsibleStatementString, conn);<br>      using IDataReader reader &#x3D; comm.ExecuteReader();<br>      while (reader.Read()) {<br>        result.Add(PersonGateway.Load(reader));<br>      }<br>      return result;<br>    } catch (Exception ex) {<br>      throw new ApplicationException(ex.Message);<br>    }<br>  }<br>}</p>
<h5 id="2-1-3-Registry"><a href="#2-1-3-Registry" class="headerlink" title="2.1.3 Registry"></a>2.1.3 Registry</h5><p>The above finder&#x2F;gateway classes have used a Registry. This Registry pattern holds a kind of dictionary that keeps one key mapped to a instance. In this article the Registry has a &lt;id, PersonGateway&gt; dictionary for finding&#x2F;insertion functions. When insertion completes, Registry adds this Person; When finding is called, it first checks the Registry whether has the Person. If the Person exists, return it. Otherwise it queries Person from the database and stores it in Registry.  </p>
<p>internal class Registry {<br>  private static readonly Registry Instance &#x3D; new Registry();<br>  private readonly Dictionary&lt;int, PersonGateway&gt; _personsMap &#x3D; new Dictionary&lt;int, PersonGateway&gt;();<br>  private Registry() {}<br>  public static void AddPerson(PersonGateway personGateway) {<br>    Instance._personsMap.Add(personGateway.Id, personGateway);<br>  }<br>  public static PersonGateway GetPerson(int id) {<br>    if (Instance._personsMap.ContainsKey(id)) {<br>      return Instance._personsMap[id];<br>    }<br>    return null;<br>  }<br>}</p>
<h4 id="2-2-Demo"><a href="#2-2-Demo" class="headerlink" title="2.2 Demo"></a>2.2 Demo</h4><p>Create a console program and create 3 Persons in SQLite as the following code:</p>
<p>class Program {<br>  static void Main(string[] args) {<br>    InitializeData();<br>    Console.WriteLine(“Get responsible persons”);<br>    PersonFinder finder &#x3D; new PersonFinder();<br>    var people &#x3D; finder.FindResponsibles();<br>    PrintPersonGateway(people);<br>    Console.WriteLine(“Insert a new person”);<br>    new PersonGateway(0, “Rose”, “Jackson”, 60).Insert();<br>    people &#x3D; finder.FindResponsibles();<br>    PrintPersonGateway(people);<br>    Console.WriteLine(“Update a person’s first name”);<br>    var firstPerson &#x3D; finder.Find(1);<br>    firstPerson.FirstName &#x3D; “Jack”;<br>    firstPerson.Update();<br>    Console.WriteLine(“Update a person’s number of dependents”);<br>    var secondPerson &#x3D; finder.Find(2);<br>    secondPerson.NumberOfDependents &#x3D; 0;<br>    secondPerson.Update();<br>    Console.WriteLine(“Get responsible persons again”);<br>    people &#x3D; finder.FindResponsibles();<br>    PrintPersonGateway(people);<br>  }<br>  private static void PrintPersonGateway(IEnumerable<PersonGateway> people) {<br>    foreach(var person in people) {<br>      Console.WriteLine($”ID: {person.Id}, last name: {person.LastName}, first name: {person.FirstName}, number of dependents: {person.NumberOfDependents}”);<br>    }<br>  }<br>  private static void InitializeData() {<br>    using(var connection &#x3D; DbManager.CreateConnection()) {<br>      connection.Open();<br>      using(var command &#x3D; connection.CreateCommand()) {<br>        command.CommandText &#x3D; @ “DROP TABLE IF EXISTS person;”;<br>        command.ExecuteNonQuery();<br>        command.CommandText &#x3D; @ “CREATE TABLE person (Id int primary key, lastname TEXT, firstname TEXT, numberOfDependents int);”;<br>        command.ExecuteNonQuery();<br>        command.CommandText &#x3D; @ “   INSERT INTO personVALUES (1, ‘Sean’, ‘Reid’, 5);INSERT INTO personVALUES (2, ‘Madeleine’, ‘Lyman’, 13);INSERT INTO personVALUES (3, ‘Oliver’, ‘Wright’, 66);”;<br>        command.ExecuteNonQuery();<br>      }<br>    }<br>  }<br>}</p>
<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-9.png" alt="Row Data Gateway result"></a></p>
<h3 id="3-Conclusions-for-Row-Data-Gateway"><a href="#3-Conclusions-for-Row-Data-Gateway" class="headerlink" title="3. Conclusions for Row Data Gateway"></a>3. Conclusions for Row Data Gateway</h3><p>This pattern is also a simpler data source architectural pattern. I think of it as a fine-grained version of Table Data Gateway. The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_RowDataGateway">Github Repository</a>.</p>
<p>For next article I will write <strong>Active Record</strong> pattern according to <strong>Chapter 10 Data Source Architectural Pattern - Active Record Gateway</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Table Data Gateway Pattern</title>
    <url>/2021/06/20/poeaa-data-source-architectural-pattern-table-data-gateway/</url>
    <content><![CDATA[<h3 id="1-What-is-Table-Data-Gateway"><a href="#1-What-is-Table-Data-Gateway" class="headerlink" title="1. What is Table Data Gateway"></a>1. What is Table Data Gateway</h3><p>According to [PoEAA], Table Data Gateway definition is “An object that acts as a Gateway to a database table. One instance handles all the rows in the table.”</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-2.png"><img src="https://www.martinfowler.com/eaaCatalog/dbgateTable.gif" alt="Table Data Gateway"></a></p>
<p>Figure 1. Table Data Gateway (From <a href="https://www.martinfowler.com/eaaCatalog/tableDataGateway.html">PoEAA Page</a>)</p>
<h4 id="1-1-How-it-works"><a href="#1-1-How-it-works" class="headerlink" title="1.1 How it works"></a>1.1 How it works</h4><p>Every function provided by a gateway maps a SQL query to the database. The functions are usually finding&#x2F;updating&#x2F;deleting.     </p>
<h4 id="1-2-When-to-use-it"><a href="#1-2-When-to-use-it" class="headerlink" title="1.2 When to use it"></a>1.2 When to use it</h4><ol>
<li>It does not usually work with Domain Model pattern. Domain Model pattern fits Data Mapper pattern.</li>
<li>Table Module pattern very fits this pattern.</li>
<li>It fits Transaction Script pattern.</li>
<li>It hides the table schema and provides functions that are implemented by SQL Queries or Stored Procedures.</li>
</ol>
<h3 id="2-Pattern-Practice-The-Person-Management"><a href="#2-Pattern-Practice-The-Person-Management" class="headerlink" title="2. Pattern Practice: The Person Management"></a>2. Pattern Practice: The Person Management</h3><p>As Figure 1 shows, there is a person table that has a primary key id and 3 attributes (lastName, firstName and numberOfDependents).</p>
<h4 id="2-1-Implementation-by-C-SQLite"><a href="#2-1-Implementation-by-C-SQLite" class="headerlink" title="2.1 Implementation by C# &amp; SQLite"></a>2.1 Implementation by C# &amp; SQLite</h4><p>This pattern is implemented by C# based on the content of <strong>Chapter 10 Data Source Architectural Patterns - Table Data Gateway</strong> of PoEAA. The database is SQLite.</p>
<p>By Martin’s implementation, it contains ADO.NET Reader version and ADO.NET DataSet version. The following sections show both versions.</p>
<h4 id="2-2-ADO-NET-Reader-Version"><a href="#2-2-ADO-NET-Reader-Version" class="headerlink" title="2.2 ADO.NET Reader Version"></a>2.2 ADO.NET Reader Version</h4><h5 id="2-2-1-PersonGateway"><a href="#2-2-1-PersonGateway" class="headerlink" title="2.2.1 PersonGateway"></a>2.2.1 PersonGateway</h5><p>This gateway creates Find&#x2F;Insert&#x2F;Update&#x2F;Delete basic functions to manipulate person table.  </p>
<p>class PersonGateway<br>{<br>public IDataReader FindAll()<br>{<br>string sql &#x3D; “select * from person”;<br>var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>return new SQLiteCommand(sql, conn).ExecuteReader();<br>}</p>
<p>public IDataReader FindWithLastName(string lastName)<br>{<br>string sql &#x3D; “select * from person where lastname &#x3D; $lastname”;<br>var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>comm.Parameters.Add(new SQLiteParameter(“$lastname”, lastName));</p>
<p>return comm.ExecuteReader();<br>}</p>
<p>public IDataReader FindWhere(string whereClause)<br>{<br>string sql &#x3D; $”select * from person where {whereClause}”;<br>var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>return new SQLiteCommand(sql, conn).ExecuteReader();<br>}</p>
<p>public object[] FindRow(long key)<br>{<br>string sql &#x3D; “select * from person where id &#x3D; $id”;<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>comm.Parameters.Add(new SQLiteParameter(“$id”, key));<br>using IDataReader reader &#x3D; comm.ExecuteReader();<br>reader.Read();<br>object[] result &#x3D; new object[reader.FieldCount];<br>reader.GetValues(result);<br>return result;<br>}</p>
<p>public void Update(long key, string lastName, string firstName, int numberOfDependents)<br>{<br>string sql &#x3D;<br>@”Update person SET lastname &#x3D; $lastname, firstname &#x3D; $firstname, numberOfDependents &#x3D; $numberOfDependents<br>WHERE id &#x3D; $id”;<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>comm.Parameters.Add(new SQLiteParameter(“$lastname”, lastName));<br>comm.Parameters.Add(new SQLiteParameter(“$firstname”, firstName));<br>comm.Parameters.Add(new SQLiteParameter(“$numberOfDependents”, numberOfDependents));<br>comm.Parameters.Add(new SQLiteParameter(“$id”, key));<br>comm.ExecuteNonQuery();<br>}</p>
<p>public long Insert(string lastName, string firstName, int numberOfDependents)<br>{<br>string sql &#x3D;<br>@”INSERT INTO person VALUES ($id, $lastname, $firstname, $numberOfDependents)”;<br>long key &#x3D; GetNextId();<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>comm.Parameters.Add(new SQLiteParameter(“$id”, key));<br>comm.Parameters.Add(new SQLiteParameter(“$lastname”, lastName));<br>comm.Parameters.Add(new SQLiteParameter(“$firstname”, firstName));<br>comm.Parameters.Add(new SQLiteParameter(“$numberOfDependents”, numberOfDependents));<br>comm.ExecuteNonQuery();<br>return key;<br>}</p>
<p>public void Delete(long key)<br>{<br>string sql &#x3D; “DELETE FROM person WHERE id &#x3D; $id”;<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>comm.Parameters.Add(new SQLiteParameter(“$id”, key));<br>comm.ExecuteNonQuery();<br>}</p>
<p>private long GetNextId()<br>{<br>string sql &#x3D; “SELECT max(id) as curId from person”;<br>using var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>using IDbCommand comm &#x3D; new SQLiteCommand(sql, conn);<br>using IDataReader reader &#x3D; comm.ExecuteReader();<br>bool hasResult &#x3D; reader.Read();<br>if (hasResult)<br>{<br>return ((long)reader[“curId”] + 1);<br>}<br>else<br>{<br>return 1;<br>}<br>}<br>}</p>
<h4 id="2-3-ADO-NET-DataSet-Version"><a href="#2-3-ADO-NET-DataSet-Version" class="headerlink" title="2.3 ADO.NET DataSet Version"></a>2.3 ADO.NET DataSet Version</h4><p>Use a DataSetHolder class to hold a DataSet and a DataAdapter for a DataGateway. This definition is for generality as the following Figure 2 shows.  </p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2021/11/TableDataGateway.png" alt="Table Data Gateway data-set-oriented class diagram"></p>
<p>Figure 2. Class diagram of data-set-oriented gateway and the supporting data holder</p>
<h5 id="2-3-1-DataSetHolder-class"><a href="#2-3-1-DataSetHolder-class" class="headerlink" title="2.3.1 DataSetHolder class"></a>2.3.1 DataSetHolder class</h5><p>This class holds a DataSet and a dictionary. The dictionary’s key is the table name, its value mapped to a DataAdapter instance.</p>
<p>class DataSetHolder<br>{<br>public DataSet Data &#x3D; new DataSet();<br>private readonly Dictionary&lt;string, SQLiteDataAdapter&gt; _dataAdapters &#x3D; new Dictionary&lt;string, SQLiteDataAdapter&gt;();</p>
<p>public void FillData(string query, string tableName)<br>{<br>if (_dataAdapters.ContainsKey(tableName))<br>{<br>throw new MultipleLoadException();<br>}</p>
<p>var conn &#x3D; DbManager.CreateConnection();<br>conn.Open();<br>SQLiteDataAdapter da &#x3D; new SQLiteDataAdapter(query, conn);<br>SQLiteCommandBuilder builder &#x3D; new SQLiteCommandBuilder(da);<br>da.Fill(Data, tableName);<br>_dataAdapters.Add(tableName, da);<br>}</p>
<p>public void Update()<br>{<br>foreach (string table in _dataAdapters.Keys)<br>{<br>(_dataAdapters[table]).Update(Data, table);<br>}<br>}</p>
<p>public DataTable this[string tableName] &#x3D;&gt; Data.Tables[tableName];<br>}</p>
<h5 id="2-3-2-DataGateway-PersonGateway"><a href="#2-3-2-DataGateway-PersonGateway" class="headerlink" title="2.3.2 DataGateway &amp; PersonGateway"></a>2.3.2 DataGateway &amp; PersonGateway</h5><p>DataGateway is the base class and provides the common functions to child classes. DataGateway exposes a DataSet and a DataTable to clients. The child PersonGateway implements the table name “person” and creates a new Insert function to add person record.</p>
<p>abstract class DataGateway<br>{<br>public abstract string TableName { get; }<br>public DataSetHolder Holder;</p>
<p>public DataSet Data &#x3D;&gt; Holder.Data;</p>
<p>public abstract DataTable Table { get; }</p>
<p>protected DataGateway()<br>{<br>Holder &#x3D; new DataSetHolder();<br>}</p>
<p>protected DataGateway(DataSetHolder holder)<br>{<br>this.Holder &#x3D; holder;<br>}</p>
<p>public void LoadAll()<br>{<br>string commandString &#x3D; $”select * from {TableName}”;<br>Holder.FillData(commandString, TableName);<br>}</p>
<p>public void LoadWhere(string whereClause)<br>{<br>string commandString &#x3D; $”select * from {TableName} where {whereClause}”;<br>Holder.FillData(commandString, TableName);<br>}<br>}</p>
<p>class PersonGateway : DataGateway<br>{<br>public override string TableName &#x3D;&gt; “person”;</p>
<p>public override DataTable Table &#x3D;&gt; Data.Tables[TableName];</p>
<p>public PersonGateway() : base()<br>{</p>
<p>}</p>
<p>public PersonGateway(DataSetHolder holder) : base(holder)<br>{</p>
<p>}</p>
<p>public DataRow this[long key]<br>{<br>get<br>{<br>string filter &#x3D; $”id &#x3D; {key}”;<br>return Table.Select(filter)[0];<br>}<br>}</p>
<p>public long Insert(string lastName, string firstName, int numberOfDependents)<br>{<br>long key &#x3D; GetNextId();<br>DataRow newRow &#x3D; Table.NewRow();<br>newRow[“id”] &#x3D; key;<br>newRow[“lastname”] &#x3D; lastName;<br>newRow[“firstname”] &#x3D; firstName;<br>newRow[“numberOfDependents”] &#x3D; numberOfDependents;<br>Table.Rows.Add(newRow);</p>
<p>return key;<br>}</p>
<p>private long GetNextId()<br>{<br>var result &#x3D; Table.Compute(“max([id])”, string.Empty);<br>if (result !&#x3D; System.DBNull.Value)<br>{<br>return ((int)result + 1);<br>}<br>else<br>{<br>return 1;<br>}<br>}<br>}</p>
<h4 id="2-4-Demo"><a href="#2-4-Demo" class="headerlink" title="2.4 Demo"></a>2.4 Demo</h4><p>Create a console program and create 3 Persons in SQLite, the person records:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-3.png" alt="Table Data Gateway Person Records"></a></p>
<p>Figure 3. Person Records</p>
<p>The program first executes Reader version functions and second executes DataSet version functions.</p>
<p>As the following code:</p>
<p>class Program<br>{<br>static void Main(string[] args)<br>{<br>RunReaderVersionExample();<br>RunDataTableVersionExample();<br>}</p>
<p>private static void RunDataTableVersionExample()<br>{<br>InitializeData();</p>
<p>Console.WriteLine(“Start RunDataTableVersionExample”);<br>Console.WriteLine(“Function: Get all persons”);<br>var gateway &#x3D; new DataTableVersion.PersonGateway();<br>gateway.LoadAll();<br>var allPersons &#x3D; gateway.Table.Rows;<br>PrintPersonsRowData(allPersons);</p>
<p>Console.WriteLine(“Function: Get person by id &#x3D; 2”);<br>var onePerson &#x3D; gateway[2];<br>PrintPersonRowData(onePerson);</p>
<p>Console.WriteLine(“Function: Update person by id &#x3D; 2”);<br>onePerson[“lastname”] &#x3D; “Jackson”;<br>onePerson[“firstname”] &#x3D; “Michael”;<br>onePerson[“numberOfDependents”] &#x3D; 100;<br>gateway.Holder.Update();<br>Console.WriteLine(“Function: Get person by id &#x3D; 2”);<br>var updatedPerson &#x3D; gateway[2];<br>PrintPersonRowData(updatedPerson);</p>
<p>Console.WriteLine(“Function: Insert a person”);<br>gateway.Insert(“Skinner”, “Neil”, 3);<br>gateway.Holder.Update();<br>Console.WriteLine(“Function: Get all persons”);<br>allPersons &#x3D; gateway.Table.Rows;<br>PrintPersonsRowData(allPersons);</p>
<p>Console.WriteLine(“Function: Get persons by numberOfDependents &gt; 10”);<br>gateway &#x3D; new DataTableVersion.PersonGateway();<br>gateway.LoadWhere(“numberOfDependents &gt; 10”);<br>var findPersons &#x3D; gateway.Table.Rows;<br>PrintPersonsRowData(findPersons);</p>
<p>Console.WriteLine(“Function: Delete person by id &#x3D; 1”);<br>gateway &#x3D; new DataTableVersion.PersonGateway();<br>gateway.LoadAll();<br>var deletedRow &#x3D; gateway[1];<br>deletedRow.Delete();<br>gateway.Holder.Update();</p>
<p>Console.WriteLine(“Function: Get all persons”);<br>allPersons &#x3D; gateway.Table.Rows;<br>PrintPersonsRowData(allPersons);</p>
<p>Console.WriteLine(“End RunDataTableVersionExample”);<br>}</p>
<p>private static void RunReaderVersionExample()<br>{<br>InitializeData();</p>
<p>Console.WriteLine(“Start RunReaderVersionExample”);<br>Console.WriteLine(“Function: Get all persons”);<br>var gateway &#x3D; new ReaderVersion.PersonGateway();<br>var allPersons &#x3D; gateway.FindAll();<br>PrintPersonsRowData(allPersons);<br>allPersons.Close();</p>
<p>Console.WriteLine(“Function: Get person by id &#x3D; 2”);<br>var onePerson &#x3D; gateway.FindRow(2);<br>PrintPersonRowData(onePerson);</p>
<p>Console.WriteLine(“Function: Update person by id &#x3D; 2”);<br>gateway.Update(2, “Jackson”, “Michael”, 100);<br>Console.WriteLine(“Function: Get person by id &#x3D; 2”);<br>var updatedPerson &#x3D; gateway.FindRow(2);<br>PrintPersonRowData(updatedPerson);</p>
<p>Console.WriteLine(“Function: Insert a person”);<br>gateway.Insert(“Skinner”, “Neil”, 3);</p>
<p>Console.WriteLine(“Function: Get all persons”);<br>allPersons &#x3D; gateway.FindAll();<br>PrintPersonsRowData(allPersons);<br>allPersons.Close();</p>
<p>Console.WriteLine(“Function: Get persons by numberOfDependents &gt; 10”);<br>var findPersons &#x3D; gateway.FindWhere(“numberOfDependents &gt; 10”);<br>PrintPersonsRowData(findPersons);<br>findPersons.Close();</p>
<p>Console.WriteLine(“Function: Delete person by id &#x3D; 1”);<br>gateway.Delete(1);</p>
<p>Console.WriteLine(“Function: Get all persons”);<br>allPersons &#x3D; gateway.FindAll();<br>PrintPersonsRowData(allPersons);<br>allPersons.Close();</p>
<p>Console.WriteLine(“End RunReaderVersionExample”);<br>}</p>
<p>private static void PrintPersonRowData(object[] columns)<br>{<br>Console.WriteLine($”id: {columns[0]}, lastname: {columns[1]}, firstname: {columns[2]}, numberOfDependents: {columns[3]}”);<br>}</p>
<p>private static void PrintPersonRowData(DataRow columns)<br>{<br>Console.WriteLine($”id: {columns[0]}, lastname: {columns[1]}, firstname: {columns[2]}, numberOfDependents: {columns[3]}”);<br>}</p>
<p>private static void PrintPersonsRowData(DataRowCollection dataRows)<br>{<br>foreach (DataRow row in dataRows)<br>{<br>Console.WriteLine($”id: {row[“id”]}, lastname: {row[“lastname”]}, firstname: {row[“firstname”]}, numberOfDependents: {row[“numberOfDependents”]}”);<br>}<br>}</p>
<p>private static void PrintPersonsRowData(IDataReader reader)<br>{<br>while (reader.Read())<br>{<br>Console.WriteLine($”id: {reader[“id”]}, lastname: {reader[“lastname”]}, firstname: {reader[“firstname”]}, numberOfDependents: {reader[“numberOfDependents”]}”);<br>}<br>}</p>
<p>private static void InitializeData()<br>{<br>using (var connection &#x3D; DbManager.CreateConnection())<br>{<br>connection.Open();</p>
<p>using (var command &#x3D; connection.CreateCommand())<br>{<br>command.CommandText &#x3D;<br>@”<br>DROP TABLE IF EXISTS person;<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”<br>CREATE TABLE person (Id int primary key, lastname TEXT, firstname TEXT, numberOfDependents int);<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”</p>
<p>INSERT INTO person<br>VALUES (1, ‘Sean’, ‘Reid’, 5);</p>
<p>INSERT INTO person<br>VALUES (2, ‘Madeleine’, ‘Lyman’, 13);</p>
<p>INSERT INTO person<br>VALUES (3, ‘Oliver’, ‘Wright’, 66);<br>“;<br>command.ExecuteNonQuery();<br>}</p>
<p>}<br>}<br>}</p>
<p>The console shows:</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2021/11/result.png" alt="Table Data Gateway result"></p>
<h3 id="3-Conclusions-for-Table-Data-Gateway"><a href="#3-Conclusions-for-Table-Data-Gateway" class="headerlink" title="3. Conclusions for Table Data Gateway"></a>3. Conclusions for Table Data Gateway</h3><p>“Table Data Gateway” is a simpler data source architectural pattern. We can create a gateway to map a table(or a view&#x2F;a store procedure) even map to whole tables. If the application is not complex, this pattern is a good choice.</p>
<p>The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_TableDataGateway">Github Repository</a>.</p>
<p>For next article I will write <strong>Row Data Gateway</strong> pattern according to <strong>Chapter 10 Data Source Architectural Pattern - Table Data Gateway</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Domain Model Pattern</title>
    <url>/2021/05/29/poeaa-domain-logic-pattern-domain-model/</url>
    <content><![CDATA[<h3 id="1-What-is-Domain-Model"><a href="#1-What-is-Domain-Model" class="headerlink" title="1. What is Domain Model"></a>1. What is Domain Model</h3><p>According to [PoEAA], this definition is “A <strong>Domain Model</strong> creates a web of interconnected objects, where each object represents some meaningful individual, whether as large as a corporation or as small as a single line on an order form.”</p>
<p>This pattern has two kinds of type:</p>
<ol>
<li>Simple Domain Model: Every domain model can be mapped to one database table. Usually it uses Active Record.</li>
<li>Complex Domain Model: The model uses inheritance, strategies and other design patterns. Database can not directly map to the model. Using Data Mapper is required.</li>
</ol>
<h4 id="1-1-When-to-use-it"><a href="#1-1-When-to-use-it" class="headerlink" title="1.1 When to use it"></a>1.1 When to use it</h4><p>If the business layer is frequently changed and is gradually complex, using this pattern is a good choice. Creating Service Layer wraps the Domain Model to provide unified API for outer modules.</p>
<h3 id="2-Pattern-Practice-The-Revenue-Recognition-Problem"><a href="#2-Pattern-Practice-The-Revenue-Recognition-Problem" class="headerlink" title="2. Pattern Practice: The Revenue Recognition Problem"></a>2. Pattern Practice: The Revenue Recognition Problem</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/05/23/poeaa-domain-logic-pattern-transaction-script/">[PoEAA] Domain Logic Pattern - Transaction Script</a>. This article uses Domain Model to build the domain layer.</p>
<p>Define the classes for the revenue recognition, product and contract as the following figure:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/25E6259C25AA25E5259125BD25E52590258D25E725BB259825E5259B25BE.png" alt="domain model classes for the revenue recognition, product and contract"></p>
<h4 id="2-1-Implementation-by-C"><a href="#2-1-Implementation-by-C" class="headerlink" title="2.1 Implementation by C#"></a>2.1 Implementation by C#</h4><p>This pattern is implemented by C#. Because the section <strong>Chapter 9 Domain Logic Pattern - Domain Model</strong> of PoEAA didn’t implement with database integration, this implementation don’t contain database example.</p>
<h5 id="2-1-1-Contract-Class-and-RevenueRecognition-Class"><a href="#2-1-1-Contract-Class-and-RevenueRecognition-Class" class="headerlink" title="2.1.1 Contract Class and RevenueRecognition Class"></a>2.1.1 Contract Class and RevenueRecognition Class</h5><p>For Contract class, it contains a Money object _<strong>revenue</strong> and a DateTime object <strong>_whenSigned</strong>. It also contains a list of <strong>RevenueRecognition</strong> which these recognitions belong to this contract.</p>
<p>class Contract<br>{<br>    private readonly List<RevenueRecognition> _revenueRecognitions &#x3D; new List<RevenueRecognition>();</p>
<pre><code>private readonly Product \_product;
private readonly Money \_revenue;
private readonly DateTime \_whenSigned;
private readonly int \_id;
private static int \_commonId = 1;
private static readonly object IdLock = new object();

public Contract(Product product, Money revenue, DateTime whenSigned)
&#123;
    \_product = product;
    \_revenue = revenue;
    \_whenSigned = whenSigned;
    \_id = GenerateNewId();
&#125;

private static int GenerateNewId()
&#123;
    // todo db generate auto increment id
    lock (IdLock)
    &#123;
        return \_commonId++;
    &#125;
&#125;

public Money RecognizedRevenue(DateTime asOf)
&#123;
    Money result = Money.Dollars(0m);
    \_revenueRecognitions.ForEach(x =&gt;
        &#123;
            if (x.IsRecognizableBy(asOf))
            &#123;
                result += x.GetAmount();
            &#125;
        &#125;);

    return result;
&#125;

public Money GetRevenue()
&#123;
    return \_revenue;
&#125;

public DateTime GetWhenSigned()
&#123;
    return \_whenSigned;
&#125;

public void AddRevenueRecognition(RevenueRecognition revenueRecognition)
&#123;
    // todo
    // db insert

    // after db insertion, add it to list
    \_revenueRecognitions.Add(revenueRecognition);
&#125;

public void CalculateRecognitions()
&#123;
    \_product.CalculateRevenueRecognitions(this);
&#125;
</code></pre>
<p>}</p>
<p>class RevenueRecognition<br>{<br>    private readonly Money _amount;<br>    private readonly DateTime _date;</p>
<pre><code>public RevenueRecognition(Money amount, DateTime date)
&#123;
    \_amount = amount;
    \_date = date;
&#125;

public Money GetAmount()
&#123;
    return \_amount;
&#125;

public bool IsRecognizableBy(DateTime asOf)
&#123;
    return asOf.CompareTo(\_date) &gt;= 0;
&#125;
</code></pre>
<p>}</p>
<h5 id="2-1-2-Product-Class-and-RecognitionStrategy-Class"><a href="#2-1-2-Product-Class-and-RecognitionStrategy-Class" class="headerlink" title="2.1.2 Product Class and RecognitionStrategy Class"></a>2.1.2 Product Class and RecognitionStrategy Class</h5><p>For Product class, it contains a name and associates a RecognitionStrategy instance:</p>
<p>class Product<br>{<br>    private readonly string _name;<br>    private readonly RecognitionStrategy _recognitionStrategy;</p>
<pre><code>public Product(string name, RecognitionStrategy recognitionStrategy)
&#123;
    \_name = name;
    \_recognitionStrategy = recognitionStrategy;
&#125;

public static Product NewWordProcessor(string name)
&#123;
    return new Product(name, new CompleteRecognitionStrategy());
&#125;

public static Product NewSpreadsheet(string name)
&#123;
    return new Product(name, new ThreeWayRecognitionStrategy(60, 90));
&#125;

public static Product NewDatabase(string name)
&#123;
    return new Product(name, new ThreeWayRecognitionStrategy(30, 60));
&#125;

public void CalculateRevenueRecognitions(Contract contract)
&#123;
    \_recognitionStrategy.CalculateRevenueRecognitions(contract);
&#125;
</code></pre>
<p>}</p>
<p>Previously a Transaction Script calculated the revenue recognitions in one service function. This Domain Model uses <a href="https://en.wikipedia.org/wiki/Strategy_pattern">Strategy Pattern</a> to bind Product instance with a RecognitionStrategy instance. The detail of calculating revenue recognition is implemented by the associated strategy.</p>
<p><strong>RecognitionStrategy</strong> is a base class that declare a abstract CalculateRevenueRecognitions function.</p>
<p><strong>CompleteRecognitionStrategy</strong> inherits from <strong>RecognitionStrategy</strong> and allocates all revenue in one date as same as Contract’s signed date.</p>
<p><strong>ThreeWayRecognitionStrategy</strong> also inherits from <strong>RecognitionStrategy</strong> and allocates revenue into 3 date.</p>
<p>abstract class RecognitionStrategy<br>{<br>public abstract void CalculateRevenueRecognitions(Contract contract);<br>}</p>
<p>class CompleteRecognitionStrategy : RecognitionStrategy<br>{<br>public override void CalculateRevenueRecognitions(Contract contract)<br>{<br>contract.AddRevenueRecognition(new RevenueRecognition(contract.GetRevenue(), contract.GetWhenSigned()));<br>}<br>}</p>
<p>class ThreeWayRecognitionStrategy : RecognitionStrategy<br>{<br>private readonly int _firstRecognitionOffset;<br>private readonly int _secondRecognitionOffset;</p>
<p>public ThreeWayRecognitionStrategy(int firstRecognitionOffset, int secondRecognitionOffset)<br>{<br>_firstRecognitionOffset &#x3D; firstRecognitionOffset;<br>_secondRecognitionOffset &#x3D; secondRecognitionOffset;<br>}</p>
<p>public override void CalculateRevenueRecognitions(Contract contract)<br>{<br>Money[] allocation &#x3D; contract.GetRevenue().Allocate(3);<br>contract.AddRevenueRecognition(new RevenueRecognition(allocation[0], contract.GetWhenSigned()));<br>contract.AddRevenueRecognition(new RevenueRecognition(allocation[1], contract.GetWhenSigned().AddDays(_firstRecognitionOffset)));<br>contract.AddRevenueRecognition(new RevenueRecognition(allocation[2], contract.GetWhenSigned().AddDays(_secondRecognitionOffset)));<br>}<br>}</p>
<h5 id="2-1-3-Demo"><a href="#2-1-3-Demo" class="headerlink" title="2.1.3 Demo"></a>2.1.3 Demo</h5><p>Create a console program and create 3 <strong>Products</strong> and <strong>3 Contracts</strong> to calculate the revenue recognitions for the 3 products.</p>
<p>As the following code:</p>
<p>Product word &#x3D; Product.NewWordProcessor(“CodeParadise Word”);<br>Product calc &#x3D; Product.NewSpreadsheet(“CodeParadise Calc”);<br>Product db &#x3D; Product.NewDatabase(“CodeParadise DB”);</p>
<p>Contract wordContract &#x3D; new Contract(word, Money.Dollars(24000m), new DateTime(2020, 7, 25));<br>Contract calcContract &#x3D; new Contract(calc, Money.Dollars(1000m), new DateTime(2020, 3, 15));<br>Contract dbContract &#x3D; new Contract(db, Money.Dollars(9999m), new DateTime(2020, 1, 1));</p>
<p>wordContract.CalculateRecognitions();<br>calcContract.CalculateRecognitions();<br>dbContract.CalculateRecognitions();</p>
<p>var wordProcessorRevenue &#x3D; wordContract.RecognizedRevenue(new DateTime(2020, 9, 30));<br>Console.WriteLine($”word processor revenue before 2020-09-30 &#x3D; {wordProcessorRevenue.Amount}”);</p>
<p>var spreadsheetRevenue &#x3D; calcContract.RecognizedRevenue(new DateTime(2020, 6, 1));<br>Console.WriteLine($”spreadsheet revenue before 2020-06-01 &#x3D; {spreadsheetRevenue.Amount}”);</p>
<p>var databaseRevenue &#x3D; dbContract.RecognizedRevenue(new DateTime(2020, 1, 25));<br>Console.WriteLine($”database revenue before 2020-01-25 &#x3D; {databaseRevenue.Amount}”);</p>
<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/05/Untitled-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/Untitled-2.png" alt="domain model result"></a></p>
<p>This result is the same as the Transaction Script example.</p>
<h3 id="3-Conclusions-for-Domain-Model"><a href="#3-Conclusions-for-Domain-Model" class="headerlink" title="3. Conclusions for Domain Model"></a>3. Conclusions for Domain Model</h3><p>This pattern is the necessary pattern for domain logic. It can be maintainable and testable for modern complex applications. If you are a .NET developer, Entity Framework or other popular ORMs have the concept of this pattern.</p>
<p>Usually a complex application not only uses this pattern to satisfy requirements, but also integrates other layers including presentation&#x2F;service&#x2F;persistence… Every layer is loosely coupled so the testing&#x2F;refactoring will be more liable than Transaction Script.</p>
<p>The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_DomainModel">Github Repository</a>.</p>
<p>For next article I will write <strong>Table Module</strong> pattern according to <strong>Chapter 9 Domain Logic Pattern - Table Module</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Service Layer Pattern</title>
    <url>/2021/06/16/poeaa-domain-logic-pattern-service-layer/</url>
    <content><![CDATA[<h3 id="1-What-is-Service-Layer"><a href="#1-What-is-Service-Layer" class="headerlink" title="1. What is Service Layer"></a>1. What is Service Layer</h3><p>According to [PoEAA], Service Layer Pattern definition is “Defines an application’s boundary with a layer of services that establishes a set of available operations and coordinates the application’s response in each operation.”</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-12.png" alt="Service Layer Architecture"></a></p>
<p>Figure 1. Service Layer Architecture (From <a href="https://martinfowler.com/eaaCatalog/serviceLayer.html">PoEAA Page</a>)</p>
<h4 id="1-1-How-it-works"><a href="#1-1-How-it-works" class="headerlink" title="1.1 How it works"></a>1.1 How it works</h4><p>Business Logic is generally split into “Domain Logic” and “Application Logic”. Domain Logic focuses on the domain problem like the calculation of contract’s revenue recognition. Application Logic is responsible for integrating “workflow”. The workflow example: When the calculation of contract’s revenue recognition is finished, system sends the result email to contract’s owner and prints contract paper. Every service layer packs an kind of application logic and makes the domain objects reusable.   Implementation:</p>
<ol>
<li>Domain Facade: This facade have no business logic and hides the a domain object’s implementation.</li>
<li>Operation Script: This implements the above Application Logic and some services are composed as a Operation Script for clients.</li>
</ol>
<p>Service Layer’s operations are based on the use case model and user interface design. Most use cases are “CRUD” with database for every domain model. In some applications have to interact with other application, so the service layer organizes the integration.   By application’s scale, if the application is large, then split it vertically into subsystems and every subsystem has a service name. The other way is based on Domain Model to build the services (like ContractService&#x2F;ProductService) or bases on the behavior to build the services (like RecognitionService)  </p>
<h4 id="1-2-When-to-use-it"><a href="#1-2-When-to-use-it" class="headerlink" title="1.2 When to use it"></a>1.2 When to use it</h4><p>If the application has only one resource transaction when client interact with every operation, Service Layer is not required and sending request to Data Source is straight. Otherwise, all clients interact this system with Service Layer’s public operations.</p>
<h3 id="2-Pattern-Practice-The-Revenue-Recognition-Problem"><a href="#2-Pattern-Practice-The-Revenue-Recognition-Problem" class="headerlink" title="2. Pattern Practice: The Revenue Recognition Problem"></a>2. Pattern Practice: The Revenue Recognition Problem</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/05/23/poeaa-domain-logic-pattern-transaction-script/">[PoEAA] Domain Logic Pattern - Transaction Script</a>. Original Transaction Script example has a service class. This article extends this service.</p>
<p>Define the service layer classes for the revenue recognition, product and contract as the following figure:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/25E6259C25AA25E5259125BD25E52590258D25E725BB259825E5259B25BE.png" alt="service layer classes for the revenue recognition"></p>
<h4 id="2-1-Implementation-by-C"><a href="#2-1-Implementation-by-C" class="headerlink" title="2.1 Implementation by C#"></a>2.1 Implementation by C#</h4><p>This pattern is implemented by C# based on the content of <strong>Chapter 9 Domain Logic Pattern - Service Layer</strong> of PoEAA. </p>
<h5 id="2-1-1-New-Features"><a href="#2-1-1-New-Features" class="headerlink" title="2.1.1 New Features"></a>2.1.1 New Features</h5><p>When use RecognitionService’s CalculateRevenueRecognitions function, the calculated revenue result will be sent to contract’s administrator owner by email and broadcast to integrate other system. These 2 features are mocking implementation, not real sending&#x2F;broadcasting systems.</p>
<h5 id="2-1-2-IEmailGateway-IIntegrationGateway-interfaces-implementation"><a href="#2-1-2-IEmailGateway-IIntegrationGateway-interfaces-implementation" class="headerlink" title="2.1.2 IEmailGateway&#x2F;IIntegrationGateway interfaces&#x2F;implementation"></a>2.1.2 IEmailGateway&#x2F;IIntegrationGateway interfaces&#x2F;implementation</h5><p>The above new features are implemented in IEmailGateway and IIntegrationGateway as Figure 2 shows. Their implementation just prints parameter content by console.</p>
<p>internal class IntegrationGateway : IIntegrationGateway<br>{<br>public void PublishRevenueRecognitionCalculation(DataRow contract)<br>{<br>Console.WriteLine($”Id : {contract[“Id”]} , Signed Date: {((DateTime)contract[“DateSigned”]):MM&#x2F;dd&#x2F;yyyy}”);<br>}<br>}</p>
<p>public interface IIntegrationGateway<br>{<br>void PublishRevenueRecognitionCalculation(DataRow contract);<br>}</p>
<p>internal class EmailGateway : IEmailGateway<br>{<br>public void SendEmailMessage(string toAddress, string subject, string body)<br>{<br>Console.WriteLine($”To Address : {toAddress} , subject: {subject}, body: {body}”);<br>}<br>}</p>
<p>public interface IEmailGateway<br>{<br>void SendEmailMessage(string toAddress, string subject, string body);<br>}</p>
<h5 id="2-1-3-ApplicationService-base-class"><a href="#2-1-3-ApplicationService-base-class" class="headerlink" title="2.1.3 ApplicationService base class"></a>2.1.3 ApplicationService base class</h5><p>All service layer’s classes have reusable and common functions, so this ApplicationService provides those. In this example, ApplicationService only generates the IEmailGateway and IIntegrationGateway’s instances.</p>
<p>public class ApplicationService<br>{<br>protected virtual IEmailGateway GetEmailGateway()<br>{<br>return new EmailGateway();<br>}</p>
<p>protected virtual IIntegrationGateway GetIntegrationGateway()<br>{<br>return new IntegrationGateway();<br>}<br>}</p>
<h5 id="2-1-4-RecognitionService-Class"><a href="#2-1-4-RecognitionService-Class" class="headerlink" title="2.1.4 RecognitionService Class"></a>2.1.4 RecognitionService Class</h5><p>This class extends ApplicationService to get IEmailGateway and IIntegrationGateway’s instances. When the revenue recognitions are calculated, call these services to complete the new features.</p>
<p>public class RecognitionService : ApplicationService<br>{<br>public Money RecognizedRevenue(int contractNumber, DateTime beforeDate)<br>{<br>Money result &#x3D; Money.Dollars(0m);<br>Gateway db &#x3D; new Gateway();<br>var dt &#x3D; db.FindRecognitionsFor(contractNumber, beforeDate);<br>for (int i &#x3D; 0; i &lt; dt.Rows.Count; ++i)<br>{<br>var amount &#x3D; (decimal) dt.Rows[i][“Amount”];<br>result +&#x3D; Money.Dollars(amount);<br>}</p>
<p>return result;<br>}</p>
<p>public void CalculateRevenueRecognitions(int contractId)<br>{<br>Gateway db &#x3D; new Gateway();<br>var contracts &#x3D; db.FindContract(contractId);<br>Money totalRevenue &#x3D; Money.Dollars((decimal) contracts.Rows[0][“Revenue”]);<br>DateTime recognitionDate &#x3D; (DateTime) contracts.Rows[0][“DateSigned”];<br>string type &#x3D; contracts.Rows[0][“Type”].ToString();</p>
<p>if(type &#x3D;&#x3D; “S”)<br>{<br>Money[] allocation &#x3D; totalRevenue.Allocate(3);<br>db.InsertRecognitions(contractId, allocation[0], recognitionDate);<br>db.InsertRecognitions(contractId, allocation[1], recognitionDate.AddDays(60));<br>db.InsertRecognitions(contractId, allocation[2], recognitionDate.AddDays(90));<br>}<br>else if(type &#x3D;&#x3D; “W”)<br>{<br>db.InsertRecognitions(contractId, totalRevenue, recognitionDate);<br>}<br>else if(type &#x3D;&#x3D; “D”)<br>{<br>Money[] allocation &#x3D; totalRevenue.Allocate(3);<br>db.InsertRecognitions(contractId, allocation[0], recognitionDate);<br>db.InsertRecognitions(contractId, allocation[1], recognitionDate.AddDays(30));<br>db.InsertRecognitions(contractId, allocation[2], recognitionDate.AddDays(60));<br>}</p>
<p>GetEmailGateway().SendEmailMessage(<br>contracts.Rows[0][“AdministratorEmail”].ToString(),<br>“RE: Contract #” + contractId,<br>contractId + “ has had revenue recognitions calculated”);</p>
<p>GetIntegrationGateway().PublishRevenueRecognitionCalculation(contracts.Rows[0]);<br>}<br>}</p>
<h5 id="2-1-5-Demo"><a href="#2-1-5-Demo" class="headerlink" title="2.1.5 Demo"></a>2.1.5 Demo</h5><p>Create a console program and create 3 Products and 3 Contracts to calculate the revenue recognitions for the 3 products.</p>
<p>As the following code:</p>
<p>using (var connection &#x3D; DbManager.CreateConnection())<br>{<br>connection.Open();</p>
<p>var command &#x3D; connection.CreateCommand();<br>command.CommandText &#x3D;<br>@”<br>DROP TABLE IF EXISTS Products;<br>DROP TABLE IF EXISTS Contracts;<br>DROP TABLE IF EXISTS RevenueRecognitions;<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”<br>CREATE TABLE Products (Id int primary key, Name TEXT, Type TEXT);<br>CREATE TABLE Contracts (Id int primary key, Product int, Revenue decimal, DateSigned date, AdministratorEmail TEXT);<br>CREATE TABLE RevenueRecognitions (Contract int, Amount decimal, RecognizedOn date, PRIMARY KEY(Contract, RecognizedOn));<br>“;<br>command.ExecuteNonQuery();</p>
<p>command.CommandText &#x3D;<br>@”</p>
<p>INSERT INTO Products<br>VALUES (1, ‘Code Paradise Database’, ‘D’);</p>
<p>INSERT INTO Products<br>VALUES (2, ‘Code Paradise Spreadsheet’, ‘S’);</p>
<p>INSERT INTO Products<br>VALUES (3, ‘Code Paradise Word Processor’, ‘W’);</p>
<p>INSERT INTO Contracts<br>VALUES (1, 1, 9999, date(‘2020-01-01’), ‘<a href="mailto:&#x74;&#101;&#115;&#x74;&#x31;&#x40;&#116;&#101;&#x73;&#116;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#101;&#115;&#x74;&#x31;&#x40;&#116;&#101;&#x73;&#116;&#x2e;&#99;&#x6f;&#x6d;</a>‘);</p>
<p>INSERT INTO Contracts<br>VALUES (2, 2, 1000, date(‘2020-03-15’), ‘<a href="mailto:&#116;&#101;&#x73;&#x74;&#x32;&#x40;&#116;&#101;&#115;&#x74;&#x2e;&#x63;&#x6f;&#109;">&#116;&#101;&#x73;&#x74;&#x32;&#x40;&#116;&#101;&#115;&#x74;&#x2e;&#x63;&#x6f;&#109;</a>‘);</p>
<p>INSERT INTO Contracts<br>VALUES (3, 3, 24000, date(‘2020-07-25’), ‘<a href="mailto:&#116;&#101;&#x73;&#116;&#51;&#64;&#x74;&#x65;&#115;&#x74;&#x2e;&#x63;&#x6f;&#109;">&#116;&#101;&#x73;&#116;&#51;&#64;&#x74;&#x65;&#115;&#x74;&#x2e;&#x63;&#x6f;&#109;</a>‘);<br>“;<br>command.ExecuteNonQuery();<br>}</p>
<p>RecognitionService service &#x3D; new RecognitionService();</p>
<p>&#x2F;&#x2F; database product<br>service.CalculateRevenueRecognitions(1);<br>var databaseRevenue &#x3D; service.RecognizedRevenue(1, new System.DateTime(2020, 1, 25));<br>Console.WriteLine($”database revenue before 2020-01-25 &#x3D; {databaseRevenue.Amount}”);</p>
<p>&#x2F;&#x2F; spreadsheet product<br>service.CalculateRevenueRecognitions(2);<br>var spreadsheetRevenue &#x3D; service.RecognizedRevenue(2, new System.DateTime(2020, 6, 1));<br>Console.WriteLine($”spreadsheet revenue before 2020-06-01 &#x3D; {spreadsheetRevenue.Amount}”);</p>
<p>&#x2F;&#x2F; word processor product<br>service.CalculateRevenueRecognitions(3);<br>var wordProcessorRevenue &#x3D; service.RecognizedRevenue(3, new System.DateTime(2020, 9, 30));<br>Console.WriteLine($”word processor revenue before 2020-09-30 &#x3D; {wordProcessorRevenue.Amount}”);</p>
<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-15.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-13.png" alt="Service Layer result"></a></p>
<p>This revenue recognition result is the same as the Transaction Script example and additionally shows the email sending messages&#x2F;broadcasting messages.</p>
<h3 id="3-Conclusions-for-Service-Layer"><a href="#3-Conclusions-for-Service-Layer" class="headerlink" title="3. Conclusions for Service Layer"></a>3. Conclusions for Service Layer</h3><p>“Service Layer” is a very popular domain logic’s pattern. All domain logic underlying implementation is coordinated by service layer and clients only interact the domain logic by service layer. In many open sources, services classes&#x2F;patterns&#x2F;architectures are ubiquitous. Each service (subsystem) plays a role that cooperates with the other to finish a requirement.</p>
<p>The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_ServiceLayer">Github Repository</a>.</p>
<p>For next article I will write <strong>Table Data Gateway</strong> pattern according to <strong>Chapter 10 Data Source Architectural Pattern - Table Data Gateway</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Table Module Pattern</title>
    <url>/2021/06/07/poeaa-domain-logic-pattern-table-module/</url>
    <content><![CDATA[<h3 id="1-What-is-Table-Module"><a href="#1-What-is-Table-Module" class="headerlink" title="1. What is Table Module"></a>1. What is Table Module</h3><p>According to [PoEAA], Table Module definition is “A single instance that handles the business logic for all rows in a database table or view.”</p>
<p>A Table Module only processes one table&#x2F;view&#x2F;custom SQL query in a database. Its underlying data source pattern usually is Table Data Gateway. A approximate equality ≈ Table Data Gateway + Domain Logic</p>
<p>This pattern focuses on business logic and Table Data Gateway focuses on interactions with database (CRUD).</p>
<h4 id="1-1-When-to-use-it"><a href="#1-1-When-to-use-it" class="headerlink" title="1.1 When to use it"></a>1.1 When to use it</h4><p>If the business layer is based on the structure of database table, Table Module is a better choice. When business logic becomes more complex, it’s better to choose Domain Logic as business layer.</p>
<h3 id="2-Pattern-Practice-The-Revenue-Recognition-Problem"><a href="#2-Pattern-Practice-The-Revenue-Recognition-Problem" class="headerlink" title="2. Pattern Practice: The Revenue Recognition Problem"></a>2. Pattern Practice: The Revenue Recognition Problem</h3><p>This problem is introduced in the previous article <a href="https://geekcodeparadise.com/2021/05/23/poeaa-domain-logic-pattern-transaction-script/">[PoEAA] Domain Logic Pattern - Transaction Script</a>. This article uses this pattern to build the domain layer.</p>
<p>Define the table module classes for the revenue recognition, product and contract as the following figure:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/25E6259C25AA25E5259125BD25E52590258D25E725BB259825E5259B25BE-2.png" alt="table module classes for the revenue recognition"></p>
<h4 id="2-1-Implementation-by-C"><a href="#2-1-Implementation-by-C" class="headerlink" title="2.1 Implementation by C#"></a>2.1 Implementation by C#</h4><p>This pattern is implemented by C#. Because the section <strong>Chapter 9 Domain Logic Pattern - Table Module</strong> of PoEAA didn’t implement with database integration, this implementation don’t contain database example.</p>
<h5 id="2-1-1-Table-Module-base-class"><a href="#2-1-1-Table-Module-base-class" class="headerlink" title="2.1.1 Table Module base class"></a>2.1.1 Table Module base class</h5><p>.NET’s DataSet is a type of a in-memory database structure and provides basic CRUD functions. And DataTable is a table structure and is contained in a DataSet, so every TableModule contains a DataTable object.</p>
<p>abstract class TableModule {<br>  protected DataTable Table;<br>  protected TableModule(DataSet ds, string tableName) {<br>    Table &#x3D; ds.Tables[tableName];<br>  }<br>}</p>
<h5 id="2-1-2-Product-Class"><a href="#2-1-2-Product-Class" class="headerlink" title="2.1.2 Product Class"></a>2.1.2 Product Class</h5><p>For Product class, it contains a DataTable named “Products” and a function that returns ProductType by product id:</p>
<p>public enum ProductType {<br>  W,<br>  S,<br>  D<br>};<br>class Product: TableModule {<br>  public Product(DataSet tableDataSet): base(tableDataSet, “Products”) {}<br>  public DataRow this[int key] {<br>    get {<br>      string filter &#x3D; $ “Id &#x3D; {key}”;<br>      return Table.Select(filter)[0];<br>    }<br>  }<br>  public ProductType GetProductType(int prodId) {<br>    string typeCode &#x3D; (string) this[prodId][“Type”];<br>    return (ProductType) Enum.Parse(typeof (ProductType), typeCode);<br>  }<br>}</p>
<h5 id="2-1-3-Contract-Class-RevenueRecognition-Class"><a href="#2-1-3-Contract-Class-RevenueRecognition-Class" class="headerlink" title="2.1.3 Contract Class &amp; RevenueRecognition Class"></a>2.1.3 Contract Class &amp; RevenueRecognition Class</h5><p>For Contract class, it contains a DataTable named “Contracts” and a function that calculates the recognized revenues. It associates a RevenueRecognition table module and inserts the revenue to RevenueRecognition.   For RevenueRecognition class, it contains a DataTable named “RevenueRecognitions”. One function that inserts revenue to DataTable. The second function that returns revenue by contract id and a date.</p>
<p>class Contract: TableModule {<br>  public Contract(DataSet ds): base(ds, “Contracts”) {}<br>  public DataRow this[int key] {<br>    get {<br>      string filter &#x3D; $ “Id &#x3D; {key}”;<br>      return Table.Select(filter)[0];<br>    }<br>  }<br>  public void CalculateRecognitions(int contractId) {<br>    DataRow contractRow &#x3D; this[contractId];<br>    decimal amount &#x3D; (decimal) contractRow[“Revenue”];<br>    RevenueRecognition rr &#x3D; new RevenueRecognition(Table.DataSet);<br>    Product prod &#x3D; new Product(Table.DataSet);<br>    int prodId &#x3D; GetProductId(contractId);<br>    var productType &#x3D; prod.GetProductType(prodId);<br>    if (productType &#x3D;&#x3D; ProductType.W) {<br>      rr.Insert(contractId, amount, GetWhenSigned(contractId));<br>    } else if (productType &#x3D;&#x3D; ProductType.S) {<br>      DateTime signedDate &#x3D; GetWhenSigned(contractId);<br>      decimal[] allocation &#x3D; Allocate(amount, 3);<br>      rr.Insert(contractId, allocation[0], signedDate);<br>      rr.Insert(contractId, allocation[1], signedDate.AddDays(60));<br>      rr.Insert(contractId, allocation[2], signedDate.AddDays(90));<br>    } else if (productType &#x3D;&#x3D; ProductType.D) {<br>      DateTime signedDate &#x3D; GetWhenSigned(contractId);<br>      decimal[] allocation &#x3D; Allocate(amount, 3);<br>      rr.Insert(contractId, allocation[0], signedDate);<br>      rr.Insert(contractId, allocation[1], signedDate.AddDays(30));<br>      rr.Insert(contractId, allocation[2], signedDate.AddDays(60));<br>    }<br>  }<br>  private decimal[] Allocate(decimal amount, int by) {<br>    decimal lowResult &#x3D; amount &#x2F; by;<br>    lowResult &#x3D; decimal.Round(lowResult, 2);<br>    decimal highReult &#x3D; lowResult + 0.01 m;<br>    decimal[] results &#x3D; new decimal[by];<br>    int remainder &#x3D; (int) amount % by;<br>    for (int i &#x3D; 0; i &lt; remainder; ++i) {<br>      results[i] &#x3D; highReult;<br>    }<br>    for (int i &#x3D; remainder; i &lt; by; ++i) {<br>      results[i] &#x3D; lowResult;<br>    }<br>    return results;<br>  }<br>  private DateTime GetWhenSigned(int contractId) {<br>    return (DateTime) this[contractId][“DateSigned”];<br>  }<br>  private int GetProductId(int contractId) {<br>    return (int) this[contractId][“Product”];<br>  }<br>}<br>class RevenueRecognition: TableModule {<br>  private static int _id &#x3D; 1;<br>  private static readonly object IdLock &#x3D; new object();<br>  public RevenueRecognition(DataSet ds): base(ds, “RevenueRecognitions”) {}<br>  public int Insert(int contractId, decimal amount, DateTime date) {<br>    DataRow newRow &#x3D; Table.NewRow();<br>    int id &#x3D; GetNextId();<br>    newRow[“Id”] &#x3D; id;<br>    newRow[“Contract”] &#x3D; contractId;<br>    newRow[“Amount”] &#x3D; amount;<br>    newRow[“RecognizedOn”] &#x3D; date;<br>    Table.Rows.Add(newRow);<br>    return id;<br>  }<br>  public decimal RecognizedRevenue(int contractId, DateTime asOf) {<br>    string filter &#x3D; $ “Contract &#x3D; {contractId} AND RecognizedOn &lt;&#x3D; #{asOf:d}#”;<br>    DataRow[] rows &#x3D; Table.Select(filter);<br>    decimal result &#x3D; 0 m;<br>    foreach(DataRow row in rows) {<br>      result +&#x3D; (decimal) row[“Amount”];<br>    }<br>    return result;<br>  }<br>  private static int GetNextId() {<br>    lock(IdLock) {<br>      return _id++;<br>    }<br>  }<br>}</p>
<h5 id="2-1-4-Demo"><a href="#2-1-4-Demo" class="headerlink" title="2.1.4 Demo"></a>2.1.4 Demo</h5><p>Create a console program and create 3 <strong>Products</strong> and <strong>3 Contracts</strong> to calculate the revenue recognitions for the 3 products.</p>
<p>As the following code:</p>
<p>&#x2F;&#x2F; mock Result Set<br>DataSet ds &#x3D; new DataSet();<br>DataTable productTable &#x3D; new DataTable(“Products”);<br>productTable.Columns.Add(“Id”, typeof (int));<br>productTable.Columns.Add(“Name”, typeof (string));<br>productTable.Columns.Add(“Type”, typeof (string));<br>productTable.Rows.Add(1, “Code Paradise Database”, “D”);<br>productTable.Rows.Add(2, “Code Paradise Spreadsheet”, “S”);<br>productTable.Rows.Add(3, “Code Paradise Word Processor”, “W”);<br>DataTable contractTable &#x3D; new DataTable(“Contracts”);<br>contractTable.Columns.Add(“Id”, typeof (int));<br>contractTable.Columns.Add(“Product”, typeof (int));<br>contractTable.Columns.Add(“Revenue”, typeof (decimal));<br>contractTable.Columns.Add(“DateSigned”, typeof (DateTime));<br>contractTable.Rows.Add(1, 1, 9999, new DateTime(2020, 1, 1));<br>contractTable.Rows.Add(2, 2, 1000, new DateTime(2020, 3, 15));<br>contractTable.Rows.Add(3, 3, 24000, new DateTime(2020, 7, 25));<br>DataTable revenueRecognitionsTable &#x3D; new DataTable(“RevenueRecognitions”);<br>revenueRecognitionsTable.Columns.Add(“Id”, typeof (int));<br>revenueRecognitionsTable.Columns.Add(“Contract”, typeof (int));<br>revenueRecognitionsTable.Columns.Add(“Amount”, typeof (decimal));<br>revenueRecognitionsTable.Columns.Add(“RecognizedOn”, typeof (DateTime));<br>ds.Tables.Add(productTable);<br>ds.Tables.Add(contractTable);<br>ds.Tables.Add(revenueRecognitionsTable);</p>
<p>&#x2F;&#x2F; calculate recognized revenues<br>Contract contract &#x3D; new Contract(ds);</p>
<p>&#x2F;&#x2F; database product<br>contract.CalculateRecognitions(1);<br>var databaseRevenue &#x3D; new RevenueRecognition(ds).RecognizedRevenue(1, new DateTime(2020, 1, 25));<br>Console.WriteLine($”database revenue before 2020-01-25 &#x3D; {databaseRevenue}”);</p>
<p>&#x2F;&#x2F; spreadsheet product<br>contract.CalculateRecognitions(2);<br>var spreadsheetRevenue &#x3D; new RevenueRecognition(ds).RecognizedRevenue(2, new DateTime(2020, 6, 1));<br>Console.WriteLine($”spreadsheet revenue before 2020-06-01 &#x3D; {spreadsheetRevenue}”);</p>
<p>&#x2F;&#x2F; word processor product<br>contract.CalculateRecognitions(3);<br>var wordProcessorRevenue &#x3D; new RevenueRecognition(ds).RecognizedRevenue(3, new DateTime(2020, 9, 30));<br>Console.WriteLine($”word processor revenue before 2020-09-30 &#x3D; {wordProcessorRevenue}”);</p>
<p>The console shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-17.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/06/image-16.png" alt="Table Module result"></a></p>
<p>This result is the same as the Transaction Script example.</p>
<h3 id="3-Conclusions-for-Table-Module"><a href="#3-Conclusions-for-Table-Module" class="headerlink" title="3. Conclusions for Table Module"></a>3. Conclusions for Table Module</h3><p>This pattern is good at processing every table’s logic. For .NET solution, DataSet&#x2F;DataTable have provide complete functions to use this pattern. But when the domain layer is more complex, Domain Model pattern is the better choice.</p>
<p>The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_TableModule">Github Repository</a>.</p>
<p>For next article I will write <strong>Service Layer</strong> pattern according to <strong>Chapter 9 Domain Logic Pattern - Service Layer</strong> of PoEAA.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>Transaction Script Pattern</title>
    <url>/2021/05/23/poeaa-domain-logic-pattern-transaction-script/</url>
    <content><![CDATA[<h3 id="1-What-is-Transaction-Script"><a href="#1-What-is-Transaction-Script" class="headerlink" title="1. What is Transaction Script"></a>1. What is Transaction Script</h3><p>According to [PoEAA], this definition is “A <strong>Transaction Script</strong> organizes all this logic primarily as a single procedure, making calls directly to the database or through a thin database wrapper.”</p>
<p>For example, when I buy a book on a ecommerce shop, the system executes a series of action, including receiving a book id and customer session, getting a book detail and customer detail from the database, and inserting an order into the database. These actions are organized in a transaction script.</p>
<p>Usually, a database transaction maps to a transaction script. So it is easily to implement data isolation.</p>
<h3 id="2-Pattern-Practice-The-Revenue-Recognition-Problem"><a href="#2-Pattern-Practice-The-Revenue-Recognition-Problem" class="headerlink" title="2. Pattern Practice: The Revenue Recognition Problem"></a>2. Pattern Practice: The Revenue Recognition Problem</h3><h4 id="2-1-Problem-Description"><a href="#2-1-Problem-Description" class="headerlink" title="2.1 Problem Description"></a>2.1 Problem Description</h4><p>In [PoEAA], the author wrote a simple case with this transaction script pattern. Assume a company that sells three kinds of software products: word processors, databases, and spreadsheets.</p>
<p>There are some revenue rules when you sign a contract with these products:</p>
<ol>
<li>For word processor, you can book all the revenue</li>
<li>For spreadsheet, you can book one-third today, one-third in sixty days, and one-third in ninety days</li>
<li>For database, you can book one-third today, one-third in thirty days, and one-third in sixty days</li>
</ol>
<p>Design 3 tables to record these data as Figure 1 shows.</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/classes-1.png" alt="Revenue Recognition Problem database design"></p>
<h4 id="2-2-Implementation-by-C-and-SQLite"><a href="#2-2-Implementation-by-C-and-SQLite" class="headerlink" title="2.2 Implementation by C# and SQLite"></a>2.2 Implementation by C# and SQLite</h4><p>This pattern is implemented by C# and database SQLite. SQLite is a very lightweight database to image our ideas.</p>
<p>Implementation is base on the section <strong>Chapter 9 Domain Logic Pattern - Transaction Script of PoEAA</strong>. </p>
<h5 id="2-2-1-Initialize-table-and-data"><a href="#2-2-1-Initialize-table-and-data" class="headerlink" title="2.2.1 Initialize table and data"></a>2.2.1 Initialize table and data</h5><p>When program starts running, it creates a SQLite file and the above 3 tables. The Create Table SQL:</p>
<p>CREATE TABLE Products (Id int primary key, Name TEXT, Type TEXT);<br>CREATE TABLE Contracts (Id int primary key, Product int, Revenue decimal, DateSigned date);<br>CREATE TABLE RevenueRecognitions (Contract int, Amount decimal, RecognizedOn date, PRIMARY KEY(Contract, RecognizedOn));</p>
<p>Insert 3 kinds of products as Figure 2 shows:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/05/products_data-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/products_data-1.png" alt="Insert 3 products of Revenue Recognition Problem in Transaction Script "></a></p>
<p>Figure 2: Insert 3 products</p>
<p>Every product maps to a contract as Figure 3 shows:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/Untitled-4.png" alt="Insert 3 contracts of Revenue Recognition Problem in Transaction Script "></p>
<p>Figure 3: Insert 3 contracts</p>
<h5 id="2-2-2-Table-Data-Gateway"><a href="#2-2-2-Table-Data-Gateway" class="headerlink" title="2.2.2 Table Data Gateway"></a>2.2.2 Table Data Gateway</h5><p>A <strong>table data gateway</strong> wraps the SQL queries. And this case is simple so the author creates only one Gateway class rather than one for each table.</p>
<p>The Gateway class has 3 functions to complete the above problem:</p>
<p>using CodeParadise.Money;<br>using System;<br>using System.Data;<br>using System.Data.SQLite;</p>
<p>namespace PoEAA_TransactionScript<br>{<br>    public class Gateway<br>    {<br>        private const string FindRecognitionsStatement &#x3D;<br>            @”<br>                SELECT Amount FROM RevenueRecognitions<br>                WHERE Contract &#x3D; $contractId AND RecognizedOn &lt;&#x3D; $beforeDate<br>            “;</p>
<pre><code>    private const string FindContractStatement =
        @&quot;
            SELECT \* FROM Contracts c, Products p 
            WHERE c.Id = $contractId AND c.product = p.Id
        &quot;;

    private const string InsertRecognitionsStatement =
        @&quot;
            INSERT INTO RevenueRecognitions VALUES ($contractId, $amount, $recognizedOn)
        &quot;;

    public DataTable FindRecognitionsFor(int contractId, DateTime beforeDate)
    &#123;
        var result = new DataTable();
        using var connection = DbManager.CreateConnection();
        connection.Open();
        var command = connection.CreateCommand();
        command.CommandText = FindRecognitionsStatement;
        command.Parameters.AddWithValue(&quot;$contractId&quot;, contractId);
        command.Parameters.AddWithValue(&quot;$beforeDate&quot;, beforeDate);

        using(var sqlDataAdapter = new SQLiteDataAdapter(command))
        &#123;
             sqlDataAdapter.Fill(result);
        &#125;
       
        return result;
    &#125;

    public DataTable FindContract(int contractId)
    &#123;
        var result = new DataTable();
        using var connection = DbManager.CreateConnection();
        connection.Open();
        var command = connection.CreateCommand();
        command.CommandText = FindContractStatement;
        command.Parameters.AddWithValue(&quot;$contractId&quot;, contractId);

        using(var sqlDataAdapter = new SQLiteDataAdapter(command))
        &#123;
             sqlDataAdapter.Fill(result);
        &#125;
       
        return result;
    &#125;

    public void InsertRecognitions(int contractId, Money amount, DateTime recognizedOn)
    &#123;
        using var connection = DbManager.CreateConnection();
        connection.Open();
        var command = connection.CreateCommand();
        command.CommandText = InsertRecognitionsStatement;
        command.Parameters.AddWithValue(&quot;$contractId&quot;, contractId);
        command.Parameters.AddWithValue(&quot;$amount&quot;, amount.Amount);
        command.Parameters.AddWithValue(&quot;$recognizedOn&quot;, recognizedOn);
        command.ExecuteNonQuery();
    &#125;
&#125;
</code></pre>
<p>}</p>
<p><strong>Money</strong> class is the implementation of the <strong>Money Pattern</strong> described in PoEAA. I created the project in this <a href="https://github.com/u8989332/CodeParadise.Money">Github Repository</a> and published it to <a href="https://www.nuget.org/packages/CodeParadise.Money/">Nuget</a>. This class in this case is responsible for returning the money.</p>
<h5 id="2-2-3-Service"><a href="#2-2-3-Service" class="headerlink" title="2.2.3 Service"></a>2.2.3 Service</h5><p><strong>Service</strong> is responsible for business logic. So every service is thought as a transaction script.</p>
<p>The <strong>RecognitionService</strong> class has 2 functions:</p>
<p>using CodeParadise.Money;<br>using System;</p>
<p>namespace PoEAA_TransactionScript<br>{<br>    class RecognitionService<br>    {<br>        public Money RecognizedRevenue(int contractNumber, DateTime beforeDate)<br>        {<br>            Money result &#x3D; Money.Dollars(0m);<br>            Gateway db &#x3D; new Gateway();<br>            var dt &#x3D; db.FindRecognitionsFor(contractNumber, beforeDate);<br>            for (int i &#x3D; 0; i &lt; dt.Rows.Count; ++i)<br>            {<br>                var amount &#x3D; (decimal) dt.Rows[i][“Amount”];<br>                result +&#x3D; Money.Dollars(amount);<br>            }</p>
<pre><code>        return result;
    &#125;

    public void CalculateRevenueRecognitions(int contractId)
    &#123;
        Gateway db = new Gateway();
        var contracts = db.FindContract(contractId);
        Money totalRevenue = Money.Dollars((decimal) contracts.Rows\[0\]\[&quot;Revenue&quot;\]);
        DateTime recognitionDate = (DateTime) contracts.Rows\[0\]\[&quot;DateSigned&quot;\];
        string type = contracts.Rows\[0\]\[&quot;Type&quot;\].ToString();

        if(type == &quot;S&quot;)
        &#123;
            Money\[\] allocation = totalRevenue.Allocate(3);
            db.InsertRecognitions(contractId, allocation\[0\], recognitionDate);
            db.InsertRecognitions(contractId, allocation\[1\], recognitionDate.AddDays(60));
            db.InsertRecognitions(contractId, allocation\[2\], recognitionDate.AddDays(90));
        &#125;
        else if(type == &quot;W&quot;)
        &#123;
            db.InsertRecognitions(contractId, totalRevenue, recognitionDate);
        &#125;
        else if(type == &quot;D&quot;)
        &#123;
            Money\[\] allocation = totalRevenue.Allocate(3);
            db.InsertRecognitions(contractId, allocation\[0\], recognitionDate);
            db.InsertRecognitions(contractId, allocation\[1\], recognitionDate.AddDays(30));
            db.InsertRecognitions(contractId, allocation\[2\], recognitionDate.AddDays(60));
        &#125;
    &#125;
&#125;
</code></pre>
<p>}</p>
<p><strong>CalculateRevenueRecognitions</strong> function is calculating the revenue recognitions on an existing contract. <strong>RecognizedRevenue</strong> function sum the amounts based on the contract id and the recognized date. These services functions are based on the result sets from <strong>Gateway</strong> class and implement their business logics.</p>
<h5 id="2-2-4-Demo"><a href="#2-2-4-Demo" class="headerlink" title="2.2.4 Demo"></a>2.2.4 Demo</h5><p>Create a console program and create a <strong>RecognitionService</strong> to calculate the revenue recognitions for the 3 products.</p>
<p>As the following code:</p>
<p>RecognitionService service &#x3D; new RecognitionService();</p>
<p>&#x2F;&#x2F; database product<br>service.CalculateRevenueRecognitions(1);<br>var databaseRevenue &#x3D; service.RecognizedRevenue(1, new System.DateTime(2020, 1, 25));<br>Console.WriteLine($”database revenue before 2020-01-25 &#x3D; {databaseRevenue.Amount}”);</p>
<p>&#x2F;&#x2F; spreadsheet product<br>service.CalculateRevenueRecognitions(2);<br>var spreadsheetRevenue &#x3D; service.RecognizedRevenue(2, new System.DateTime(2020, 6, 1));<br>Console.WriteLine($”spreadsheet revenue before 2020-06-01 &#x3D; {spreadsheetRevenue.Amount}”);</p>
<p> &#x2F;&#x2F; word processor product<br>service.CalculateRevenueRecognitions(3);<br>var wordProcessorRevenue &#x3D; service.RecognizedRevenue(3, new System.DateTime(2020, 9, 30));<br>Console.WriteLine($”word processor revenue before 2020-09-30 &#x3D; {wordProcessorRevenue.Amount}”);</p>
<p>The console shows:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/Untitled2B1.png" alt="Transaction Script result"></p>
<p>Let’s look at the table <strong>RevenueRecognitions of</strong> the the database, and it’s records are inserted by <strong>CalculateRevenueRecognitions</strong> function.</p>
<p><a href="https://www.blogger.com/#"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/05/Untitled2B2.png" alt="Calculated revenue recognitions for 3 contracts in Transaction Script "></a></p>
<p>Figure 5: Calculated revenue recognitions for 3 contracts</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>3. Conclusions for Transaction Script</p>
<p>Everybody can write “Transaction Scripts”. Yes, it’s just a script. If the business logic is very simple, just use this pattern. For complex applications, Transaction Script is not maintainable. Even one service function that contains hundreds of &#x2F; thousands of code lines is the nightmare for developers.</p>
<p>The above sample code is uploaded to this <a href="https://github.com/u8989332/PoEAA_TransactionScript">Github Repository</a>.</p>
<p>For next article I will write <strong>Domain Model</strong> pattern. It’s more complex but maintainable for complex applications. Modern .NET solution with Entity Framework is based on <strong>Domain Model.</strong> Some developers have silently used this pattern but I want to dive in this classic concept.</p>
<p>Although I have developed .NET software for some years and almost read the documents with MSDN, the classic concepts of patterns&#x2F;architecture are organized by Martin Fowler. PoEAA is a masterpiece that every programmer should read. Despite of 20 years past, it is still valuable for modern software.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><p><a href="https://amzn.to/40CuWZT">Patterns of Enterprise Application Architecture Book(Amazon)</a></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
        <category>Architecture</category>
        <category>PoEAA</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 1182 食物链</title>
    <url>/2020/09/22/poj-1182/</url>
    <content><![CDATA[<p>POJ 1182 食物链 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1182 - 食物链</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=1182">http://poj.org/problem?id=1182</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>這題是中文題目，可以看原文的敘述。這裡再簡化敘述，有從1…N的N個編號物種，每個物種可能歸類在A、B、C其中一種，A會吃B、B會吃C、C會吃A。</p>
<p>接著有K筆敘述，每一筆有D、X、Y，D等於1時是X和Y同物種，D等於2時是X會吃Y。 　　但這K筆敘述不完全是對的，要找出後面敘述與前面敘述矛盾的筆數。比如前面第1筆敘述1和2同物種，但之後第2筆敘述說2能吃1，這樣是矛盾的。除了矛盾之外，也要檢查物種編號是否在1…N之間，否則也要歸類矛盾的筆數。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>100 7<br>1 101 1<br>2 1 2<br>2 2 3<br>2 3 3<br>1 1 3<br>2 3 1<br>1 5 5</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>3</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題可用Union and Find，將物種與食物鏈都用同一種分組的方式。由於有分A、B、C三個物種，於是用偏移量 N 與 2*N 代表 B與C。一開始先初始化，每個物種都只屬於自己的編號，尚未與別人做分組。</p>
<p>每一筆敘述，如果X與Y是同一種，同時建立X-A與Y-A、X-B與Y-B、X-C與Y-C的群組，但建立這群組前要先檢查是否X-A與Y-B的群組已存在或者X-A與Y-C的群組已存在，否則這X與Y是同一種的敘述是矛盾的。如果X與Y是X吃Y，同時建立X-A與Y-B、X-B與Y-C、X-C與Y-A的群組，但建立這群組前要先檢查是否X-A與Y-A的群組已存在或者X-A與Y-C的群組已存在，否則這X吃Y的敘述是矛盾的。</p>
<p>以範例輸入來看：</p>
<ol>
<li>第1筆敘述，X &#x3D; 101這物種編號超過N，屬於矛盾</li>
<li>第2筆敘述，X &#x3D; 1 能吃 Y &#x3D; 2，因此建立 (1, 2 + 100), (1 + 100, 2 + 200), ( 1 + 200, 2) 三種群組，代表食物鏈</li>
<li>第3筆敘述，X &#x3D; 2 能吃 Y &#x3D; 3，因此建立(2, 3 + 100), (2 + 100, 3 + 200), ( 2 + 200, 3) 三種群組，代表食物鏈</li>
<li>第4筆敘述，X &#x3D; 3 能吃 Y &#x3D; 3，產生了自己就是屬於同物種的矛盾</li>
<li>第5筆敘述，X &#x3D; 1 和 Y &#x3D; 3 同物種，但X &#x3D; 1所屬群組 等於 Y &#x3D; 3的群組(3 + 200的食物鏈包含在2 + 100, 2 + 100 又包含在 1) 相同，食物鏈產生矛盾</li>
<li>第6筆敘述，X &#x3D; 3 能吃 Y &#x3D; 1，因此建立(3, 1 + 100), (3 + 100, 1 + 200), ( 3 + 200, 1) 三種群組，代表食物鏈</li>
<li>第7筆敘述，X &#x3D; 5 和 Y &#x3D; 5同物種，都在同一個群組，屬於正確的敘述</li>
</ol>
<p>所以一共有3筆敘述是矛盾的，回傳3。題目輸入有些陷阱，比如資料量過大，要用scanf()而不是cin，否則會超時；另外不要用while()讀測資，只要讀一次就好，否則會WA。。。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/1100-1199/1182.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/1100-1199/1182.cpp</a></p>
<p>POJ 1182 食物链</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 2234 Matches Game</title>
    <url>/2019/08/19/poj-2234-matches-game/</url>
    <content><![CDATA[<p>POJ 2234 Matches Game 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>2234 - Matches Game</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=2234">http://poj.org/problem?id=2234</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>經典的博奕遊戲: Nim Game。在M堆的火柴裡，兩位玩家輪流從隨意一堆裡挑至少一根、不超過那一堆數量的火柴。當輪到那位玩家挑選後使火柴都空了，那位玩家則獲勝。假設玩家都很聰明，計算出第一位挑火柴的玩家是否會獲勝。<br>　　範例輸入有2個測資，第一筆測資是M &#x3D; 2堆火柴，數量分別是45與45；第二筆測資是M &#x3D; 3堆火柴，數量分別為3、6與9。測資輸出結果分別是No與Yes。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2 45 45<br>3 3 6 9</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>No<br>Yes</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>Nim Game有特殊解法，要計算每堆數量轉為二進制，判斷這局是否為平衡(Balanced)或非平衡(unbalanced)。平衡的定義為每個同位數出現1的數量全為偶數時，代表這局為平衡，否則為非平衡。</p>
<p>第一筆測資一定是平衡，因為只有兩堆且二進制一樣。</p>
<p>以第二筆測資為例，3、6與9的二進制分別是0011、0110與1001，將它們以直式計算來看</p>
<p>0011</p>
<p>0110</p>
<p>1001</p>
<p>從左邊數來第1和第2位數，只有奇數個1，所以這局為非平衡。當第一位玩家的局為非平衡，那麼他一定會贏，因為他只要一直保持給第二為玩家為平衡局，輪到第一位玩家一定又是非平衡，而獲勝的會是非平衡局。反之，若一開始是平衡局，則第二位玩家可依前述的方法獲勝。<br>　　是否為非平衡的程式實作，只需將每堆數量的個別位元做Exclusive-OR，若全Exlusive-OR後不為0，代表非平衡。 　　詳細的數學解法可以參考：<a href="https://www.youtube.com/watch?v=niMjxNtiuu8">https://www.youtube.com/watch?v=niMjxNtiuu8</a></p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2200-2299/2234.c">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2200-2299/2234.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 2386 Lake Counting</title>
    <url>/2019/10/05/poj-2386-lake-counting/</url>
    <content><![CDATA[<p>POJ 2386 Lake Counting 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>2386 - Lake Counting</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=2386">http://poj.org/problem?id=2386</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予N * M大小的2維陣列，有’W’和 ‘.’ 兩種值。W為水灘、. 句點為一般地面，而W相鄰8個方向若也有其他W，則視為同1個水灘區域。求水灘區域有多少個。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>10 12<br>W……..WW.<br>.WWW…..WWW<br>….WW…WW.<br>………WW.<br>………W..<br>..W……W..<br>.W.W…..WW.<br>W.W.W…..W.<br>.W.W……W.<br>..W…….W.</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>3</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　DFS拜訪每個位置，將有W的標記為 . ，可算出所有區域。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2300-2399/2386.c">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2300-2399/2386.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 2431 Expedition</title>
    <url>/2020/09/17/poj-2431-expedition/</url>
    <content><![CDATA[<p>POJ 2431 Expedition 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>2431 - Expedition</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=2431">http://poj.org/problem?id=2431</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有一輛車子要開往城鎮，距離為L單位，且車上目前有P單位的燃料。路上會有N(1 &lt;&#x3D; N &lt;&#x3D; 10000)間的加油站，每間加油站距離城鎮x單位、並能補充p單位的燃料。車子每行駛1單位的距離就得消耗1單位的燃料，而車子的燃料容量無限大，求車子抵達城鎮時的最少加油次數，如果達不到則輸出-1。</p>
<p>範例輸入是4間加油站，需要在第1家(15 10)和第2家(11 5)加油站加油，才能抵達成鎮。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>4 4<br>5 2<br>11 5<br>15 10<br>25 10</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>2</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題需轉換問題，可以看成是當車子開到某站時，如果行經距離超過燃料箱的油量，則檢查經過的加油站的備用油，先從最大量的油倒進燃料箱，直到超過消耗量或者仍無法滿足消耗量。 最大量的油的儲存方式是使用Priority Queue。 　　以範例輸入來看：</p>
<ol>
<li>目前距離25，到下一間加油站15，花10單位的燃料，沒有超過燃料箱的油量(10)，則當前油量變成0、備用的加油站多了[10]的油量</li>
<li>目前距離15，到下一間加油站11，花4單位的燃料，超過燃料箱的油量(0)，則拿備用油[10]倒進來，滿足這段行使距離。當前油量變成6、備用的加油站是[5]的油量 </li>
<li>目前距離11，到下一間加油站5，花6單位的燃料，沒有超過燃料箱的油量(6)，則當前油量變成0、備用的加油站多了[2]的油量</li>
<li>目前距離5，到下一間加油站4，花1單位的燃料，超過燃料箱的油量(0)，則拿備用油[5]倒進來，滿足這段行駛距離。當前油量變成4、備用的加油站是[4]的油量</li>
<li>目前距離4，到終點城鎮0，花4單位的燃料，沒有超過燃料箱的油量(4)，則當前油量變成0。</li>
<li>需加2次油才可抵達城鎮</li>
</ol>
<p>題目測資會有些陷阱，比如加油站的位置不一定由小到大，需要自己排序。或者加油站的補給量有可能是0…….很好玩的測資。實作也把城鎮當作最後一家加油站，這樣距離&#x2F;扣油量的計算才會完整。 　</p>
<p>難度為Medium</p>
<h3 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h3><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2400-2499/2431.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/2400-2499/2431.cpp</a></p>
<h3 id="POJ-2431-Expedition"><a href="#POJ-2431-Expedition" class="headerlink" title="POJ 2431 Expedition"></a>POJ 2431 Expedition</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3069 Saruman&#39;s Army</title>
    <url>/2020/02/12/poj-3069-sarumans-army/</url>
    <content><![CDATA[<p>POJ 3069 Saruman’s Army 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>3069 - Saruman’s Army</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=3069">http://poj.org/problem?id=3069</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予N個石頭，每個石頭有各自的X座標位置(0 到 1000)，再給予一個長度R，每個石頭能向它位置的左方&#x2F;右方延伸R單位，涵蓋其他的石頭，這包覆稱為palantir。求palantir最少的使用量。<br>　　以範例第2筆測資，4個palantir最少的位置如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/02/1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/02/1.png" alt="POJ 3069 Saruman&#39;s Army 圖解"></a></p>
<p>圖1</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>0 3<br>10 20 20<br>10 7<br>70 30 1 7 15 20 50<br>-1 -1</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>2</p>
<p>4</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　此題為貪婪法，貪婪的策略為先從最左方的石頭A開始，往右方尋找R單位內最遠的石頭B，找到該石頭B後，再往右方尋找R單位內最遠的石頭C，而B就會是一個palantir。下一次的起點是離C最近的右方石頭開始前述的判斷。<br>　　以範例測資第2筆，R &#x3D; 10，首先從x &#x3D; 1石頭，離它x右邊 1 + 10 &#x3D; 11以內的最右邊石頭為x &#x3D; 7，接著再從 7 + 10 &#x3D; 17 以內最右邊的石頭為x &#x3D; 15，此時x &#x3D; 7為第1個palantir。<br>　　下一個回合的石頭是x &#x3D; 20，離它x右邊 20 + 10 &#x3D; 30以內的最右邊石頭為x &#x3D; 30，接著再從 30 + 10 &#x3D; 40以內最右邊的石頭找不到，此時x &#x3D; 30為第2個palantir。<br>下一個回合的石頭是x &#x3D; 50，離它x右邊 50 + 10 &#x3D; 60以內的最右邊石頭找不到，此時x &#x3D; 50為第3個palantir。<br>下一個回合的石頭是x &#x3D; 70，離它x右邊 70 + 10 &#x3D; 80以內的最右邊石頭找不到，此時x &#x3D; 70為第4個palantir。<br>　　所以第2個測資的答案為4。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3000-3099/3069.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3000-3099/3069.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3253 Fence Repair</title>
    <url>/2020/02/28/poj-3253-fence-repair/</url>
    <content><![CDATA[<p>POJ 3253 Fence Repair 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>3253 - Fence Repair</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=3253">http://poj.org/problem?id=3253</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予一大塊木板，要切成N小塊的子木板，每個子木板有各自的Li (i &#x3D; 1 … N)長度，每次切一刀成兩半時，需花費的成本是被切之前的長度。求切割最小的花費成本。<br>比如範例輸入N &#x3D; 3，要的子木板長度各為8、5、8，而切第一刀之前(分成13 + 8)的長度是21，切第二刀之前的長度是13 (分成8 + 5)，所以最小的成本是21 + 13 &#x3D; 34。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3</p>
<p>8</p>
<p>5</p>
<p>8</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>34</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　此題為貪婪法，且是經典的霍夫曼編碼應用。霍夫曼編碼可以參考<a href="http://www.csie.ntnu.edu.tw/~u91029/Compression.html#7">演算法筆記的講解</a>，其方法是依據要壓縮對象的字元出現頻率，將它們編碼後，使對象壓縮後的長度是最小的。<br>　　原本霍夫曼編碼是以出現頻率最小開始編碼，換成這題是從長度最小的木板。實作方式可用Priority Queue，每次取最小長度的2個木板，合成後的長度做累加，再放回Priority Queue，直到所有木板都合成完，則最後累加的長度為答案。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3200-3299/3253.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3200-3299/3253.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3617 Best Cow Line</title>
    <url>/2019/11/19/poj-3617-best-cow-line/</url>
    <content><![CDATA[<p>POJ 3617 Best Cow Line 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>3617 - Best Cow Line</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=3617">http://poj.org/problem?id=3617</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予N個字元，每個字元由A…Z組成。每1次取這N個字元的最前面或最後面的1個字元，來形成新的字串，經過N次的取字元後，求形成最小字典順序的字串。<br>　輸出字串時每1列最多只能印80字元，多的繼續往下1列印。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>6<br>A<br>C<br>D<br>B<br>C<br>B</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>ABCBCD</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>此題為貪婪法，貪婪的策略不可以只取當前最小的前面或後面，而是由前面數來的字串與後面數來的字串做字典大小比對，取字典最小的端點字元。<br>比如測資ACDBCB 與 反向 BCBDCA，此時取A<br>接著CDBCB與BCBDC，此時取B<br>接著CDBC與CBDC，此時取CBDC的C<br>接著CDB與BDC，此時取B<br>接著CD與DC，此時取C<br>最後是D，新形成的字串為ABCBCD</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3600-3699/3617.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3600-3699/3617.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3624 Charm Bracelet</title>
    <url>/2020/05/01/poj-3624-charm-bracelet/</url>
    <content><![CDATA[<p>POJ 3624 Charm Bracelet 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>PKU Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>3624 - Charm Bracelet</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://poj.org/problem?id=3624">http://poj.org/problem?id=3624</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有一條手鍊，它可以串很多小飾物，商店內有 N (1 ≤ N ≤ 3,402) 種小飾物，每種小飾物數量只有1個，每種小飾物的重量為 Wi (1 ≤ Wi ≤ 400)、合意價值為Di (1 ≤ Di ≤ 100)。而手鍊能串小飾物的總負重為M (1 ≤ M ≤ 12,880)，求手鍊串小飾物在不超過它的總負重條件下，求合意價值最高的串法。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4 6<br>1 4<br>2 6<br>3 12<br>2 7</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>23</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>經典的0&#x2F;1背包問題，用一般的動態規劃求解，可參考<a href="https://geekcodeparadise.com/2020/04/algorithms-dynamic-programming-0-1-knapsack-problem/">Dynamic Programming - 0&#x2F;1 Knapsack Problem</a></p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3600-3699/3624.cpp">https://github.com/u8989332/ProblemSolving/blob/master/PKUOnlineJudge/3600-3699/3624.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>POJ</category>
      </categories>
  </entry>
  <entry>
    <title>Practices of Refactoring To Patterns</title>
    <url>/2023/03/27/practices-of-refactoring-to-patterns/</url>
    <content><![CDATA[<p><img src="https://geekcodeparadise.com/wp-content/uploads/2023/03/kaleidico-3V8xo5Gbusk-unsplash-1024x683.jpg" alt="refactoring"></p>
<p>(Photo from Upsplash: <a href="https://unsplash.com/photos/3V8xo5Gbusk">https://unsplash.com/photos/3V8xo5Gbusk</a><a href="https://pixabay.com/illustrations/moving-boxes-mover-moving-truck-3671446/">)</a></p>
<h1 id="Refactoring-To-Patterns"><a href="#Refactoring-To-Patterns" class="headerlink" title="Refactoring To Patterns"></a>Refactoring To Patterns</h1><p>My practices of the book Refactoring To Patterns.</p>
<p>Joshua Kerievsky’s book <a href="https://amzn.to/3FNMrhJ">Refactoring to Patterns</a>.</p>
<p>The code samples are placed in my <a href="https://github.com/u8989332/RefactoringToPatterns_Practice">Github</a>.</p>
<p>The content of the book is listed from chapter 6 to chapter 11 and maps to my Github subfolders:</p>
<h2 id="Chapter-6-Creation"><a href="#Chapter-6-Creation" class="headerlink" title="Chapter 6 Creation"></a>Chapter 6 Creation</h2><span id="more"></span>

<h3 id="Replace-Constructors-with-Creation-Methods"><a href="#Replace-Constructors-with-Creation-Methods" class="headerlink" title="-Replace Constructors with Creation Methods"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Replace%20Constructors%20with%20Creation%20Methods">Replace Constructors with Creation Methods</a></h3><h3 id="Move-Creation-Knowledge-to-Factory"><a href="#Move-Creation-Knowledge-to-Factory" class="headerlink" title="-Move Creation Knowledge to Factory"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Move%20Creation%20Knowledge%20to%20Factory">Move Creation Knowledge to Factory</a></h3><h3 id="Encapsulate-Classes-with-Factory"><a href="#Encapsulate-Classes-with-Factory" class="headerlink" title="-Encapsulate Classes with Factory"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Encapsulate%20Classes%20with%20Factory">Encapsulate Classes with Factory</a></h3><h3 id="Introduce-Polymorphic-Creation-with-Factory-Method"><a href="#Introduce-Polymorphic-Creation-with-Factory-Method" class="headerlink" title="-Introduce Polymorphic Creation with Factory Method"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Introduce%20Polymorphic%20Creation%20with%20Factory%20Method">Introduce Polymorphic Creation with Factory Method</a></h3><h3 id="Encapsulate-Composite-with-Builder"><a href="#Encapsulate-Composite-with-Builder" class="headerlink" title="-Encapsulate Composite with Builder"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Encapsulate%20Composite%20with%20Builder">Encapsulate Composite with Builder</a></h3><h3 id="Inline-Singleton"><a href="#Inline-Singleton" class="headerlink" title="-Inline Singleton"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Inline%20Singleton">Inline Sin</a><a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch6/Inline%20Singleton">gleton</a></h3><h2 id="Chapter-7-Simplification"><a href="#Chapter-7-Simplification" class="headerlink" title="Chapter 7 Simplification"></a>Chapter 7 Simplification</h2><h3 id="Compose-Method"><a href="#Compose-Method" class="headerlink" title="-Compose Method"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Composed%20Method">Compose Method</a></h3><h3 id="Replace-Conditional-Logic-with-Strategy"><a href="#Replace-Conditional-Logic-with-Strategy" class="headerlink" title="-Replace Conditional Logic with Strategy"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Replace%20Conditional%20Logic%20with%20Strategy">Replace Conditional Logic with Strategy</a></h3><h3 id="Move-Embellishment-to-Decorator"><a href="#Move-Embellishment-to-Decorator" class="headerlink" title="-Move Embellishment to Decorator"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Move%20Embellishment%20to%20Decorator">Move Embellishment to Decorator</a></h3><h3 id="Replace-State-Altering-Conditionals-with-State"><a href="#Replace-State-Altering-Conditionals-with-State" class="headerlink" title="-Replace State-Altering Conditionals with State"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Replace%20State-Altering%20Conditionals%20with%20State">Replace State-Altering Conditionals with State</a></h3><h3 id="Replace-Implicit-Tree-with-Composite"><a href="#Replace-Implicit-Tree-with-Composite" class="headerlink" title="-Replace Implicit Tree with Composite"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Replace%20Implicit%20Tree%20with%20Composite">Replace Implicit Tree with Composite</a></h3><h3 id="Replace-Conditional-Dispatcher-with-Command"><a href="#Replace-Conditional-Dispatcher-with-Command" class="headerlink" title="-Replace Conditional Dispatcher with Command"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch7/Replace%20Conditional%20Dispatcher%20with%20Command">Replace Conditional Dispatcher with Command</a></h3><h2 id="Chapter-8-Generalization"><a href="#Chapter-8-Generalization" class="headerlink" title="Chapter 8 Generalization"></a>Chapter 8 Generalization</h2><h3 id="Form-Template-Method"><a href="#Form-Template-Method" class="headerlink" title="-Form Template Method"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Form%20Template%20Method">Form Template Method</a></h3><h3 id="Extract-Composite"><a href="#Extract-Composite" class="headerlink" title="-Extract Composite"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Extract%20Composite">Extract Composite</a></h3><h3 id="Replace-One-Many-Distinctions-with-Composite"><a href="#Replace-One-Many-Distinctions-with-Composite" class="headerlink" title="-Replace One&#x2F;Many Distinctions with Composite"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Replace%20OneMany%20Distinctions%20with%20Composite">Replace One&#x2F;Many Distinctions with Composite</a></h3><h3 id="Replace-Hard-Coded-Notifications-with-Observer"><a href="#Replace-Hard-Coded-Notifications-with-Observer" class="headerlink" title="-Replace Hard-Coded Notifications with Observer"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Replace%20Hard-Coded%20Notifications%20with%20Observer">Replace Hard-Coded Notifications with Observer</a></h3><h3 id="Unify-Interfaces-with-Adapter"><a href="#Unify-Interfaces-with-Adapter" class="headerlink" title="-Unify Interfaces with Adapter"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Unify%20Interfaces%20with%20Adapter">Unify Interfaces with Adapter</a></h3><h3 id="Extract-Adapter"><a href="#Extract-Adapter" class="headerlink" title="-Extract Adapter"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Extract%20Adapter">Extract Adapter</a></h3><h3 id="R-eplace-Implicit-Language-with-Interpreter"><a href="#R-eplace-Implicit-Language-with-Interpreter" class="headerlink" title="-R eplace Implicit Language with Interpreter"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch8/Replace%20Implicit%20Language%20with%20Interpreter">R eplace Implicit Language with Interpreter</a></h3><h2 id="Chapter-9-Protection"><a href="#Chapter-9-Protection" class="headerlink" title="Chapter 9 Protection"></a>Chapter 9 Protection</h2><h3 id="Replace-Type-Code-with-Class"><a href="#Replace-Type-Code-with-Class" class="headerlink" title="-Replace Type Code with Class"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch9/Replace%20Type%20Code%20with%20Class">Replace Type Code with Class</a></h3><h3 id="Limit-Instantiation-with-Singleton"><a href="#Limit-Instantiation-with-Singleton" class="headerlink" title="-Limit Instantiation with Singleton"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch9/Limit%20Instantiation%20with%20Singleton">Limit Instantiation with Singleton</a></h3><h3 id="Introduce-Null-Object"><a href="#Introduce-Null-Object" class="headerlink" title="-Introduce Null Object"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch9/Introduce%20Null%20Object">Introduce Null Object</a></h3><h2 id="Chapter-10-Protection"><a href="#Chapter-10-Protection" class="headerlink" title="Chapter 10 Protection"></a>Chapter 10 Protection</h2><h3 id="Move-Accumulation-to-Collecting-Parameter"><a href="#Move-Accumulation-to-Collecting-Parameter" class="headerlink" title="-Move Accumulation to Collecting Parameter"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch10/Move%20Accumulation%20to%20Collecting%20Parameter">Move Accumulation to Collecting Parameter</a></h3><h3 id="Move-Accumulation-to-Visitor"><a href="#Move-Accumulation-to-Visitor" class="headerlink" title="-Move Accumulation to Visitor"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch10/Move%20Accumulation%20to%20Visitor">Move Accumulation to Visitor</a></h3><h2 id="Chapter-11-Utilities"><a href="#Chapter-11-Utilities" class="headerlink" title="Chapter 11 Utilities"></a>Chapter 11 Utilities</h2><h3 id="Chain-Constructors"><a href="#Chain-Constructors" class="headerlink" title="-Chain Constructors"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch11/Chain%20Constructors">Chain Constructors</a></h3><h3 id="Unify-Interfaces"><a href="#Unify-Interfaces" class="headerlink" title="-Unify Interfaces"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch11/Unify%20Interfaces">Unify Interfaces</a></h3><h3 id="Extract-Parameter"><a href="#Extract-Parameter" class="headerlink" title="-Extract Parameter"></a>-<a href="https://github.com/u8989332/RefactoringToPatterns_Practice/tree/master/ch11/Extract%20Parameter">Extract Parameter</a></h3>]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>REFACTORING</tag>
      </tags>
  </entry>
  <entry>
    <title>程式解題 學習過程</title>
    <url>/2016/04/23/programming-contest-learning-process/</url>
    <content><![CDATA[<p>本篇描述在大學時期對 程式解題 的 學習過程</p>
<h4 id="1-為何會接觸程式解題？"><a href="#1-為何會接觸程式解題？" class="headerlink" title="1.　為何會接觸程式解題？"></a>1.　為何會接觸程式解題？</h4><p>　　在大二時，由學長姊帶著去參加NCPC比賽，當時幾乎是不懂資料結構、演算法，就抱著「嘿嘿，我修過C&#x2F;C++，成績又還不錯」的菜鳥心態與同學在考場盯著五小時的題目與電腦。結果當然是砲灰一枚，啥都寫不出來．．．但自從這一次的經驗，好比阿光摸古老帶血跡的棋盤一樣，開始了解程式解題的歷史、所需的能力等，原來正是資料結構與演算法！但這時只知道這些名詞….</p>
<h4 id="2-寫解題的第一步"><a href="#2-寫解題的第一步" class="headerlink" title="2.　寫解題的第一步"></a>2.　寫解題的第一步</h4><p>　　解題最有名的平台是UVa，世界比賽與各大區域賽的題目全都蒐集在這平台裡。最經典的第一道題目：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=36">100 - The 3n + 1 problem</a>，是我第一次解出的題目(寫這題的日期是 2011-01-16 XD)。這題如題目敘述的內容，依照步驟算出3n+1的值，實作上沒有太多的困難，使用scanf、printf、if else、while這些基本的語法就能解決。第一次上傳code到UVa平台做評分，結果是Wrong Answer．．．想說這麼簡單的題目還會出錯，是測試資料有什麼陷阱！？之後再回頭檢查題目，發現題目有個陷阱，但陷阱在此先不說，將陷阱處理掉後，再一次上傳code，得到Accepted的結果，成功啦～～</p>
<p>　　以3n + 1這題為例，對於題目了解是否完整，是解題的關鍵技能之一，包含題目要什麼答案、輸入值的範圍、輸出值的格式等。再更進階到軟體工程的敘述，這技能是「需求分析」，到業界會是非常重要的能力。</p>
<h4 id="3-寫多點簡單的題目"><a href="#3-寫多點簡單的題目" class="headerlink" title="3.　寫多點簡單的題目"></a>3.　寫多點簡單的題目</h4><p>　　當收到Accepted的這綠色的訊息，會有一種愉♂悅♀感，開始解題之路。當課堂的上課內容複習與作業完成的空閒時間，會打開UVa繼續練解題，但題目該如何找呢？當時是用<a href="http://luckycat.kshs.kh.edu.tw/">Lucky貓的 UVA（ACM）園地</a>，是一個翻譯UVa題目的網站，且有標上該題目的等級與解法提示。一開始把每一種等級的題目列表瀏覽一下，看到三等星以上的提示，不斷冒著WTF的問號，看不懂啥是DP、Graph、DFS、BFS、Greedy、Backtracking等提示，就轉往1~2等星練，不要隨意越級打怪．．．</p>
<p>　　在1~2等星的題目裡，自己最常犯錯的地方有這些：</p>
<ul>
<li>輸入值的範圍沒有看完整，比如int的範圍可能會超過32bit，則需要用到long long int</li>
<li>輸出值的格式與題目要求不符，比如每一筆case之間要多一個跳行</li>
</ul>
<p>　　再次說明題目的分析非常重要，往往是能否解出題目的關鍵阿！</p>
<h4 id="4-進階題目的瓶頸"><a href="#4-進階題目的瓶頸" class="headerlink" title="4.　進階題目的瓶頸"></a>4.　進階題目的瓶頸</h4><p>當簡單的題目寫個十幾題後，開始做些較難的題目，有一次挑了3等星的<a href="http://luckycat.kshs.kh.edu.tw/homework/q10465.htm">10465: Homer Simpson</a>（單純看到辛普森這知名卡通人物就點進去XD)，了解題目後，給我感覺非常簡單呀，為何還要3等星呢？於是就開始實作，開心地上傳code－－－－Wrong Answer，改了三次後還是一樣錯誤。開始google別人的解法，看到別人寫說要使用「DP - Dynamic Programming」演算法才能解，而且解法的code非常簡短，於是放下了這題，而思考為何演算法是如此的奧妙～ 　　在大三時有上演算法，但當時還是無法融會貫通如何將課程知識轉成解題的技能．．．只會寫老師出的程式作業而已，漸漸對解題感到大障礙，也沒有人能指導，就荒廢了好幾個月沒去碰。</p>
<h4 id="5-頓悟"><a href="#5-頓悟" class="headerlink" title="5.　頓悟"></a>5.　頓悟</h4><p>　　突然某天有人分享這篇文章<a href="http://blog.vgod.tw/2008/07/05/%E8%BF%BD%E6%B1%82%E7%A5%9E%E4%B9%8E%E5%85%B6%E6%8A%80%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%B9%8B%E9%81%93%E4%B8%80%EF%BC%89/">追求神乎其技的程式設計之道(一）</a>，將整個全系列看完後心情是大翻轉，了解到解題的好處是以前沒想到的多，有如一道希望之光在眼前鋪路，導引著我從頭學資料結構與演算法，再次開起UVa平台解題。</p>
<h4 id="6-UVa的另一舞台-uhunt"><a href="#6-UVa的另一舞台-uhunt" class="headerlink" title="6.　UVa的另一舞台: uhunt"></a>6.　UVa的另一舞台: uhunt</h4><p>　　<a href="http://uhunt.felix-halim.net/">uhunt</a>是不斷取得每位參賽者在UVa submit code的狀況，將解題數、錯誤數等即時顯示在網頁上，讓使用者可以輕鬆的做解題～在uhunt網頁中間有個Competitive Programming Exercises，是由新加坡大學解題團隊訂的題目分類表，可以透過這分類可以選擇自己想解的題目類型，而且也有難度分級。因此先從introduction開始解，再來是Data Structures and Libraries、Problem Solving Paradigms。<br>　　資料結構類型的普通陣列題目不太有問題，但遇到要使用set、hash(map)、stack、queue等題目時會卡關，因為不知道怎麼實作…於是再去google別人解法，但看了別人解法後，我會將別人的code先讀懂，然後再用自己的方式寫出程式碼，當submit有error，再回頭去對照跟別人的差在哪裡，這樣才能真的學到技術，而不是單純的去copy別人code。<br>　　演算法題目也是，剛開始解DP問題時，也是不懂怎麼實作，一樣要去學別人技術，會發現到DP題目的思路模型都一樣：遞迴 + 記憶化，這是DP題目學很久才了解到的技術～<br>　　每當解完一個題目，會打開word去紀錄我解這一題所使用的技術與解法、遇到的困難點在哪等，這樣下次遇到同類型的題目時，就可以再用學到的技術來解決。<br>　　突然某天我練到遇到題目就能想出解決題目的資料結構與演算法時，代表我終於踏進到神乎其技的邊邊吧！？有種說不出的感動，因為這種解題能力是自己獨有又無價的～</p>
<h4 id="7-與其他高手的競爭"><a href="#7-與其他高手的競爭" class="headerlink" title="7.　與其他高手的競爭"></a>7.　與其他高手的競爭</h4><p>　　除了每天用UVa解題的樂趣外，另一個樂趣是參加全國的競賽，像是ITSA桂冠賽、南區程式競賽、NCPC等，因為參加比賽能展現自己真正的能力、感受與他人待在同一緊張氣氛裡互相切磋、且又能到外縣市走走，看看別的校園風景～<br>　　參加比賽有三年經驗，同期的高手名字大都記住了XD，他們幾乎是解過千題以上、參加過國際區域賽的國手，是真的有一身神乎其技～有時候google學技術時會發現這些高手的blog，他們分享解法的行為令人讚嘆～<br>　　目前自己最好的成績是CPE(大學程式能力檢定) 拿到A+吧，個人覺得很滿意了，這幾年解題的辛苦有個美好成果～</p>
<h4 id="8-現在的我"><a href="#8-現在的我" class="headerlink" title="8.　現在的我"></a>8.　現在的我</h4><p>　　在外工作也快一年，回想起大學時代的解題是多麼好玩。在業界寫程式所需的能力不太需要用特別的資料結構、演算法等，而需要的能力是如何整合各種api做出個系統。從解題學到且派上用場的能力正是需求分析與實作能力，了解系統的輸入與輸出有什麼、要用到什麼api來實作等，將系統的每一個module串一起後，這系統正是解題成果～</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>程式解題</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript Basic Reference Type</title>
    <url>/2021/12/26/professional-javascript-for-web-developers-chapter-5-basic-reference-types/</url>
    <content><![CDATA[<p>本篇為 Professional JavaScript for Web Developers 第5章 Basic Reference Type 的讀書筆記</p>
<h4 id="1-1-Date-Type"><a href="#1-1-Date-Type" class="headerlink" title="1.1 Date Type"></a>1.1 Date Type</h4><ul>
<li>Date儲存從1970年1月1日 UTC 前後經過的毫秒.</li>
<li>new Date()可得到local的現在時間</li>
<li>Date的constructor可代入毫秒做初始化為別的時間</li>
<li>Date.parse()和Date.UTC()可回傳1970&#x2F;1&#x2F;1 UTC的經過毫秒時間</li>
<li>Date.parse()可解析多種日期字串, 且會受地區影響</li>
<li>在Date() constructor代入日期字串, 其背後也是Date.parse()</li>
<li>Date.UTC()以UTC時間為基準</li>
<li>但在Date() constructor代入和UTC的參數方式, 是得到local time</li>
<li>一段程式碼運行的時間差可以用2筆Date.now()相減, 取得執行前後的毫秒差</li>
</ul>
<p>&#x2F;&#x2F; 假如現在是台灣 GMT+8 的 2020&#x2F;6&#x2F;13 下午2點<br>let d1 &#x3D; new Date();<br>console.log(d1.getUTCHours()); &#x2F;&#x2F; 輸出 UTC的 早上6點</p>
<p>let d2 &#x3D; new Date(Date.parse(“2020&#x2F;6&#x2F;13 14:00:00”));<br>console.log(d2.getUTCHours()); &#x2F;&#x2F; 輸出 UTC的 早上6點</p>
<p>let d3 &#x3D; new Date(Date.UTC(2020, 5, 13, 14, 0, 0));<br>console.log(d3.getUTCHours()); &#x2F;&#x2F; 輸出 UTC的 下午2點</p>
<p>let d4 &#x3D; new Date(2020, 5, 13, 14, 0, 0);<br>console.log(d4.getUTCHours()); &#x2F;&#x2F; 輸出 UTC的 早上6點</p>
<p>let startD &#x3D; Date.now();<br>console.log(‘do something’);<br>let endD &#x3D; Date.now();<br>let diff &#x3D; endD - startD;<br>console.log(diff); &#x2F;&#x2F; 輸出 毫秒差</p>
<h5 id="1-1-1-Inherited-Methods"><a href="#1-1-1-Inherited-Methods" class="headerlink" title="1.1.1 Inherited Methods"></a>1.1.1 Inherited Methods</h5><ul>
<li>toLocaleString()和toString()每個瀏覽器輸出的格式稍微不同, 只能用在Debug</li>
<li>valueOf()會用在比較的operator等, 做時間前後的比較運算, 實際邏輯是取出毫秒值做大小比對</li>
</ul>
<h5 id="1-1-2-Date-Formatting-Methods"><a href="#1-1-2-Date-Formatting-Methods" class="headerlink" title="1.1.2 Date-Formatting Methods"></a>1.1.2 Date-Formatting Methods</h5><ul>
<li>有toDateString(), toTimeString(), toLocaleDateString(), toLocalseTimeString(), toUTCString(), 都和toString()一樣, 每個瀏覽器的輸出各有稍微不同</li>
<li>還有個toGMTString(), 和toUTCString()結果一樣, 所以建議用toUTCString()</li>
</ul>
<h5 id="1-1-3-Date-Time-Component-Methods"><a href="#1-1-3-Date-Time-Component-Methods" class="headerlink" title="1.1.3 Date&#x2F;Time Component Methods"></a>1.1.3 Date&#x2F;Time Component Methods</h5><ul>
<li>剩下的Date方法有取特定日期&#x2F;時間格式、設置特定日期&#x2F;格式, 以getXXXX()或setXXXX()命名.</li>
<li>其中getTime()和valueOf()一樣, 都是取UTC為準的毫秒差.</li>
</ul>
<h4 id="1-2-RexExp-Type"><a href="#1-2-RexExp-Type" class="headerlink" title="1.2 RexExp Type"></a>1.2 RexExp Type</h4><ul>
<li>用這type支援regular expression的匹配</li>
<li>格式為 let expression &#x3D; &#x2F;pattern&#x2F;flags</li>
<li>pattern為任意的regular expression, 而flags可以是1個或多個</li>
<li>flag有6種</li>
</ul>
<ol>
<li>g : 代表global模式, 應用所有字串, 而不是只有前面字串有match就停止</li>
<li>i: 不區分大小寫</li>
<li>m: 多行模式, 遇到結尾符號仍繼續往下找</li>
<li>y: sticky模式, pattern從lastIndex開始找</li>
<li>u: unicode模式</li>
<li>s: (這本書還未提到) ES2018出現的新模式, 允許 . 字元 match跳行, 可參考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#x2F;RegExp&#x2F;dotAll</a></li>
</ol>
<p>let pattern1 &#x3D; &#x2F;ad&#x2F;g; &#x2F;&#x2F; match字串中有ad的子字串</p>
<p>let pattern2 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有bad或sad的子字串, 且不分大小寫</p>
<p>let pattern3 &#x3D; &#x2F;.ad&#x2F;gi; &#x2F;&#x2F; match以ad結尾, 且不區分大小寫</p>
<ul>
<li>Regular expression有些特殊的字元, 其有特殊的意義, 想把特殊字元當作比對的字, 加上 \ 符號</li>
<li>( { [ ^ $ ) ] } ? * + .</li>
</ul>
<p> </p>
<p>let pattern1 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有bad或sad的子字串, 且不分大小寫</p>
<p>let pattern2 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有[bs]ad的子字串, 且不分大小寫</p>
<p>let pattern3 &#x3D; &#x2F;.ad&#x2F;gi; &#x2F;&#x2F; match以ad結尾, 且不區分大小寫</p>
<p>let pattern4 &#x3D; &#x2F;.ad&#x2F;gi; &#x2F;&#x2F; match字串有.ad的子字串, 且不區分大小寫</p>
<ul>
<li>使用RegExp構造函數和一般expression的是同一個Type</li>
<li>RegExp代入的字串pattern, 要再經過轉換才能用</li>
</ul>
<p>let pattern1 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有bad或sad的子字串, 且不分大小寫</p>
<p>let pattern2 &#x3D; new RegExp(“[bs]ad”, “i”); &#x2F;&#x2F; 和pattern1一樣</p>
<p>let pattern3 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有[bs]ad的子字串, 且不分大小寫</p>
<p>let pattern4 &#x3D; new RegExp(“\[bs\]ad”, “i”); &#x2F;&#x2F; 和pattern3一樣</p>
<p>let pattern5 &#x3D; &#x2F;.ad&#x2F;gi; &#x2F;&#x2F; match字串有.ad的子字串, 且不區分大小寫</p>
<p>let pattern6 &#x3D; new RegExp(“\.ad&#x2F;gi”, “i”); &#x2F;&#x2F; 和pattern5一樣</p>
<ul>
<li>用RegExp的test, 可測試是否某字串有match此pattern</li>
<li>但RegExp只要做比對的功能, 內部的比對index不會重置, 所以會有需要重新初始化的功能</li>
</ul>
<p>let pattern1 &#x3D; &#x2F;[bs]ad&#x2F;g; &#x2F;&#x2F; match有bad或sad的子字串</p>
<p>console.log(pattern1.test(‘sad_man’)); &#x2F;&#x2F; 輸出true</p>
<p>console.log(pattern1.test(‘sad_man’)); &#x2F;&#x2F; 因為前面比對過而index往後沒再match, 輸出false</p>
<h5 id="1-2-1-RegExp-Instance-Properties"><a href="#1-2-1-RegExp-Instance-Properties" class="headerlink" title="1.2.1 RegExp Instance Properties"></a>1.2.1 RegExp Instance Properties</h5><ul>
<li>global: boolean, 是否有設定g flag</li>
<li>ignoreCase: boolean, 是否有設置i flag</li>
<li>unicode: boolean, 是否有設置u flag</li>
<li>sticky: boolean, 是否有設置y flag</li>
<li>lastIndex: integer, 下次匹配開始的位置, 位置是從0開始</li>
<li>multiline: boolean, 是否有設置m flag</li>
<li>source: expression pattern字串</li>
<li>flags: expression flag字串</li>
<li>dotAll: (這本書尚未提到) boolean, 是否有設置s flag</li>
</ul>
<p>let pattern1 &#x3D; &#x2F;[bs]ad&#x2F;i; &#x2F;&#x2F; match第1個有[bs]ad的子字串, 且不分大小寫</p>
<p>console.log(pattern1.global); &#x2F;&#x2F; false<br>console.log(pattern1.ignoreCase); &#x2F;&#x2F; true<br>console.log(pattern1.multiline); &#x2F;&#x2F; false<br>console.log(pattern1.dotAll); &#x2F;&#x2F; false<br>console.log(pattern1.lastIndex); &#x2F;&#x2F; 0<br>console.log(pattern1.source); &#x2F;&#x2F; “[bs]ad”<br>console.log(pattern1.flags); &#x2F;&#x2F; “i”</p>
<p>let pattern2 &#x3D; new RegExp(“\[bs\]ad”, “i”); &#x2F;&#x2F; 和pattern1一樣<br>console.log(pattern2.global); &#x2F;&#x2F; false<br>console.log(pattern2.ignoreCase); &#x2F;&#x2F; true<br>console.log(pattern2.multiline); &#x2F;&#x2F; false<br>console.log(pattern2.dotAll); &#x2F;&#x2F; false<br>console.log(pattern2.lastIndex); &#x2F;&#x2F; 0<br>console.log(pattern2.source); &#x2F;&#x2F; “[bs]ad”<br>console.log(pattern2.flags); &#x2F;&#x2F; “i”</p>
<h5 id="1-2-2-RegExp-Instance-Methods"><a href="#1-2-2-RegExp-Instance-Methods" class="headerlink" title="1.2.2 RegExp Instance Methods"></a>1.2.2 RegExp Instance Methods</h5><ul>
<li>exec()是主要做match的函式, 回傳的物件是Array和一些額外屬性: index和input</li>
<li>index代表目前match到的字串起始位置, 而input是被比對的字串</li>
<li>假如沒有任何match, 回傳的物件是Null, 否則Array的第1筆資料是有比對到的字串, 第2筆以後是有用 () 分組的capturing group</li>
<li>RegExp物件會更新lastIndex的值, 代表下次要match的起始位置</li>
<li>RegExp的valueOf()是回傳本身RegExp物件</li>
</ul>
<p>let text &#x3D; ‘hello my mom my dad’;<br>let pattern &#x3D; &#x2F;hello( my mom( my dad)?)?&#x2F;gi;</p>
<p>let arr &#x3D; pattern.exec(text);<br>console.log(arr.index); &#x2F;&#x2F; 比對到的起始位置是 0<br>console.log(arr.input); &#x2F;&#x2F; 比對的原始字串 ‘hello my mom my dad’<br>console.log(arr[0]); &#x2F;&#x2F; 比對到的結果 ‘hello my mom my dad’<br>console.log(arr[1]); &#x2F;&#x2F; 最外層分組 ‘ my mom my dad’<br>console.log(arr[2]); &#x2F;&#x2F; 第2層分組 ‘ my dad’</p>
<p>&#x2F;&#x2F; 假如沒有用 g flag, pattern只會從第1個開始<br>let text &#x3D; ‘sad, bad, cad, dad’;<br>let pattern &#x3D; &#x2F;.ad&#x2F;; &#x2F;&#x2F; 前面有任意字元, 接著用ad</p>
<p>let arr &#x3D; pattern.exec(text);<br>console.log(arr.index); &#x2F;&#x2F; 比對到的起始位置是 0<br>console.log(arr[0]); &#x2F;&#x2F; 比對到的結果 ‘sad’<br>console.log(pattern.lastIndex); &#x2F;&#x2F; 下次比對仍從位置 0 開始</p>
<p>arr &#x3D; pattern.exec(text);<br>console.log(arr.index); &#x2F;&#x2F; 比對到的起始位置還是 0<br>console.log(arr[0]); &#x2F;&#x2F; 比對到的結果 ‘sad’<br>console.log(pattern.lastIndex); &#x2F;&#x2F; 下次比對仍從位置 0 開始</p>
<p>&#x2F;&#x2F; 假如有用 g flag, pattern不只比對到第1個字就停, 下次繼續往後面搜尋<br>let text &#x3D; ‘sad, bad, cad, dad’;<br>let pattern &#x3D; &#x2F;.ad&#x2F;g; &#x2F;&#x2F; 前面有任意字元, 接著用ad</p>
<p>let arr &#x3D; pattern.exec(text);<br>console.log(arr.index); &#x2F;&#x2F; 比對到的起始位置是 0<br>console.log(arr[0]); &#x2F;&#x2F; 比對到的結果 ‘sad’<br>console.log(pattern.lastIndex); &#x2F;&#x2F; 下次比對從位置 3 開始</p>
<p>arr &#x3D; pattern.exec(text);<br>console.log(arr.index); &#x2F;&#x2F; 比對到的起始位置是 5<br>console.log(arr[0]); &#x2F;&#x2F; 比對到的結果 ‘bad’<br>console.log(pattern.lastIndex); &#x2F;&#x2F; 下次比對從位置 8 開始</p>
<h5 id="1-2-3-RegExp-Constructor-Properties"><a href="#1-2-3-RegExp-Constructor-Properties" class="headerlink" title="1.2.3 RegExp Constructor Properties"></a>1.2.3 RegExp Constructor Properties</h5><ul>
<li>RegExp有些屬性是當前scope共通的屬性, 每個RegExp 物件會共用這些屬性</li>
<li>Constructor Properties並非所有瀏覽器有實作</li>
<li>常見的Constructor屬性有完整名字和短名字</li>
</ul>
<ol>
<li>input, 短名字為 $_ , 代表最近被比對的字串</li>
<li>lastMatch, 短名字為 $&amp;, 代表最近比對成功的字串</li>
<li>lastParen, 短名字為 $+, 代表最近比對的capturing group</li>
<li>leftContext, 短名字為 $`, 於input的lastMatch之前的字串</li>
<li>rightContext, 短名字為 $’, 於input的lastMatch之後的字串 </li>
<li>用$1、$2…到$9, 也能顯示最近比對的capturing group, 最多能取9個</li>
</ol>
<p>let text &#x3D; ‘choose character: captain teemo on duty’;<br>let pattern &#x3D; &#x2F;(.)aptain&#x2F;g;</p>
<p>if(pattern.test(text)){<br>   console.log(RegExp.input); &#x2F;&#x2F; 輸出 ‘choose character: captain teemo on duty’<br>   console.log(RegExp.$_); &#x2F;&#x2F; 輸出 ‘choose character: captain teemo on duty’</p>
<p>   console.log(RegExp.leftContext); &#x2F;&#x2F; 輸出 ‘choose character: ‘<br>   console.log(RegExp[“$`“]); &#x2F;&#x2F; 輸出 ‘choose character: ‘</p>
<p>   console.log(RegExp.rightContext); &#x2F;&#x2F; 輸出 ‘ teemo on duty’<br>   console.log(RegExp[“$’”]); &#x2F;&#x2F; 輸出 ‘ teemo on duty’</p>
<p>   console.log(RegExp.lastMatch); &#x2F;&#x2F; 輸出 ‘captain’<br>   console.log(RegExp[“$&amp;”]); &#x2F;&#x2F; 輸出 ‘captain’</p>
<p>   console.log(RegExp.lastParen); &#x2F;&#x2F; 輸出 ‘c’<br>   console.log(RegExp[“$+”]); &#x2F;&#x2F; 輸出 ‘c’<br>   console.log(RegExp.$1); &#x2F;&#x2F; 輸出 ‘c’<br>}</p>
<h5 id="1-2-4-Pattern-Limitations"><a href="#1-2-4-Pattern-Limitations" class="headerlink" title="1.2.4 Pattern Limitations"></a>1.2.4 Pattern Limitations</h5><ul>
<li>ECMAScript並非完整支援Regular Expression</li>
<li>不支援的功能有</li>
</ul>
<ol>
<li>開始和結尾A和Z anchor</li>
<li>往後尋找 lookbehind</li>
<li>union 和 intersection 類</li>
<li>atomic grouping</li>
<li>unicode</li>
<li>有命名的capturing group</li>
<li>單行s 和 無間隔x 的match 模式</li>
<li>條件式</li>
<li>comments</li>
</ol>
<h4 id="1-3-Primitive-Wrapper-Types"><a href="#1-3-Primitive-Wrapper-Types" class="headerlink" title="1.3 Primitive Wrapper Types"></a>1.3 Primitive Wrapper Types</h4><ul>
<li>有String, Boolean和Number, 可以用 new 的方式建立object包裝的物件</li>
<li>只要讀取這3種Primitive, JS背後會自動建立Wrapper Object, 讓我們能呼叫一些方法</li>
<li>使用自動Wrapper Object, 被動態指定的屬性都會立即銷毀</li>
</ul>
<p>let text &#x3D; ‘hello world’;<br>let text2 &#x3D; text.substring(3); &#x2F;&#x2F; 這背後使用Wrapper Object, 才能讓我們有函式可用</p>
<p>text.myWord &#x3D; ‘not work’;<br>console.log(text.myWord); &#x2F;&#x2F; 已經被銷毀, 所以輸出 undefined</p>
<h5 id="1-3-1-Boolean-Type"><a href="#1-3-1-Boolean-Type" class="headerlink" title="1.3.1 Boolean Type"></a>1.3.1 Boolean Type</h5><ul>
<li>建議不要用new Boolean物件, 容易有誤解</li>
</ul>
<p>let v1 &#x3D; new Boolean(false);<br>let result &#x3D; v1 &amp;&amp; true;<br>console.log(result); &#x2F;&#x2F; 輸出true, 因為v1 是 object, 並非Boolean值</p>
<h5 id="1-3-2-Number-Type"><a href="#1-3-2-Number-Type" class="headerlink" title="1.3.2 Number Type"></a>1.3.2 Number Type</h5><ul>
<li>常見數字格式化的方法 toFixed(數字)、toExponential(數字)、toPrecision(數字), 有些瀏覽器實作的範圍不一樣</li>
<li>和Boolean一樣, 也不建議用new Number物件</li>
<li>在ES6導入Number.isInteger()方法判斷是否整數、Number.isSafeInteger()判斷是否為整數且在Number.MAX_SAFE_INTEGER與 Number.MIN_SAFE_INTEGER範圍之間</li>
</ul>
<p> </p>
<h5 id="1-3-3-String-Type"><a href="#1-3-3-String-Type" class="headerlink" title="1.3.3 String Type"></a>1.3.3 String Type</h5><h6 id="1-3-3-1-The-JavaScript-Character"><a href="#1-3-3-1-The-JavaScript-Character" class="headerlink" title="1.3.3.1 The JavaScript Character"></a>1.3.3.1 The JavaScript Character</h6><ul>
<li>每個字元使用16bit儲存</li>
<li>JS的字串會判斷2種Unicode編碼: UCS-2 和 UTF-16 , 都是16bit</li>
<li>可用charCodeAt(位置)顯示該字元的編碼整數</li>
<li>可用fromCharCode(編碼整數1, 編碼整數2, ….)組成UTF-16表示的字串, 編碼範圍是從U+0000 到 U+FFFF, 也稱之為 Basic Multilingual Plane 涵蓋範圍 </li>
<li>有的特殊符號超過U+FFFF範圍, 會變成佔2個16bit, length和charAt等會取到異位的值, </li>
<li>在U+10000到U+1FFFD範圍稱之 Supplementary Multilingual Plane,</li>
</ul>
<p>let text1 &#x3D; ‘大家好’;<br>console.log(text1.charCodeAt(1)); &#x2F;&#x2F; 輸出 23478</p>
<p>let text2 &#x3D; String.fromCharCode(0x7a0b, 0x5f0f, 0x8a2d, 0x8a08);<br>console.log(text2); &#x2F;&#x2F; 輸出 程式設計</p>
<p>let text3 &#x3D; ‘😭’; &#x2F;&#x2F; 用哭臉符號作範例, 它用UTF-16為 0xD83D 0xDE2D<br>console.log(text3.length); &#x2F;&#x2F; 佔了2個16 bit, 所以length為2<br>console.log(text3.charAt(0)); &#x2F;&#x2F; 輸出無法識別的編碼 �<br>console.log(text3.charAt(1)); &#x2F;&#x2F; 輸出無法識別的編碼 �</p>
<p>console.log(text3.charCodeAt(0)); &#x2F;&#x2F; 輸出第1個16bit 55357 &#x3D; 0xD83D<br>console.log(text3.charCodeAt(1)); &#x2F;&#x2F; 輸出第2個16bit 36877 &#x3D; 0xDE2D</p>
<h6 id="1-3-3-2-The-normalize-method"><a href="#1-3-3-2-The-normalize-method" class="headerlink" title="1.3.3.2 The normalize() method"></a>1.3.3.2 The normalize() method</h6><ul>
<li>Unicode有些字是同樣的, 但出現在不同的編碼, 而不同編碼的字用 &#x3D;&#x3D; 比對必為false</li>
<li>依照<a href="http://www.unicode.org/reports/tr15/">http://www.unicode.org/reports/tr15/</a> , 共區分4種Normalization Form: C、D、KC、KD</li>
<li>normalization的規則, 很像象形符號的組合</li>
</ul>
<p>&#x2F;&#x2F; 符號 ḉ 的原始Unicode-16 是0x1E09, 也能從另外2種編碼取得</p>
<p>let c1 &#x3D; String.fromCharCode(0x1E09),<br> c2 &#x3D; String.fromCharCode(0x00E7, 0x0301),<br>c3 &#x3D; String.fromCharCode(0x0063, 0x0327, 0x0301);<br>console.log(c1); &#x2F;&#x2F; 輸出 ḉ<br>console.log(c2); &#x2F;&#x2F; 輸出 ḉ<br>console.log(c3); &#x2F;&#x2F; 輸出 ḉ</p>
<p>console.log(c1 &#x3D;&#x3D;&#x3D; c2); &#x2F;&#x2F; 輸出 false<br>console.log(c2 &#x3D;&#x3D;&#x3D; c3); &#x2F;&#x2F; 輸出 false<br>console.log(c3 &#x3D;&#x3D;&#x3D; c1); &#x2F;&#x2F; 輸出 false</p>
<p>&#x2F;&#x2F; U+1E09 已經是 0x00E7&#x2F;0x0301 的 NFC&#x2F;NFKC的normalization, 所以比對仍相等<br>console.log(c1 &#x3D;&#x3D;&#x3D; c1.normalize(“NFD”)); &#x2F;&#x2F; false<br>console.log(c1 &#x3D;&#x3D;&#x3D; c1.normalize(“NFC”)); &#x2F;&#x2F; true<br>console.log(c1 &#x3D;&#x3D;&#x3D; c1.normalize(“NFKD”)); &#x2F;&#x2F; false<br>console.log(c1 &#x3D;&#x3D;&#x3D; c1.normalize(“NFKC”)); &#x2F;&#x2F; true</p>
<p>&#x2F;&#x2F; U+00E7&#x2F;U+0301 尚未normalization, 所以比對都不相等<br>console.log(c2 &#x3D;&#x3D;&#x3D; c2.normalize(“NFD”)); &#x2F;&#x2F; false<br>console.log(c2 &#x3D;&#x3D;&#x3D; c2.normalize(“NFC”)); &#x2F;&#x2F; false<br>console.log(c2 &#x3D;&#x3D;&#x3D; c2.normalize(“NFKD”)); &#x2F;&#x2F; false<br>console.log(c2 &#x3D;&#x3D;&#x3D; c2.normalize(“NFKC”)); &#x2F;&#x2F; false</p>
<p>&#x2F;&#x2F; U+0063&#x2F;U+0327&#x2F;U+0301 已經是 0x00E7&#x2F;0x0301 的 NFD&#x2F;NFKD的normalization, 所以比對仍相等<br>console.log(c3 &#x3D;&#x3D;&#x3D; c3.normalize(“NFD”)); &#x2F;&#x2F; true<br>console.log(c3 &#x3D;&#x3D;&#x3D; c3.normalize(“NFC”)); &#x2F;&#x2F; false<br>console.log(c3 &#x3D;&#x3D;&#x3D; c3.normalize(“NFKD”)); &#x2F;&#x2F; true<br>console.log(c3 &#x3D;&#x3D;&#x3D; c3.normalize(“NFKC”)); &#x2F;&#x2F; false</p>
<h6 id="1-3-3-3-String-Manipulation-Methods"><a href="#1-3-3-3-String-Manipulation-Methods" class="headerlink" title="1.3.3.3 String-Manipulation Methods"></a>1.3.3.3 String-Manipulation Methods</h6><ul>
<li>concat可串接多個字串, 但常用 + 運算符號</li>
<li>slice(), substring()和 substr()都可以回傳子字串, 但用法有些不同, 可參考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#x2F;String&#x2F;substring</a></li>
</ul>
<h6 id="1-3-3-4-String-Location-Methods"><a href="#1-3-3-4-String-Location-Methods" class="headerlink" title="1.3.3.4 String Location Methods"></a>1.3.3.4 String Location Methods</h6><ul>
<li>indexOf()和lastIndexOf()可找字串的起始位置, 前者從前面找, 後者從後面找, 沒找到回傳-1</li>
<li>都可以代第2個參數, 開始尋找的位置.</li>
</ul>
<h6 id="1-3-3-5-String-Inclusion-Methods"><a href="#1-3-3-5-String-Inclusion-Methods" class="headerlink" title="1.3.3.5 String Inclusion Methods"></a>1.3.3.5 String Inclusion Methods</h6><ul>
<li>ES6導入的功能, 分別是startWith(), endWith(), includes(), 代表從開頭、結尾和中間是否有存在某字串, 若符合回傳true, 否則為false.</li>
<li>startWith()和includes()可以代第2個參數, 開始尋找的位置.</li>
</ul>
<h6 id="1-3-3-6-The-trim-Method"><a href="#1-3-3-6-The-trim-Method" class="headerlink" title="1.3.3.6 The trim() Method"></a>1.3.3.6 The trim() Method</h6><ul>
<li>trim()會刪除前後有空白的字串</li>
<li>trimLeft()和trimRight()則只刪除最前&#x2F;最後的空白字串</li>
</ul>
<h6 id="1-3-3-7-The-repeat-Method"><a href="#1-3-3-7-The-repeat-Method" class="headerlink" title="1.3.3.7 The repeat() Method"></a>1.3.3.7 The repeat() Method</h6><ul>
<li>可代入數字, 代表要重複字串的次數</li>
</ul>
<h6 id="1-3-3-8-The-padStart-and-padEnd-Method"><a href="#1-3-3-8-The-padStart-and-padEnd-Method" class="headerlink" title="1.3.3.8 The padStart() and padEnd() Method"></a>1.3.3.8 The padStart() and padEnd() Method</h6><ul>
<li>有2個參數, 若只代第1個參數數字, 代表要擴充成長度為n的字串, 預設補上空白</li>
<li>第2個參數是要擴充的字串</li>
</ul>
<h6 id="1-3-3-9-String-Iterators-and-Destructuring"><a href="#1-3-3-9-String-Iterators-and-Destructuring" class="headerlink" title="1.3.3.9 String Iterators and Destructuring"></a>1.3.3.9 String Iterators and Destructuring</h6><ul>
<li>string有iterator, 可以歷遍每個字元</li>
<li>基於iterator, 可以用for … of的方式取每個字元</li>
<li>用[…某字串]可以拆成字元陣列(Destructuring)</li>
</ul>
<p>let text1 &#x3D; ‘hello’;<br>let stringIterator &#x3D; text1[Symbol.iterator]();<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: ‘h’, done: false}<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: ‘e’, done: false}<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: ‘l’, done: false}<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: ‘l’, done: false}<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: ‘o’, done: false}<br>console.log(stringIterator.next()); &#x2F;&#x2F; 輸出 {value: undefined, done: true}</p>
<p>for(const c of text1){<br>console.log(c); &#x2F;&#x2F; 依序輸出 h e l l o<br>}</p>
<p>console.log([…text1]); &#x2F;&#x2F; 輸出 [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]</p>
<h6 id="1-3-3-10-String-Case-Methods"><a href="#1-3-3-10-String-Case-Methods" class="headerlink" title="1.3.3.10 String Case Methods"></a>1.3.3.10 String Case Methods</h6><ul>
<li>除了toLowerCase(), toUpperCase()轉換大小寫, 還有toLocaleLowerCase(), toLocaleUpperCase()能指定特定地區的大小寫, 比如土耳其語.</li>
<li>不確定要執行的環境, 直接用locale的方法做大小寫轉換</li>
</ul>
<h6 id="1-3-3-11-String-Pattern-Matching-Methods"><a href="#1-3-3-11-String-Pattern-Matching-Methods" class="headerlink" title="1.3.3.11 String Pattern-Matching Methods"></a>1.3.3.11 String Pattern-Matching Methods</h6><ul>
<li>這些pattern方法都支援RegExp物件</li>
<li>用字串的match(pattern)等同RegExp的exec(pattern)</li>
<li>search(pattern)是從字串的頭往後搜尋有比對到pattern第1個出現位置, 若沒比對到則回傳-1. 和indexOf差異是能用RegExp</li>
<li>replace(pattern, 要替換的單字)能找到pattern符合的字並替換掉. 其中要替換的單字能用特殊的字串, 比如用$1可以把captured group回填</li>
<li>replace(pattern, someFunction), 可以用某個function來做替換的邏輯</li>
</ul>
<p>let text &#x3D; ‘sad, bad, cad, dad’;<br>let result &#x3D; text.replace(&#x2F;(.ad)&#x2F;g, ‘myWord ($1)’);<br>console.log(result); &#x2F;&#x2F; 輸出 myWord (sad), myWord (bad), myWord (cad), myWord (dad)</p>
<p>let text2 &#x3D; ‘I am a boy, my dog is tall. So what is your name?’;<br>function replaceArticle(text){<br>return text.replace(&#x2F;[,.?]&#x2F;g, function(match, pos, originalText){<br> switch(match){<br> case ‘,’:<br> return ‘!’;<br> case ‘.’:<br> return ‘*‘;<br> case ‘?’:<br> return ‘#’;<br> }<br> });<br>}<br>console.log(replaceArticle(text2)); &#x2F;&#x2F; 輸出 I am a boy! my dog is tall* So what is your name#</p>
<ul>
<li>split也能支援RegExp pattern做切割字串成陣列, 第2個參數是切割後陣列的最大Size</li>
</ul>
<h6 id="1-3-3-12-The-localeCompare-Method"><a href="#1-3-3-12-The-localeCompare-Method" class="headerlink" title="1.3.3.12 The localeCompare() Method"></a>1.3.3.12 The localeCompare() Method</h6><ul>
<li>做字串的字典排序比對, 小的回傳 -1、相等回傳0、大的回傳1</li>
<li>支援locale代表大小寫有差異</li>
</ul>
<h6 id="1-3-3-13-HTML-Methods"><a href="#1-3-3-13-HTML-Methods" class="headerlink" title="1.3.3.13 HTML Methods"></a>1.3.3.13 HTML Methods</h6><ul>
<li>字串有HTML相關的方法, 產生HTML字串, 比如anchor, big, link等</li>
</ul>
<p>let text &#x3D; ‘Hello World’;<br>console.log(text.anchor(‘test’)); &#x2F;&#x2F; 輸出 <a name="test">Hello World</a><br>console.log(text.big()); &#x2F;&#x2F; 輸出 <big>Hello World</big><br>console.log(text.link(‘<a href="http://www.example.com/">http://www.example.com</a>‘)); &#x2F;&#x2F; 輸出 <a href="http://www.example.com">Hello World</a></p>
<h4 id="1-4-Singleton-Built-in-Objects"><a href="#1-4-Singleton-Built-in-Objects" class="headerlink" title="1.4 Singleton Built-in Objects"></a>1.4 Singleton Built-in Objects</h4><ul>
<li>不依賴host environment的物件, 且在JS程式執行前已初始化.</li>
<li>包含Global和Math 2種.</li>
</ul>
<h5 id="1-4-1-The-Global-Object"><a href="#1-4-1-The-Global-Object" class="headerlink" title="1.4.1 The Global Object"></a>1.4.1 The Global Object</h5><ul>
<li>不屬於特定物件的屬性和方法, 那就會是Global的屬性和方法.</li>
<li>比如parseInt(), isNaN()等, 都是Global的方法</li>
</ul>
<h6 id="1-4-1-1-URI-Encoding-Methods"><a href="#1-4-1-1-URI-Encoding-Methods" class="headerlink" title="1.4.1.1 URI-Encoding Methods"></a>1.4.1.1 URI-Encoding Methods</h6><ul>
<li>encodeURI()和encodeURIComponent()可對URI做編碼, 將一些不符合URI的字元做UTF-8編碼</li>
<li>encodeURI只對部分字元編碼、encodeURIComponent()全部字元都編碼</li>
<li>實務上常用encodeURIComponent對query string做編碼</li>
</ul>
<p>let text &#x3D; ‘<a href="https://www.example.com/special%20and%20words/#mobile-devices">https://www.example.com/special%20and%20words/#mobile-devices</a>‘;<br>console.log(encodeURI(text)); &#x2F;&#x2F; 輸出 <a href="https://www.example.com/special%2520and%2520words/#mobile-devices">https://www.example.com/special%2520and%2520words/#mobile-devices</a><br>console.log(encodeURIComponent(text)); &#x2F;&#x2F; 輸出 https%3A%2F%2F<a href="http://www.example.com%2Fspecial%2520and%2520words%2F%23mobile-devices">www.example.com%2Fspecial%2520and%2520words%2F%23mobile-devices</a></p>
<ul>
<li>對應解碼的方法為decodeURI()和decodeURIComponent()</li>
<li>encodeURI&#x2F;decodeURI等已取代舊版的escape&#x2F;unescape</li>
</ul>
<h6 id="1-4-1-2-The-eval-Method"><a href="#1-4-1-2-The-eval-Method" class="headerlink" title="1.4.1.2 The eval() Method"></a>1.4.1.2 The eval() Method</h6><ul>
<li>eval()可以將ES語法做直譯, 並且裡面的變數、函式等都可是同個Scope</li>
</ul>
<p>eval(“console.log(‘hello’)”); &#x2F;&#x2F; 輸出hello</p>
<p>let myWord &#x3D; ‘Testing’;<br>eval(“console.log(myWord)”); &#x2F;&#x2F; 輸出myWord</p>
<p>eval(“function sayHi() { console.log(‘hiiii’); }”);<br>sayHi(); &#x2F;&#x2F; 輸出 hiiii</p>
<ul>
<li>在strict mode環境, 在eval宣告的變數、函式都不能被外部用, 且eval不能被指定為變數</li>
<li>小心使用eval(), 以免 XSS 攻擊</li>
</ul>
<h6 id="1-4-1-3-Global-Object-Properties"><a href="#1-4-1-3-Global-Object-Properties" class="headerlink" title="1.4.1.3 Global Object Properties"></a>1.4.1.3 Global Object Properties</h6><ul>
<li>目前有這些properties:</li>
</ul>
<ol>
<li>undefined</li>
<li>NaN</li>
<li>Infinity</li>
<li>Object</li>
<li>Array</li>
<li>Function</li>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
<li>Date</li>
<li>RegExp</li>
<li>Symbol</li>
<li>Error</li>
<li>EvalError</li>
<li>RangeError</li>
<li>ReferenceError</li>
<li>SyntaxError</li>
<li>TypeError</li>
<li>URIError</li>
</ol>
<h6 id="1-4-1-4-The-Window-Object"><a href="#1-4-1-4-The-Window-Object" class="headerlink" title="1.4.1.4 The Window Object"></a>1.4.1.4 The Window Object</h6><ul>
<li>ES無規範如何直接存取Global Object, 但Web的全域變數和方法, 都可存取window物件取得.</li>
<li>可用return this取得Global object</li>
</ul>
<p>var text &#x3D; ‘Hello World’; &#x2F;&#x2F; 要用var, 才會指定到window物件</p>
<p>function sayHello(){<br>console.log(window.text); &#x2F;&#x2F; text已在window物件<br>}</p>
<p>window.sayHello(); &#x2F;&#x2F; sayHello已在window物件, 輸出 Hello World</p>
<p>&#x2F;&#x2F; this能代表global, 在debug console能看見global變數有許多瀏覽器相關的變數和函數<br>let global &#x3D; function(){<br>return this;<br>}();</p>
<h5 id="1-4-2-The-Math-Object"><a href="#1-4-2-The-Math-Object" class="headerlink" title="1.4.2 The Math Object"></a>1.4.2 The Math Object</h5><ul>
<li>提供計算相關的常數和函式</li>
<li>Math提供的函式會比自己寫的函式還要有效率, 但因瀏覽器、作業系統等環境, 精準度會有差異</li>
</ul>
<h6 id="1-4-2-1-Math-Object-Properties"><a href="#1-4-2-1-Math-Object-Properties" class="headerlink" title="1.4.2.1 Math Object Properties"></a>1.4.2.1 Math Object Properties</h6><ul>
<li>常見的常數</li>
<li>Math.E</li>
<li>Math.LN10</li>
<li>Math.LN2</li>
<li>Math.LOG2E</li>
<li>Math.LOG10E</li>
<li>Math.PI</li>
<li>Math.SQRT1_2</li>
<li>Math.SQRT2</li>
</ul>
<h6 id="1-4-2-2-The-min-and-max-Methods"><a href="#1-4-2-2-The-min-and-max-Methods" class="headerlink" title="1.4.2.2 The min() and max() Methods"></a>1.4.2.2 The min() and max() Methods</h6><ul>
<li>回傳一組數字裡最小&#x2F;最大值</li>
<li>如果是array, 要用apply, 第1個參數代入Math, 第2個參數帶入陣列</li>
</ul>
<p>console.log(Math.min(1, 2, 3)); &#x2F;&#x2F; 輸出 1<br>console.log(Math.max.apply(Math, [4, 5, 6])); &#x2F;&#x2F; 輸出 6</p>
<h6 id="1-4-2-3-Rounding-Methods"><a href="#1-4-2-3-Rounding-Methods" class="headerlink" title="1.4.2.3 Rounding Methods"></a>1.4.2.3 Rounding Methods</h6><ul>
<li>Rounding的中文是捨入, Math有4種捨入函式</li>
</ul>
<ol>
<li>Math.ceil(): 回傳ceiling function的整數結果</li>
<li>Math.floor(): 回傳floor function的整數結果</li>
<li>Math.round(): 四捨五入的函式, 小數點 &gt;&#x3D; 0.5 則進位</li>
<li>Math.fround(): 將浮點數轉換成最接近的single precision 32 bit表示. 可以參考此網站做驗證 <a href="https://www.exploringbinary.com/floating-point-converter/">https://www.exploringbinary.com/floating-point-converter/</a></li>
</ol>
<p>console.log(Math.ceil(11.6)); &#x2F;&#x2F; 輸出 12<br>console.log(Math.ceil(11.1)); &#x2F;&#x2F; 輸出 12</p>
<p>console.log(Math.floor(11.6)); &#x2F;&#x2F; 輸出 11<br>console.log(Math.floor(11.1)); &#x2F;&#x2F; 輸出 11</p>
<p>console.log(Math.round(11.6)); &#x2F;&#x2F; 輸出 12<br>console.log(Math.round(11.1)); &#x2F;&#x2F; 輸出 11</p>
<p>console.log(Math.fround(0.4)); &#x2F;&#x2F; JS的浮點數都是64-bit, 實際上0.4是0.40000000000000002220446049250313080847263336181640625, 轉成32-bit是 0.4000000059604644775390625<br>console.log(Math.fround(0.5)); &#x2F;&#x2F; 輸出 0.5</p>
<h6 id="1-4-2-4-The-random-Method"><a href="#1-4-2-4-The-random-Method" class="headerlink" title="1.4.2.4 The random() Method"></a>1.4.2.4 The random() Method</h6><ul>
<li>Math.random()會回傳 0~1之間的數字, 但不包含0與1</li>
<li>實用的方式是可以從某lowerValue ~ upperValue裡隨機挑1個整數, 延伸的用法是隨機挑選陣列裡的值</li>
<li>密碼學產生隨機數字建議用window.crypto.getRandomValues()</li>
</ul>
<p>function selectFrom(lowerValue, upperValue){<br>let choices &#x3D; upperValue - lowerValue + 1;<br> return Math.floor(Math.random() * choices + lowerValue);<br>}</p>
<p>let num &#x3D; selectFrom(3, 6); &#x2F;&#x2F; 從3 4 5 6 的4個數字挑1個<br>console.log(num);</p>
<p>let words &#x3D; [‘hello’, ‘sky’, ‘snow’, ‘happy’];<br>console.log(words[selectFrom(0, words.length - 1)]); </p>
<h6 id="1-4-2-5-Other-Methods"><a href="#1-4-2-5-Other-Methods" class="headerlink" title="1.4.2.5 Other Methods"></a>1.4.2.5 Other Methods</h6><ul>
<li>其它的方法請參考 MDN <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Math</a></li>
</ul>
<h4 id="2-參考資料"><a href="#2-參考資料" class="headerlink" title="2. 參考資料"></a>2. 參考資料</h4><ol>
<li><a href="https://www.amazon.com/-/zh_TW/Matt-Frisbie/dp/1119366445?crid=2IKRLQD88C73Q&keywords=javascript&qid=1640523661&sprefix=javascrip,aps,272&sr=8-24&linkCode=ll1&tag=glj89893320b-20&linkId=0a4b475800517718840fceead024db61&language=zh_TW&ref_=as_li_ss_tl">Professional JavaScript for Web Developers 4th Edition, Chapter 5 : Basic Reference Types, Matt Frisbie.</a></li>
</ol>
<p>Javascript Basic Reference Type</p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>程式解題的學習</title>
    <url>/2014/06/16/programming-contest-learning/</url>
    <content><![CDATA[<p>程式解題的學習</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/05/programming-g30ebf4378_1920-1024x683.jpg" alt="程式解題"></p>
<p>Photo from <a href="https://pixabay.com/photos/programming-developing-startup-593312/">https://pixabay.com/photos/programming-developing-startup-593312/</a></p>
<p>真的畢業了! 找到適當的BLOG可以寫東西啦~~~就是GOOGLE的BLOGGER!有好多Plugin可以用、template可以自己設定, 在沒有網頁空間下, 覺得這蠻不錯的.</p>
<p>此篇是參考NPSC補完計畫，結合其內容與我的種種解題的學習過程與方法～</p>
<p>身邊的同學或學弟妹常會問如何學程式、提高程式設計能力或者如何解題。</p>
<p>　　我不是像中央MORRIS、清大楊易霖、台大以及其他各種怪物等國手，<br>但是在這多年來解題的過程有許多說不完的心得與想法，<br>在此分享給想挑戰程式設計比賽的人，<br>當作一個學習途徑的參考。</p>
<p>　　以下內容是以程式解題方向為主的學習過程與方法，無法涵蓋所有程式設計的學習方法，但我想共通點是一樣的。</p>
<h2 id="先熟練C-C-或JAVA基本語法"><a href="#先熟練C-C-或JAVA基本語法" class="headerlink" title="先熟練C&#x2F;C++或JAVA基本語法"></a>先熟練C&#x2F;C++或JAVA基本語法</h2><p>　　找一本你覺得看起來最舒服的書，<br>不要說去找什麼很有名的聖經本之類的，<br>除非底子已經很好，可以再來研讀有深度的書。</p>
<p>最最最最最基本的是需要以下（很重要所以強調）：</p>
<p>懂標準輸入輸出、變數宣告、<br>if-else、switch、while(do-while)、for等流程控制語法、<br>陣列、字串、struct的使用（C&#x2F;C++）、class的使用(JAVA、c++）<br>以及簡單的排序法。<br>進階一點就再學自定函數、遞迴函數等，<br>這階段主要是學習程式的語法，<br>讓你的想法可以很快地化成程式碼，<br>不用馬上說想寫很困難的程式。</p>
<h2 id="進入線上程式解題系統練習"><a href="#進入線上程式解題系統練習" class="headerlink" title="進入線上程式解題系統練習"></a>進入線上程式解題系統練習</h2><p>學程式絕對不只是要用”看”的就能學會，<br>學程式絕對不只是要用”看”的就能學會，<br>學程式絕對不只是要用”看”的就能學會，<br>學程式絕對不只是要用”看”的就能學會，<br>學程式絕對不只是要用”看”的就能學會，</p>
<p>（很重要所以我寫五行）<br>　　有些重要課程只有講理論而沒實際操刀寫程式，實在是無法深刻了解其中的奧妙而無法成長，特別是遇到需要 debug 的技巧是書上不會教的！<br>因為沒有人會有那個耐心幫你檢查所有的程式是不是有 bug，<br>所以找一個可以自動 Judge 的系統是很重要的～</p>
<p>新手的話，推薦兩個平台</p>
<p>第一個：「高中生程式解題系統」<br><a href="http://l.facebook.com/l.php?u=http://zerojudge.tw/&h=fAQHqUcHd&s=1">http://zerojudge.tw/</a><br>　　歷史非常悠久的台灣中文解題系統，是由高雄師範大學經營，裡面的題庫大都是中文，也是高中職學生常用的解題訓練平台，許多TOI、IOI國手大都在這起步。可惜題目並沒有做難易度分類，即使在基礎題庫的題目也有很難的，需要有人指導會比較清楚。</p>
<p>第二個：「ITSA的E-TUTOR」<br><a href="http://l.facebook.com/l.php?u=http://e-tutor.itsa.org.tw/e-Tutor/&h=pAQFbewZS&s=1">http://e-tutor.itsa.org.tw/e-Tutor/</a><br>　　近年來新的中文解題系統，網站上有中英文的題目，每種題目又有分各類型的題目，<br>更是有做難易度的區隔，讓學解題的使用者有個清楚的方向。<br>可惜這平台缺點是常有題目的敘述不完整，比如輸入測資的範圍沒說明等，<br>會給使用者額外的困擾。</p>
<h2 id="開始學習資料結構、演算法"><a href="#開始學習資料結構、演算法" class="headerlink" title="開始學習資料結構、演算法"></a>開始學習資料結構、演算法</h2><p>　　基本題解到一個程度，會發現學的東西不夠用，<br>這時候就要進入下一個階段,<br>開始學習資料結構和演算法了。</p>
<p>　　這部分一樣是去書店找一本你看得順眼的書,<br>以我個人而言，在資料結構的部分，除了有原文聖經本<br><a href="https://amzn.to/3TMi9Sv">Ellis Horowitz寫的Fundamentals of Data Structures in C(或C++)</a><br>我有另外買<a href="http://bit.ly/3JJX6va">蔡明志的「資料結構–使用C++(也有C++、JAVA版)」</a><br>另外有網友推薦<a href="http://bit.ly/3z8PNZe">胡昭民的「圖解資料結構」</a><br>選一本即可，主要是看懂資料結構的觀念,<br>書裡程式碼希望是能研讀，最好是實作。<br>而有些樹的章節裡面, 只要看到二元樹(包括二元搜尋樹、Heap)就夠了,<br>後面AVL-Tree、2-3-4 Tree、B-Tree等可以不用看，基本上解題不會用到。</p>
<p>　　演算法的書, 之前我上課原文書是用　<a href="https://amzn.to/3lAiGdK">Anany V. Levitin寫的Introduction to the Design &amp; Analysis of Algorithms</a>，而中文書推<a href="http://bit.ly/3K6hyrB">薦蔡宗翰的「演算法：使用C++虛擬碼」</a>，這本的內容讓我學到很多。解題的程式最常會用的演算法包含各個擊破法 （Divide-and-Conquer）、動態規劃(Dynamic Programming)、貪婪演算法(Greedy)、<br>回溯(Backtracking)、分支界限法(Branch-and-Bound)等，有時解題遇到的問題可以用很多種演算法解。<br>資料結構與演算法的書讀完後，還不足的可以到「演算法筆記」挖資料<a href="http://l.facebook.com/l.php?u=http://www.csie.ntnu.edu.tw/~u91029/&h=YAQF8w6u-&s=1">http://www.csie.ntnu.edu.tw/~u91029&#x2F;</a><br>這網站陪我好幾年，也有我幫站長debug文章的痕跡，可惜現在終止營運，有點可惜～<br>演算法聖經本是<a href="https://amzn.to/40CxxmB">MIT教授Cormen寫的Introduction to Algorithms</a>，以台清交成資訊工程學生以及國手，幾乎都看這本學起，書的內容講的很完整，說是聖經本不為過，真的要讀可以啃這本，但不建議讀中文翻譯本，翻譯的很爛。</p>
<h2 id="使用進階的線上程式解題系統"><a href="#使用進階的線上程式解題系統" class="headerlink" title="使用進階的線上程式解題系統"></a>使用進階的線上程式解題系統</h2><p>　　第二段提到高中生程式解題系統(ZeroJudge)、E-TUTOR<br>雖然裡面部分題目比較簡單，可以很容易建立自信心、學習基本解題方法。<br>但到達某一程度後，有些題目會很難、甚至學習成長的幫助不大，此時可以改到其他網站練習。</p>
<p>　　首先最推薦的就是最多人用過， 俗稱 ACM 的 UVa Online Judge,<br><a href="http://l.facebook.com/l.php?u=http://uva.onlinejudge.org/&h=UAQHC2g_d&s=1">http://uva.onlinejudge.org/</a><br>而「Lucky貓的ACM園地」有提供一些題目的中譯還有難易度分級,<br><a href="http://l.facebook.com/l.php?u=http://luckycat.kshs.kh.edu.tw/&h=AAQE6XZVF&s=1">http://luckycat.kshs.kh.edu.tw/</a><br>可以搭配使用。當然是希望能看原文直接解題是最好，畢竟國際解題全都是用英文出題。</p>
<p>　　第 二個是Uhunt，這不是新的解題系統，而是UVa的實況系統，是由新加坡大學的解題團隊所建立的網站，提供現在全世界有哪些人在解題、解題狀況如何、排 名如何、程式執行時間多長，對我而言是個很刺激的網站，且長久下來會看見一些很奇怪的熟ID。而uhunt上中間有一個Competitive Programming Exercises，是新加坡解題團隊所分類的題目，有分好題目類型與難易度，也是提供使用者很完整的解題方向。</p>
<h2 id="進階解題書籍"><a href="#進階解題書籍" class="headerlink" title="進階解題書籍"></a>進階解題書籍</h2><p>　　前面提的資料結構與演算法書籍，只是＂基礎知識＂而已，有時學完後還是無法對某些題目想出方法，此時推薦幾本書籍。<br>第一是劉汝佳撰寫的「<a href="https://amzn.to/40wjqz8">算法竞赛入门经典</a>」跟「<a href="https://amzn.to/3K9fOh9">算法竞赛入门经典——训练指南</a>」<br>， 在台灣去年有代理出繁體版，名稱分別為《提升程式設計的邏輯思考力─國際程式設計競賽之演算法原理、題型、解題技巧與重點解析》與《提升程式設計的解題思 考力─國際演算法程式設計競賽訓練指南》。這兩本書而言，初學者先讀「算法竞赛入门经典」，讀完後再來讀「算法竞赛入门经典——训练指南」。書的內容就是 專門講解如何將基本的資料結構與演算法知識來解決程式解題的題目。以Uva而言，題目是變化多端，有些題目若沒有人指導確實很難自己想出來，而這些書提供 很多整合資料結構與演算法的概念，提升解題者的思路。<br>另外一題，劉汝佳起初是中國的解題國手，現任中國專業解題教練與ACM-ICPC命題委員，中國資訊學生幾乎都聽過他名字。他寫了這些書更是帶動中國的解題氣氛，每年上海交通大學幾乎都會進到ACM-ICPC決賽的前幾名，真的是很恐怖。</p>
<p>第二本是<a href="https://amzn.to/3nhhxYN">日本國手寫的プログラミングコンテストチャレンジブック</a>，台灣也有代理成翻譯書，叫做《<a href="http://bit.ly/42G1zaU">培養與鍛鍊程式設計的邏輯腦：世界級程式設計大賽的知識、心得與解題分享》</a>，也是跟劉汝佳寫得差不多，只是這本書是拿POJ跟GCJ的題目來講解。</p>
<h2 id="學海無涯"><a href="#學海無涯" class="headerlink" title="學海無涯"></a>學海無涯</h2><p>　　以解題而言，初學者最容易犯的錯，以為只看書就懂什麼叫做資料結構或演算法，甚至只挑簡單題來做，這樣是永遠不會成長。以我個人而言，大學的資料結構與演算 法都是有寫程式作業，且佔總成績很重，不寫好就是等著被當掉，因此有很多時間花在學好資料結構與演算法的理論與程式設計。從大二開始就跟著學長姐進入解題 比賽這一條不歸路（？），起初真的如同前面提到，即使課程學過資料結構與演算法的基礎知識，卻還是不會轉換成解題的方法，意思就是解題寫太少，且又碰得太 簡單，才沒有進步。之後到了大三，大概也才解了一百多題Uva題目，但覺得學的還是少。直到轉學至長榮，突然有個發神經的動力，開始瘋狂解題，真正體會到 資料結構與演算法的實作能力與奧妙之處，短短一年多解了４百題，這趟過程雖然辛苦，但是卻非常值得！<br>　　從以前去中山、成大的全國大專程式競 賽、南區程式競賽等比賽，常常看見很熟悉的成大選手臉孔，直到現在遇到的同一輩與新一代的強選手，這趟比賽過程值得回憶。最後今年的ITSA桂冠賽仍沒獲 獎，但也還是值得了，至少跟成大同解數還蠻高興(?)。而CPE(大學程式能力檢定)在上禮拜二拿下A+的成績，也是了無遺憾！<br>　　希望這篇文章有能幫助到有共同志趣在解題上的人，更希望能帶動程式解題氣氛，解題只有好處沒壞處，也如演算法筆記所述，解題能學到以下這五種能力：<br>　　一、智力思考：藉由智力測驗問題、益智遊戲（如數獨、孔明棋、倉庫番）、數學科普書等等，可以活絡大腦思路，培養觀察問題與分析問題的能力。<br>　　二、數學：從學校教科書可以學到很多數學概念、數學方法、甚至是數學公式，套用在問題上面來解決問題。<br>　　三、計算學：從學校教科書和網路上的資源，可以學到很多計算方法，套用在問題上面來解決問題。<br>　　四、程式語言：從程式語言的書籍（ <a href="https://amzn.to/3z6swqz">C++ Primer</a> 、 <a href="https://amzn.to/3zd3x4U">Effective C++</a> 、<a href="http://bit.ly/3z5LC08">程式設計師的自我修養</a>）、計算機概論等書中學習。<br>　　五、程式設計：從 open source 與其他人寫的程式碼中學習一些寫程式的原則以及漂亮的寫法。<br>所以，解題Z&gt;B是百分百正確的!</p>
<h2 id="疑問"><a href="#疑問" class="headerlink" title="疑問"></a>疑問</h2><p>　　也有人會問，做解題那麼多對實際撰寫專題（系統）有用嗎？這要回答「部分有用」，畢竟一個系統就是要解決一大堆問題集合的工程方法，而解題只有解一部分小問 題。但是學過演算法會知道，要想辦法把問題切成子問題來解決，做系統也一樣，每一個系統可以切成各種功能的子系統，每一子系統是針對特定問題作解決的方 案。因此一個子系統的功能完整，正是一個（數個）程式的執行能力，而程式又如一位Niklaus Wirth大師所說：「程式　＝　演算法＋資料結構」。好得程式可以整合出一個好的系統，這是我個人對系統實作的觀念，所以解題學的好，仍然對做系統有幫 助。只是有些是解題學不到的，比如如何使用API來做完成一個子系統的功能，必須要有閱讀文件的能力，解題上沒有閱讀文件的學習方法。</p>
<p>-——- 2014&#x2F;6&#x2F;16補充———<br>　　這陣子接觸到2048 bot大賽，在這過程學到何謂對抗搜尋的branch-and-bound演算法，包含minimax、alpha-beta prune、expectimax、negascout等方法。目前ACM題目的解題我還沒遇到剪枝的題目，藉由這2048比賽的機會，學到了剪枝的精神！只是國內研究單位太強了，交大的居然能十幾%的16384 Tile….超好奇他們演算法能快狠準到此成績。</p>
<p>程式解題的學習</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>程式解題</category>
      </categories>
  </entry>
  <entry>
    <title>Refactoring Example - RPG Game Hunting Mission</title>
    <url>/2022/01/09/refactoring-2nd-chapter-1-example/</url>
    <content><![CDATA[<h1 id="Welcome-to-Refactoring-World"><a href="#Welcome-to-Refactoring-World" class="headerlink" title="Welcome to Refactoring World!"></a>Welcome to Refactoring World!</h1><h4 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h4><p>I will write a series of refactoring article based on Martin Fowler’s <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. This book introduced many useful refactoring techniques. So I want to share what I learned from this book by explaining some refactoring examples and noting important concepts&#x2F;tips. The first one refactoring example in this article!</p>
<p>In the chapter 1 of the book, it introduced a case about the bill calculation of performing theatrical plays. The case first was an ugly function code to generate a bill. After some refactoring skills, the code looked CLEAR. How beautiful the code is!</p>
<p>According to this case, I will mock a similar function code to show how the refactoring skill works in this example. The following code is written by C# &amp; .NET 5.</p>
<h4 id="2-RPG-Game-Hunting-Mission"><a href="#2-RPG-Game-Hunting-Mission" class="headerlink" title="2. RPG Game Hunting Mission"></a>2. RPG Game Hunting Mission</h4><p>This scenario is a RPG Game. In a RPG Game, a player can take hunting mission to earn bonus and experience. If player completes the mission, then mission manager will give you the bonus&#x2F;experience. The type and level of monster killed by player determines the amount of bonus and experience.</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/122222.jpg" alt="refactoring example rpg game"></p>
<p>Bless Unleashed (Picture Source: <a href="https://draft.blogger.com/blog/post/edit/760085690055515370/8483927943229049666?hl=zh-TW#">https://www.mmorpg.com/news/bless-unleashed-gm-battlefield-event-for-june-19-2000122222</a>)</p>
<h5 id="2-1-Monsters-and-Mission"><a href="#2-1-Monsters-and-Mission" class="headerlink" title="2.1 Monsters and Mission"></a>2.1 Monsters and Mission</h5><p>Mission manager have a monster list that shows the id, name and type. As the following Figure 1 shows:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/ch1_monsters.png"></p>
<p>Figure 1. Monster List (Monster picture source: <a href="https://draft.blogger.com/blog/post/edit/760085690055515370/8483927943229049666?hl=zh-TW#">https://opengameart.org/content/dungeon-crawl-selected-upscale</a>)</p>
<p>One hunting mission includes these monsters as the following Figure 2 shows:</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2021/07/ch1_mission.png"></p>
<p>Figure 2. Mission Detail</p>
<p>I create some classes representing the structure of these monster list and mission.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HuntingMission</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;HuntingTarget&gt; Targets &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingMission</span>(<span class="params"><span class="built_in">string</span> name, List&lt;HuntingTarget&gt; targets</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Name = name;</span><br><span class="line">Targets = targets;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HuntingTarget</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MonsterId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingTarget</span>(<span class="params"><span class="built_in">string</span> monsterId, <span class="built_in">int</span> level</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MonsterId = monsterId;</span><br><span class="line">Level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Type &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Name = name;</span><br><span class="line">Type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then create instances representing the above monster list and mission:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Monster&gt;();</span><br><span class="line">monsters.Add(<span class="string">&quot;fire_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Fire Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;stone_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Stone Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;bone_dragon&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Bone Dragon&quot;</span>, <span class="string">&quot;dragon&quot;</span>));</span><br><span class="line">HuntingMission mission = <span class="keyword">new</span> HuntingMission(<span class="string">&quot;Giant &amp; Dragon Hunting&quot;</span>, <span class="keyword">new</span> List&lt;HuntingTarget&gt;(<span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;fire_giant&quot;</span>, <span class="number">55</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;bone_dragon&quot;</span>, <span class="number">40</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;stone_giant&quot;</span>, <span class="number">61</span>)</span><br><span class="line">&#125;));</span><br><span class="line">List&lt;HuntingMission&gt; missions = <span class="keyword">new</span> List&lt;HuntingMission&gt;(<span class="keyword">new</span>[] &#123; mission &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="2-2-First-version-of-Calculation-of-Bonus-Experience"><a href="#2-2-First-version-of-Calculation-of-Bonus-Experience" class="headerlink" title="2.2 First version of Calculation of Bonus&#x2F;Experience"></a>2.2 First version of Calculation of Bonus&#x2F;Experience</h5><p>Create a mission manager class and a function Statement. Pass the monster list and mission to this Statement function and it returns a calculated bonus&#x2F;experience string.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> monster = monsters[missionTarget.MonsterId];</span><br><span class="line"><span class="built_in">int</span> thisBonus = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">thisBonus = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">thisBonus += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">thisBonus = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">thisBonus += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">thisBonus += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monster.Name&#125;</span>: <span class="subst">&#123;(thisBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += thisBonus;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-The-Problem-of-This-Function"><a href="#2-3-The-Problem-of-This-Function" class="headerlink" title="2.3 The Problem of This Function"></a>2.3 The Problem of This Function</h5><ol>
<li>It’s not clear</li>
<li>If the returned string need HTML format, adding this feature to this code is not maintainable.</li>
<li>If the type of monster is increased, adding this feature is also hard.</li>
</ol>
<p>The tip at book’s page 4 describes:</p>
<blockquote>
<p><em><strong>When you have to add a feature to a program but the code is not structured in a convenient way, first refactor the program to make it easy to add the feature, then add the feature.</strong></em></p>
</blockquote>
<p>As this tip’s guide, let’s refactor the code!</p>
<h5 id="2-4-The-First-Step-in-Refactoring"><a href="#2-4-The-First-Step-in-Refactoring" class="headerlink" title="2.4 The First Step in Refactoring"></a>2.4 The First Step in Refactoring</h5><p>The tip at book’s page 5 describes:</p>
<blockquote>
<p><strong><em>Before you start refactoring, make sure you have a solid suite of tests. These tests must be self-checking.</em></strong></p>
</blockquote>
<p>I have created a unit testing project to check current’s function is correct.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MIssionManagerTests</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Given_Mission_Monsters_Should_Return_Correct_Statement</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// arrange</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Monster&gt;();</span><br><span class="line">monsters.Add(<span class="string">&quot;fire_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Fire Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;stone_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Stone Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;bone_dragon&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Bone Dragon&quot;</span>, <span class="string">&quot;dragon&quot;</span>));</span><br><span class="line">HuntingMission mission = <span class="keyword">new</span> HuntingMission(<span class="string">&quot;Giant &amp; Dragon Hunting&quot;</span>, <span class="keyword">new</span> List&lt;HuntingTarget&gt;(<span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;fire_giant&quot;</span>, <span class="number">55</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;bone_dragon&quot;</span>, <span class="number">40</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;stone_giant&quot;</span>, <span class="number">61</span>)</span><br><span class="line">&#125;));</span><br><span class="line">List&lt;HuntingMission&gt; missions = <span class="keyword">new</span> List&lt;HuntingMission&gt;(<span class="keyword">new</span>[] &#123; mission &#125;);</span><br><span class="line"><span class="comment">// act</span></span><br><span class="line"><span class="built_in">string</span> result = <span class="keyword">new</span> MissionManager().Statement(missions.First(), monsters);</span><br><span class="line"><span class="comment">// assert</span></span><br><span class="line">Assert.AreEqual(</span><br><span class="line"><span class="string">&quot;Statement for Giant &amp; Dragon Hunting\nFire Giant: $750.00 (55 levels)\nBone Dragon: $950.00 (40 levels)\nStone Giant: $780.00 (61 levels)\nBonus was $2,480.00\nYou got 49 experiences\n&quot;</span>, </span><br><span class="line">result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After call the Statement function with the above monster list and mission, the returned string is:</p>
<p>Statement for Giant &amp; Dragon Hunting<br>Fire Giant: $750.00 (55 levels)<br>Bone Dragon: $950.00 (40 levels)<br>Stone Giant: $780.00 (61 levels)<br>Bonus was $2,480.00<br>You got 49 experiences  </p>
<p>So the assertion is used to check the returned result is equal to the above string.I will change some code and use the unit testing to check again that my code keeps original solution. Testings are very important!</p>
<h5 id="2-5-Decomposing-the-Statement-Function"><a href="#2-5-Decomposing-the-Statement-Function" class="headerlink" title="2.5 Decomposing the Statement Function"></a>2.5 Decomposing the Statement Function</h5><p>The middle of the code has a <strong>switch</strong> statement that calculates the current bonus amount based on monster type. Let’s do the <em>Extract Function</em>: the switch statement is extracted to an amountFor  delegate function:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget, Monster monster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> thisBonus = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">thisBonus = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">thisBonus += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">thisBonus = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">thisBonus += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">thisBonus += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> thisBonus;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> monster = monsters[missionTarget.MonsterId];</span><br><span class="line"><span class="built_in">int</span> thisBonus = amountFor(missionTarget, monster);</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monster.Name&#125;</span>: <span class="subst">&#123;(thisBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += thisBonus;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This amountFor delegate function is simulating the code block like book’s JavaScript logic. If you are using C# 7.0 or higher version, it can be converted into <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions">local function</a>.</p>
<p>After run the unit testing, this code keeps original solution. The missionTarget and monster parameters are not modified in switch statement, so they can be passed to a function. </p>
<p>The tip at book’s page 8 describes:</p>
<blockquote>
<p><em><strong>Refactoring changes the programs in small steps, so if you make a mistake, it is easy to find where the bug is.</strong></em></p>
</blockquote>
<p>In the amountFor delegate function, the <em>thisBonus</em> variable naming is not clear, so <em>change</em> it to result naming:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;HuntingTarget, Monster, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget, Monster monster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The <em>result</em> naming represents its responsibility and increases readability.</p>
<p>The tip at book’s page 10 describes:</p>
<blockquote>
<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.</p>
</blockquote>
<p>What a ABSOLUTE TRUE!</p>
<h6 id="2-5-1-Removing-the-monster-Variable"><a href="#2-5-1-Removing-the-monster-Variable" class="headerlink" title="2.5.1 Removing the monster Variable"></a>2.5.1 Removing the monster Variable</h6><p>Let’s check the amountFor function, missionTarget variable is set a new value by every for loop, but monster variable is calculated by missionTarget. So monster variable is not required to be passed as a parameter.<br>Use a refactoring method <em>Replace Temp with Query</em>: extracting the right-hand site of the assignment into a function.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span>(HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, Monster, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget, Monster monster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> monster = monsterFor(missionTarget);</span><br><span class="line"><span class="built_in">int</span> thisBonus = amountFor(missionTarget, monster);</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monster.Name&#125;</span>: <span class="subst">&#123;(thisBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += thisBonus;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then use <em>Inline Variable.</em></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span>(HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, Monster, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget, Monster monster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> thisBonus = amountFor(missionTarget, monsterFor(missionTarget));</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;(thisBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += thisBonus;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then use <em>Change Function Declaration</em> to amountFor to remove the monster variable_._ There are 2 steps, in first step I change it to use monsterFor:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;HuntingTarget, Monster, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget, Monster monster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. In second step I remove the monster parameter of amountFor function:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span>(HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> thisBonus = amountFor(missionTarget);</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;(thisBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += thisBonus;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. I feel concerned that monsterFor is called 4 times and is more than the first version (called 1 time). It seems a bit performance problem but it’s not a serious situation. Martin said he will discuss in later chapters.</p>
<p>Let’s use <em>Inline Variable</em> again_._ thisBonus variable is assigned and not modified so use amountFor to replace it:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span>(HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">totalExperience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;(amountFor(missionTarget) / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works.</p>
<h6 id="2-5-2-Extracting-Total-Experience"><a href="#2-5-2-Extracting-Total-Experience" class="headerlink" title="2.5.2 Extracting Total Experience"></a>2.5.2 Extracting Total Experience</h6><p>totalExperience is updated in the for loop. Let’s extract the a function that calculates the new experience value and returns it to totalExperience:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> experience = <span class="number">0</span>;</span><br><span class="line">experience += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">experience += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> experience;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;(amountFor(missionTarget) / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;(totalBonus / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. I also rename the experience variable to result:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works.</p>
<h6 id="2-5-3-Removing-the-localFormat-variable"><a href="#2-5-3-Removing-the-localFormat-variable" class="headerlink" title="2.5.3 Removing the localFormat variable"></a>2.5.3 Removing the localFormat variable</h6><p>Temporary variables are underlying problems. It’s suggested to transfer them into functions. Let’s create a declared function to replace localFormat:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; format = <span class="built_in">delegate</span>(<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">return</span> aNumber.ToString(<span class="string">&quot;c&quot;</span>, localFormat);</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;format(amountFor(missionTarget) / <span class="number">100</span>)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;format(totalBonus / <span class="number">100</span>)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. The function naming format is not clear that doesn’t explain its responsibility. Let’s use <em>Change Function Declaration</em> skill:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span>(<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">return</span> (aNumber / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat);</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Good function naming means that you can read the functionality without reading its underlying inner struct. Naming talks you what they do.</p>
<h6 id="2-5-4-Removing-the-totalExperience-variable"><a href="#2-5-4-Removing-the-totalExperience-variable" class="headerlink" title="2.5.4 Removing the totalExperience variable"></a>2.5.4 Removing the totalExperience variable</h6><p>This totalExperience variable is accumulated in a for loop. Let’s use <strong><em>Split Loop</em></strong> to separate it: </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then use <strong>Slide Statements</strong> to put the declaration of the variable close to the loop:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then use <em><strong>Extract Function</strong></em> to the totalExperience variable:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span>(<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">return</span> (aNumber / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat);</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalExperience;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> totalExperience = totalExperiences();</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperience&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next is <em>Inline Variable</em> to the totalExperience variable:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. </p>
<p>For totalBonus variable, I refactor it with the same refactoring skill done with totalExperience variable. First I use <em><strong>Extract Function</strong></em> to the totalBonus variable:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (monsterFor(missionTarget).Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span>(<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">return</span> (aNumber / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat);</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalExperience = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">totalExperience += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalExperience;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (monsterFor(missionTarget).Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monsterFor(missionTarget).Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> totalBonus = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">totalBonus += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalBonus;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> totalBonus = totalBonuses();</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonus)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next is <em>Inline Variable</em> to the totalBonus variable:</p>
<p>public string Statement(HuntingMission mission, Dictionary&lt;string, Monster&gt; monsters)<br>{<br>string result &#x3D; $”Statement for {mission.Name}\n”;<br>foreach (var missionTarget in mission.Targets)<br>{<br>result +&#x3D;<br>$”{monsterFor(missionTarget).Name}: {usd(amountFor(missionTarget))} ({missionTarget.Level} levels)\n”;<br>}</p>
<p>result +&#x3D; $”Bonus was {usd(totalBonuses())}\n”;<br>result +&#x3D; $”You got {totalExperiences()} experiences\n”;</p>
<p>return result;<br>}</p>
<p>After compilation and testing, this refactoring example works. </p>
<p>Let’s rename the calculated variables to result:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">result += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-6-Splitting-the-Phases-of-Calculation-and-Formatting"><a href="#2-6-Splitting-the-Phases-of-Calculation-and-Formatting" class="headerlink" title="2.6 Splitting the Phases of Calculation and Formatting"></a>2.6 Splitting the Phases of Calculation and Formatting</h4><p>The above Statement function can return the bonus&#x2F;experience by the monster list and the hunting mission. But the bonus&#x2F;experience format is a kind of version. If the format is extended into HTML version, how should I refactor it?Let’s use <strong><em>Split Phase</em></strong> to split the function into the logic of two phases: calculating the data structure of bonus&#x2F;experience and rendering the format(pure string or HTML) by the data structure.<em><strong>Extract Function</strong></em> is applied to the second phase that is rendering the format. The whole Statement’s content is transferred into another function RenderPlainText:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(mission, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then create a object that is transferred between the two phases:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, mission, monsters);&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;mission.Name&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementData</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Current SatatementData class has no any property. After compilation and testing, this refactoring example works.<br>Make RenderPlainText to use required parameter in StatementData instance. First step move mission name to this statementData:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, mission, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//all delegate functions are hidden</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> mission.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MissionName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then also move Targets to statementData and delete the mission variable:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets;</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, mission, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">result += experienceFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result += amountFor(missionTarget);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;monsterFor(missionTarget).Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MissionName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;HuntingTarget&gt; Targets &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. The StatementData’s Targets variable then is set as an immutable data by enrichTarget delegate function:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, HuntingTarget&gt; enrichTarget = <span class="built_in">delegate</span>(HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">HuntingTarget result = target;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, monsters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Use <em><strong>Move Function</strong></em> skill to Statement and monsterFor functions, then all original references to monsterFor are replaced with data instance. Before I move them, I create another class <strong>CalculatedTarget.</strong> Its properties are the same as the class HuntingTarget and it has extra property Monster. CalculatedTarget’s instances are replaced with HuntingMission’s Targets. Then RenderPlainText’s referenced delegate functions are updated to use CalculatedTarget:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span>(HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = monsterFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (missionTarget.Monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (missionTarget.Monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;missionTarget.Monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;missionTarget.Monster.Name&#125;</span>: <span class="subst">&#123;usd(amountFor(missionTarget))&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MissionName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;CalculatedTarget&gt; Targets &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CalculatedTarget</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MonsterId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatedTarget</span>(<span class="params"><span class="built_in">string</span> monsterId, <span class="built_in">int</span> level</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MonsterId = monsterId;</span><br><span class="line">Level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then use the same <em><strong>Move Function</strong></em> skill to Statement and amountFor functions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (missionTarget.Monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (missionTarget.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (missionTarget.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (missionTarget.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * missionTarget.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;missionTarget.Monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span>(HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = monsterFor(result);</span><br><span class="line">result.Amount = amountFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;missionTarget.Monster.Name&#125;</span>: <span class="subst">&#123;usd(missionTarget.Amount)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CalculatedTarget</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MonsterId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Amount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatedTarget</span>(<span class="params"><span class="built_in">string</span> monsterId, <span class="built_in">int</span> level</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MonsterId = monsterId;</span><br><span class="line">Level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then use the same <em><strong>Move Function</strong></em> skill to Statement and experienceFor functions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(missionTarget.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (missionTarget.Monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span>(HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = monsterFor(result);</span><br><span class="line">result.Amount = amountFor(result);</span><br><span class="line">result.Experience = experienceFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">result += missionTarget.Experience;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> ()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;missionTarget.Monster.Name&#125;</span>: <span class="subst">&#123;usd(missionTarget.Amount)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(totalBonuses())&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;totalExperiences()&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CalculatedTarget</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MonsterId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Amount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Experience &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatedTarget</span>(<span class="params"><span class="built_in">string</span> monsterId, <span class="built_in">int</span> level</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MonsterId = monsterId;</span><br><span class="line">Level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Finally,  use <em><strong>Move Function</strong></em> skill to Statement, totalExperiences and totalBonuses functions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span>(HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// add experience</span></span><br><span class="line">result += missionTarget.Experience;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result += missionTarget.Amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(statementData, monsters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; usd = <span class="built_in">delegate</span> (<span class="built_in">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;Statement for <span class="subst">&#123;data.MissionName&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;<span class="subst">&#123;missionTarget.Monster.Name&#125;</span>: <span class="subst">&#123;usd(missionTarget.Amount)&#125;</span> (<span class="subst">&#123;missionTarget.Level&#125;</span> levels)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;Bonus was <span class="subst">&#123;usd(data.TotalBonuses)&#125;</span>\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;You got <span class="subst">&#123;data.TotalExperiences&#125;</span> experiences\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MissionName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;CalculatedTarget&gt; Targets &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> TotalBonuses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> TotalExperiences &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Some functions are refactored with Replace Loop with Pipeline:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> data.Targets.Sum(x =&gt; x.Experience);</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> data.Targets.Sum(x =&gt; x.Amount);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Extract the code into a independent function in the first phase (Statement Function) and  remove the monsters argument of RenderPlainText function:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(CreateStatementData(mission, monsters));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. Then extract this CreateStatementData function into another class StatementDataManager: </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RenderPlainText(<span class="keyword">new</span> StatementDataManager().CreateStatementData(mission, monsters));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementDataManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works. It’s easy to create a rendering HTML format function and create a new unit testing function to test it. For usd function, it’s transferred to top function because of common use:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MissionManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Statement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HtmlStatement</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RenderHtml(<span class="keyword">new</span> StatementDataManager().CreateStatementData(mission, monsters));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderHtml</span>(<span class="params">StatementData data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">$&quot;&lt;h1&gt;Statement for <span class="subst">&#123;data.MissionName&#125;</span>&lt;/h1&gt;\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;&lt;table&gt;\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;&lt;tr&gt;&lt;th&gt;Monster Name&lt;/th&gt;&lt;th&gt;Bonus&lt;/th&gt;&lt;th&gt;Level&lt;/th&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> missionTarget <span class="keyword">in</span> data.Targets)</span><br><span class="line">&#123;</span><br><span class="line">result +=</span><br><span class="line"><span class="string">$&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;missionTarget.Monster.Name&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;Usd(missionTarget.Amount)&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;&lt;td&gt;<span class="subst">&#123;missionTarget.Level&#125;</span>&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">$&quot;&lt;/table&gt;\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;&lt;p&gt;Bonus was &lt;em&gt;<span class="subst">&#123;Usd(data.TotalBonuses)&#125;</span>&lt;/em&gt;&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">result += <span class="string">$&quot;&lt;p&gt;You got &lt;em&gt;<span class="subst">&#123;data.TotalExperiences&#125;</span>&lt;/em&gt; experiences&lt;/p&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RenderPlainText</span>(<span class="params">StatementData data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Usd</span>(<span class="params"><span class="built_in">int</span> aNumber</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">CultureInfo enCulture = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">Thread.CurrentThread.CurrentCulture = enCulture;</span><br><span class="line">NumberFormatInfo localFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();</span><br><span class="line"><span class="keyword">return</span> (aNumber / <span class="number">100</span>).ToString(<span class="string">&quot;c&quot;</span>, localFormat);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MIssionManagerTests</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Given_Mission_Monsters_Should_Return_Correct_Statement</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Given_Mission_Monsters_Should_Return_Correct_HtmlStatement</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// arrange</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Monster&gt;();</span><br><span class="line">monsters.Add(<span class="string">&quot;fire_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Fire Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;stone_giant&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Stone Giant&quot;</span>, <span class="string">&quot;giant&quot;</span>));</span><br><span class="line">monsters.Add(<span class="string">&quot;bone_dragon&quot;</span>, <span class="keyword">new</span> Monster(<span class="string">&quot;Bone Dragon&quot;</span>, <span class="string">&quot;dragon&quot;</span>));</span><br><span class="line">HuntingMission mission = <span class="keyword">new</span> HuntingMission(<span class="string">&quot;Giant &amp; Dragon Hunting&quot;</span>, <span class="keyword">new</span> List&lt;HuntingTarget&gt;(<span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;fire_giant&quot;</span>, <span class="number">55</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;bone_dragon&quot;</span>, <span class="number">40</span>),</span><br><span class="line"><span class="keyword">new</span> HuntingTarget(<span class="string">&quot;stone_giant&quot;</span>, <span class="number">61</span>)</span><br><span class="line">&#125;));</span><br><span class="line">List&lt;HuntingMission&gt; missions = <span class="keyword">new</span> List&lt;HuntingMission&gt;(<span class="keyword">new</span>[] &#123; mission &#125;);</span><br><span class="line"><span class="comment">// act</span></span><br><span class="line"><span class="built_in">string</span> result = <span class="keyword">new</span> MissionManager().HtmlStatement(missions.First(), monsters);</span><br><span class="line"><span class="comment">// assert</span></span><br><span class="line">Assert.AreEqual(</span><br><span class="line"><span class="string">&quot;&lt;h1&gt;Statement for Giant &amp; Dragon Hunting&lt;/h1&gt;\n&lt;table&gt;\n&lt;tr&gt;&lt;th&gt;Monster Name&lt;/th&gt;&lt;th&gt;Bonus&lt;/th&gt;&lt;th&gt;Level&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fire Giant&lt;/td&gt;&lt;td&gt;$750.00&lt;/td&gt;&lt;td&gt;55&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Bone Dragon&lt;/td&gt;&lt;td&gt;$950.00&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Stone Giant&lt;/td&gt;&lt;td&gt;$780.00&lt;/td&gt;&lt;td&gt;61&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;p&gt;Bonus was &lt;em&gt;$2,480.00&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;You got &lt;em&gt;49&lt;/em&gt; experiences&lt;/p&gt;\n&quot;</span>,</span><br><span class="line">result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring example works.</p>
<h5 id="2-7-Status-Separated-into-Two-Files-and-Phases"><a href="#2-7-Status-Separated-into-Two-Files-and-Phases" class="headerlink" title="2.7 Status: Separated into Two Files (and Phases)"></a>2.7 Status: Separated into Two Files (and Phases)</h5><p>Current files are separated into MissionManager and StatementDataManager 2 files. Although these code lines has increased, refactoring makes the code more readability. This separation of logic (calculation &amp; rendering) enhances the modular design and no redundant calculation logic.</p>
<p>The tip at book’s page 34 describes:</p>
<blockquote>
<p>When programming, follow the camping rule: Always leave the code base healthier than when you found it.</p>
</blockquote>
<p>Make the code healthier again!</p>
<h5 id="2-8-Reorganizing-the-Calculations-by-Type"><a href="#2-8-Reorganizing-the-Calculations-by-Type" class="headerlink" title="2.8 Reorganizing the Calculations by Type"></a>2.8 Reorganizing the Calculations by Type</h5><p>In this example, amountFor and experienceFor functions determines their result based on the monster type. Current type has dragon and giant. But in the future the type possibly increases, and using if&#x2F;else if to extend the feature is not a good choice. <em>Replace Conditional with Polymorphism</em> is a better skill to refactor it. Before use polymorphism, should create a class and it contains amountFor and experienceFor functions.In StatementDataManager’s enrichTarget function, it calls amountFor and experienceFor, So I create a class HuntingTargetCalculator and use this class to call the 2 functions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementDataManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;CalculatedTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> HuntingTargetCalculator(target);</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = monsterFor(result);</span><br><span class="line">result.Amount = amountFor(result);</span><br><span class="line">result.Experience = experienceFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> HuntingTarget _target;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingTargetCalculator</span>(<span class="params">HuntingTarget target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_target = target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let’s create first property Monster in HuntingTargetCalculator. This property is passed by <strong><em>Change Function Declaration</em></strong> skill to mosterFor function. </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementDataManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> monsters[missionTarget.MonsterId];</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> HuntingTargetCalculator(target, monsterFor(target));</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = calculator.Monster;</span><br><span class="line">result.Amount = amountFor(result);</span><br><span class="line">result.Experience = experienceFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> HuntingTarget _target;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_target = target;</span><br><span class="line">Monster = monster;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring works. Next function is amountFor. Use _<strong>Move Function</strong>_to move its function body to HuntingTargetCalculator:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementDataManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, <span class="built_in">int</span>&gt; amountFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HuntingTargetCalculator(missionTarget, monsterFor(missionTarget)).Amount;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> HuntingTargetCalculator(target, monsterFor(target));</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = calculator.Monster;</span><br><span class="line">result.Amount = amountFor(target);</span><br><span class="line">result.Experience = experienceFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> HuntingTarget _target;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Amount</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (Monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line">result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (_target.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (_target.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line">result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (_target.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (_target.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * _target.Level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unknown type: <span class="subst">&#123;Monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_target = target;</span><br><span class="line">Monster = monster;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring works. Then use Inline Function skill to directly call the Amount get property and remove amountFor function of CreateStatementData:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;CalculatedTarget, <span class="built_in">int</span>&gt; experienceFor = <span class="built_in">delegate</span> (CalculatedTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> HuntingTargetCalculator(target, monsterFor(target));</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = calculator.Monster;</span><br><span class="line">result.Amount = calculator.Amount;</span><br><span class="line">result.Experience = experienceFor(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring works. I use the same skills to experienceFor function:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StatementDataManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = <span class="keyword">new</span> HuntingTargetCalculator(target, monsterFor(target));</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = calculator.Monster;</span><br><span class="line">result.Amount = calculator.Amount;</span><br><span class="line">result.Experience = calculator.Experience;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> HuntingTarget _target;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Amount</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Experience</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(_target.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// add extra experience for every dragon monster by level dividing by 3</span></span><br><span class="line"><span class="keyword">if</span> (Monster.Type == <span class="string">&quot;dragon&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += _target.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuntingTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring works.</p>
<h6 id="2-8-1-Making-the-HuntingTarget-Calculator-Polymorphic"><a href="#2-8-1-Making-the-HuntingTarget-Calculator-Polymorphic" class="headerlink" title="2.8.1 Making the HuntingTarget Calculator Polymorphic"></a>2.8.1 Making the HuntingTarget Calculator Polymorphic</h6><p>Use <strong><em>Replace Type Code with Subclasses</em></strong> to apply the polymorphism. Create a factory method CreateHuntingTargetCalculator to create a super class. It determine which subclass of HuntingTargetCalculator to be generated by monster type:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StatementData <span class="title">CreateStatementData</span>(<span class="params">HuntingMission mission, Dictionary&lt;<span class="built_in">string</span>, Monster&gt; monsters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Func&lt;HuntingTarget, Monster&gt; monsterFor = <span class="built_in">delegate</span> (HuntingTarget missionTarget)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;HuntingTarget, CalculatedTarget&gt; enrichTarget = <span class="built_in">delegate</span> (HuntingTarget target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> calculator = CreateHuntingTargetCalculator(target, monsterFor(target));</span><br><span class="line">CalculatedTarget result = <span class="keyword">new</span> CalculatedTarget(target.MonsterId, target.Level);</span><br><span class="line">result.Monster = calculator.Monster;</span><br><span class="line">result.Amount = calculator.Amount;</span><br><span class="line">result.Experience = calculator.Experience;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalExperiences = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Func&lt;StatementData, <span class="built_in">int</span>&gt; totalBonuses = <span class="built_in">delegate</span> (StatementData data)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">StatementData statementData = <span class="keyword">new</span> StatementData();</span><br><span class="line">statementData.MissionName = mission.Name;</span><br><span class="line">statementData.Targets = mission.Targets.Select(enrichTarget).ToList();</span><br><span class="line">statementData.TotalBonuses = totalBonuses(statementData);</span><br><span class="line">statementData.TotalExperiences = totalExperiences(statementData);</span><br><span class="line"><span class="keyword">return</span> statementData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> HuntingTargetCalculator <span class="title">CreateHuntingTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (monster.Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;giant&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> GiantTargetCalculator(target, monster);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;dragon&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DragonTargetCalculator(target, monster);</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="string">$&quot;Unknown type: <span class="subst">&#123;monster.Type&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I modify the HuntingTargetCalculator as an abstract class and this class updates the Amount &amp; Experience as virtual functions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">readonly</span> HuntingTarget _target;</span><br><span class="line"><span class="keyword">public</span> Monster Monster &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> Amount &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> Experience</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">result += Math.Max(_target.Level - <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">HuntingTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_target = target;</span><br><span class="line">Monster = monster;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GiantTargetCalculator and DragonTargetCalculator inherit HuntingTargetCalculator. Let’s use Replace Conditional with Polymorphism skill to implement Amount&#x2F;Experience in those subclass:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">DragonTargetCalculator</span> : <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DragonTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>) : <span class="title">base</span>(<span class="params">target, monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Amount</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">80000</span>;</span><br><span class="line"><span class="keyword">if</span> (_target.Level &gt; <span class="number">35</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">2500</span> + <span class="number">900</span> * (_target.Level - <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="number">200</span> * _target.Level;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Experience</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">base</span>.Experience + _target.Level / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">GiantTargetCalculator</span> : <span class="title">HuntingTargetCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GiantTargetCalculator</span>(<span class="params">HuntingTarget target, Monster monster</span>) : <span class="title">base</span>(<span class="params">target, monster</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Amount</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">if</span> (_target.Level &gt; <span class="number">25</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="number">500</span> * (_target.Level - <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After compilation and testing, this refactoring works.</p>
<h4 id="3-Conclusions"><a href="#3-Conclusions" class="headerlink" title="3. Conclusions"></a>3. Conclusions</h4><p>I can’t believe that the original one function is changed into complex but very maintainable and readable functions&#x2F;structures. Following the chapter 1 of the book to get this result is very impressive!Let’s see that this example has three major evolution: </p>
<ol>
<li>Splitting a function into nested functions,</li>
<li>Split phase to separate the calculation and rendering code</li>
<li>Use polymorphism to process calculation</li>
</ol>
<p>The tip at book’s page 43 describes:</p>
<blockquote>
<p><em><strong>The true test of good code is how easy it is to change it</strong>.</em></p>
</blockquote>
<p>It’s also a ABSOLUTE TRUTH! I have learned classic 23 design patterns and applied them in some projects. Although these patterns were helpful to extend features, but I lacked some skills to decide when&#x2F;how I should refactor these patterns.This book provides many concepts to refactor those legacy codes. I think it should be read by every developer!<br>This example can be download in my <a href="https://github.com/u8989332/martin-fowler-refactoring-2nd.git">Github repository</a></p>
<h4 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h4><p><a href="https://draft.blogger.com/blog/post/edit/760085690055515370/8483927943229049666?hl=zh-TW#">Refactoring: Improving the Design of Existing Code (2nd Edition)</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Simplifying Conditional Logic</title>
    <url>/2022/04/09/refactoring-chapter-10-simplifying-conditional-logic/</url>
    <content><![CDATA[<p>This article references the chapter 10 “ Simplifying Conditional Logic “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many important refactorings in this chapter.</p>
<span id="more"></span>

<p>I use .NET C# to practice with these refactorings and upload to Github.</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/04/direction-2320124_1920-1024x1024.jpg" alt="Simplifying Conditional Logic"></p>
<p>(Photo from Pixabay: <a href="https://pixabay.com/illustrations/direction-path-decision-goal-2320124/">https://pixabay.com/illustrations/direction-path-decision-goal-2320124/</a><a href="https://pixabay.com/illustrations/moving-boxes-mover-moving-truck-3671446/">)</a></p>
<h2 id="Decompose-Conditional"><a href="#Decompose-Conditional" class="headerlink" title="Decompose Conditional"></a>Decompose Conditional</h2><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If the condition is complex, extract the condition and its branches as functions.</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch10.Simplifying%20Conditional%20Logic/Decompose%20Conditional">Github</a></p>
<hr>
<h2 id="Consolidate-Conditional-Expression"><a href="#Consolidate-Conditional-Expression" class="headerlink" title="Consolidate Conditional Expression"></a>Consolidate Conditional Expression</h2><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Some conditions can be reduced into an “Ands” or “Ors” expression. Then this “Ands” or “Ors” expression can be extracted as a function.</li>
<li>Sequences combine with Or, nested if statements combine with And.</li>
<li>If the conditions have side-effect, use <strong>Separate Query from Modifier</strong> to process it.</li>
</ul>
<h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>An Ors example</li>
<li>An Ands example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch10.Simplifying%20Conditional%20Logic/Consolidate%20Conditional%20Expression">Github</a></p>
<hr>
<h2 id="Replace-Nested-Conditional-with-Guard-Clauses"><a href="#Replace-Nested-Conditional-with-Guard-Clauses" class="headerlink" title="Replace Nested Conditional with Guard Clauses"></a>Replace Nested Conditional with Guard Clauses</h2><h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If a condition is not normal, check it and return if it’s true. This check is a <strong>Guard Clause</strong></li>
<li>Guard Clause means that it is not the core logic of the function But if it happens, it does the necessary cleaning job to exit the function.</li>
<li>Choose the outermost condition and replace it by Guard Clause. If some Guard Clauses have the same result, use <strong>Consolidate Conditional Expression</strong>.</li>
</ul>
<h5 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>An simple example</li>
<li>Reversing the Conditions example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch10.Simplifying%20Conditional%20Logic/Replace%20Nested%20Conditional%20with%20Guard%20Clauses">Github</a></p>
<h2 id="Replace-Conditional-with-Polymorphism"><a href="#Replace-Conditional-with-Polymorphism" class="headerlink" title="Replace Conditional with Polymorphism"></a>Replace Conditional with Polymorphism</h2><hr>
<h5 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If a condition is complex, split it by using polymorphism and make its logic clear</li>
<li>For a variation condition, we put the basic logic into a superclass, and put the variation logic into derived class.</li>
<li>Don’t abuse using polymorphism when the condition is simple.</li>
<li>If the current class has no polymorphism, we create a <strong>factory function</strong> to return its object instance. Then we put every condition logic into derived class.</li>
</ul>
<h5 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>An simple example</li>
<li>Using Polymorphism for Variation</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch10.Simplifying%20Conditional%20Logic/Replace%20Conditional%20with%20Polymorphism">Github</a></p>
<hr>
<h2 id="Introduce-Special-Case"><a href="#Introduce-Special-Case" class="headerlink" title="Introduce Special Case"></a>Introduce Special Case</h2><h5 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If clients always check a structure’s value, we separate this check into a special-case.</li>
<li>NullObject is a common pattern for null value.</li>
<li>Add the special-case check property to the target structure. Use <strong>Combine Functions into Class</strong> or <strong>Combine Functions into Transform</strong> to move the special-case logic into a new class. Then the previous special-case check property will return it when check triggers.</li>
</ul>
<h5 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A Class example</li>
<li>An Object Literal example</li>
<li>A Transform example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch10.Simplifying%20Conditional%20Logic/Introduce%20Special%20Case">Github</a></p>
<hr>
<h2 id="Introduce-Assertion"><a href="#Introduce-Assertion" class="headerlink" title="Introduce Assertion"></a>Introduce Assertion</h2><h5 id="Tips-5"><a href="#Tips-5" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Assertion definitely marks the assumption(expression). Assertion avoid programmer’s error.</li>
<li>Don’t abuse assertion. We only use it when the expression must be true.</li>
</ul>
<h5 id="Examples-5"><a href="#Examples-5" class="headerlink" title="Examples:"></a>Examples:</h5><p>&#x2F;&#x2F; before refactoring<br>public void SaveMoneyIntoAccount(decimal money)<br>{<br>     acount +&#x3D; money;<br>}</p>
<p>&#x2F;&#x2F; after refactoring<br>public void SaveMoneyIntoAccount(decimal money)<br>{<br>     Debug.Assert(money &gt; 0);<br>     acount +&#x3D; money;<br>}</p>
<hr>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This chapter introduces me how to simplify conditional logic. I had ever written complex conditional branches and they were very ugly long…… I had no idea to reafactor them until I read this chapter. If you want to learn detailed motivation and mechanics, study the chapter 10 “ Simplifying Conditional Logic “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. and it improves our programmer’s ability.</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Principles in Refactoring</title>
    <url>/2021/10/17/refactoring-chapter-2-principles-in-refactoring-book-summary/</url>
    <content><![CDATA[<h1 id="What-are-principles-in-refactoring"><a href="#What-are-principles-in-refactoring" class="headerlink" title="What are principles in refactoring?"></a>What are principles in refactoring?</h1><p>This article references the chapter 2 of  <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. We need understand what principles are in refactoring and we can refactor codes smoothly.</p>
<h1 id="Defining-Refactoring"><a href="#Defining-Refactoring" class="headerlink" title="Defining Refactoring"></a>Defining Refactoring</h1><ul>
<li>Noun’s definition: A change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.</li>
<li>Verb’s definition: To restructure software by applying a series of refactorings without changing its observable behavior.</li>
</ul>
<p>Both definitions have the same objective: don’t change the software’s behavior.</p>
<p>Like electrical wiring for our life, we plug electrical appliances and the electric current moves through the wiring. The plug-in is like an API. Electrical appliances get the electric current with this API and don’t understand what plug-in electrical panel works. If API’s internal code structure is like:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/10/before.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/10/before-300x277.jpg" alt="before refactoring"></a></p>
<p>Electrical Panel before re-wiring (Source: <a href="https://theintegrityexperience.com/rewiring-a-house-and-electrical-panel-upgrade/">https://theintegrityexperience.com/rewiring-a-house-and-electrical-panel-upgrade/</a>)</p>
<p>It’s ugly but it still works to supply electric current. Someday, the power failure occurs and we should check the electrical panel then open it, OS: “What the hell” and very hard to find the broken wires…..</p>
<p>After refactorings(re-wiring), the new electrical panel is like:</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/10/after.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/10/after-300x278.jpg" alt="after refactoring"></a></p>
<p>Electrical Panel after re-wiring (Source: <a href="https://theintegrityexperience.com/rewiring-a-house-and-electrical-panel-upgrade/">https://theintegrityexperience.com/rewiring-a-house-and-electrical-panel-upgrade/</a>)</p>
<p>What a beautiful wiring! It supplies electric current like the last ugly wiring but next time we will find correct wires quickly. This analogy to our coding refactorings is very similar.</p>
<p>The tip at book’s page 46 describes:</p>
<blockquote>
<p>If someone says their code was broken for a couple of days while they are refactoring, you can be pretty sure they were not refactoring.</p>
</blockquote>
<p>This tip is very funny XD. According to chapter 1’s tip, refactoring is driven by testings. Every refactoring step is done, then run the testings to validate the observable behavior is not changed.</p>
<h1 id="The-Two-Hats"><a href="#The-Two-Hats" class="headerlink" title="The Two Hats"></a>The Two Hats</h1><p>When we are developing the software, we have 2 hats: one hat for adding functionality and the other one for refactoring. Only wear one of these 2 hats in a period of developing. Do not add functionality and refactor concurrently.</p>
<h1 id="Why-Should-We-Refactor"><a href="#Why-Should-We-Refactor" class="headerlink" title="Why Should We Refactor?"></a>Why Should We Refactor?</h1><h2 id="Refactoring-Improves-the-Design-of-Software"><a href="#Refactoring-Improves-the-Design-of-Software" class="headerlink" title="Refactoring Improves the Design of Software"></a>Refactoring Improves the Design of Software</h2><ul>
<li>If we don’t refactor, the code becomes more messy</li>
<li>Messy code means maintenance is more difficult.</li>
<li>DRY (Don’t Repeat Yourself) is a fundamental design principle and reduces the code size</li>
</ul>
<h2 id="Refactoring-Makes-Software-Easier-to-Understand"><a href="#Refactoring-Makes-Software-Easier-to-Understand" class="headerlink" title="Refactoring Makes Software Easier to Understand"></a>Refactoring Makes Software Easier to Understand</h2><ul>
<li>Programmer is the reader of the code and it’s the major time cost</li>
<li>If the reader spends 1 week understanding the code and modifying it —- What a terrible code</li>
<li>If the reader spends 1 hour understanding the code  and modifying it —- What a great code</li>
<li>We spend a little time refactoring our code and make the code more readable. Next time the reader will spend less time working.</li>
<li>If the code function is easily looked up by documentation, programmers don’t deliberately remember them.</li>
</ul>
<h2 id="Refactoring-Helps-Me-Find-Bugs"><a href="#Refactoring-Helps-Me-Find-Bugs" class="headerlink" title="Refactoring Helps Me Find Bugs"></a>Refactoring Helps Me Find Bugs</h2><ul>
<li>When we are refactoring the code, code structure maybe shows some bugs we have never noticed</li>
</ul>
<h2 id="Refactoring-Helps-Me-Program-Faster"><a href="#Refactoring-Helps-Me-Program-Faster" class="headerlink" title="Refactoring Helps Me Program Faster"></a>Refactoring Helps Me Program Faster</h2><ul>
<li>The previous points result in this point</li>
<li>Does not the time of refactoring slow the development? No! If the system with poor design, it would add features like putting many “patches” on it…. It’s hard to understand what a module works.</li>
<li>Design Stamina Hypothesis: Good designs increase the stamina of the software effort</li>
<li>Refactoring makes the design better than the last</li>
</ul>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/10/cumulativeTimeWithGoodPoorDesign.drawio.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/10/cumulativeTimeWithGoodPoorDesign.drawio-300x209.png"></a></p>
<p>The development time with good and poor design (Redraw at book’s page 49)</p>
<h1 id="When-Should-We-Refactor"><a href="#When-Should-We-Refactor" class="headerlink" title="When Should We Refactor?"></a>When Should We Refactor?</h1><h2 id="The-Rule-of-Three"><a href="#The-Rule-of-Three" class="headerlink" title="The Rule of Three"></a>The Rule of Three</h2><p>The first time you do something, you just do it. The second time you do something similar, you wince at the duplication, but you do the duplicate thing anyway. The third time you do something similar, you refactor. Or for those who like baseball: <strong>Three strikes, then you refactor.</strong></p>
<h2 id="Preparatory-Refactoring-Making-It-Easier-to-Add-a-feature"><a href="#Preparatory-Refactoring-Making-It-Easier-to-Add-a-feature" class="headerlink" title="Preparatory Refactoring - Making It Easier to Add a feature"></a>Preparatory Refactoring - Making It Easier to Add a feature</h2><ul>
<li><em>Parameterize Function</em> skill reduces the duplicated code. Similar codes are centered.</li>
<li>Like before I move to a place, I check the map and find a short route to arrive at the place.</li>
</ul>
<h2 id="Comprehension-Refactoring-Making-Code-Easier-to-Understand"><a href="#Comprehension-Refactoring-Making-Code-Easier-to-Understand" class="headerlink" title="Comprehension Refactoring: Making Code Easier to Understand"></a>Comprehension Refactoring: Making Code Easier to Understand</h2><ul>
<li>Read codes to understand “What is the section of the code doing?”. Spending much time reading  code is a refactoring chance.</li>
<li>Refactoring makes the code logics clearer</li>
</ul>
<h2 id="Litter-Pickup-Refactoring"><a href="#Litter-Pickup-Refactoring" class="headerlink" title="Litter-Pickup Refactoring"></a>Litter-Pickup Refactoring</h2><ul>
<li>If there is a small trash code (duplicated codes, terrible variable naming…), immediately refactor it</li>
<li>If the trash code is not easy to be refactored with current task, note the trash code, put it aside and continue current task. After finish the task, then refactor the noted trash code.</li>
</ul>
<h2 id="4-4-Planned-and-Opportunistic-Refactoring"><a href="#4-4-Planned-and-Opportunistic-Refactoring" class="headerlink" title="4.4 Planned and Opportunistic Refactoring"></a>4.4 Planned and Opportunistic Refactoring</h2><ul>
<li>Previous 3 refactoring examples are opportunistic. Planned refactoring is not a natural thing. Adding features or fixing bugs are normal with refactoring.</li>
</ul>
<p>The tip at book’s page 52 describes:</p>
<blockquote>
<p>You have to refactor when you run into ugly code - bug excellent code needs plenty of refactoring too.</p>
</blockquote>
<p>Kent Beck also described:</p>
<blockquote>
<p>For each desired change, make the change easy (warning: this may be hard), then make the easy change.</p>
</blockquote>
<p>The two sections are excellent points.</p>
<ul>
<li>Author thinks that creating a new branch to refactor codes in control version system is not good because refactoring is closed with adding new features.</li>
</ul>
<h5 id="4-5-Long-Term-Refactoring"><a href="#4-5-Long-Term-Refactoring" class="headerlink" title="4.5 Long-Term Refactoring"></a>4.5 Long-Term Refactoring</h5><ul>
<li>Like previous Planned Refactoring, it’s not recommend by author.</li>
<li>Example: If the system wants to replace a existing library, use <em>Branch By Abstraction</em> to make the replacement easy</li>
</ul>
<h5 id="4-6-Refactoring-in-a-Code-Review"><a href="#4-6-Refactoring-in-a-Code-Review" class="headerlink" title="4.6 Refactoring in a Code Review"></a>4.6 Refactoring in a Code Review</h5><ul>
<li>Better practice: Pair-programming and refactoring&#x2F;reviewing the code</li>
</ul>
<h5 id="4-7-What-Do-I-Tell-My-Manager"><a href="#4-7-What-Do-I-Tell-My-Manager" class="headerlink" title="4.7 What Do I Tell My Manager?"></a>4.7 What Do I Tell My Manager?</h5><ul>
<li>If the manager doesn’t know what the refactoring is, don’t tell him&#x2F;her why you do refactoring. Manger just wants the task to be finished before the deadline. We just use refactoring this professional skill to smoothly complete the job.</li>
</ul>
<h5 id="4-8-When-Should-I-Not-Refactor"><a href="#4-8-When-Should-I-Not-Refactor" class="headerlink" title="4.8 When Should I Not Refactor?"></a>4.8 When Should I Not Refactor?</h5><ul>
<li>If there is a messy code and it’s not required to be modified, don’t refactor with it.</li>
<li>If some ugly code is hidden under an API, don’t refactor.</li>
<li>Sometimes rewriting is easier than refactoring but it’s hard to decide which method should be executed.</li>
</ul>
<h4 id="5-Problems-with-Refactoring"><a href="#5-Problems-with-Refactoring" class="headerlink" title="5. Problems with Refactoring"></a>5. Problems with Refactoring</h4><h5 id="5-1-Slowing-Down-New-Features"><a href="#5-1-Slowing-Down-New-Features" class="headerlink" title="5.1 Slowing Down New Features"></a>5.1 Slowing Down New Features</h5><p>The tip at book’s page 56 describes:</p>
<blockquote>
<p>The whole purpose of refactoring is to make us program faster, producing more value with less effort.</p>
</blockquote>
<ul>
<li>If there are a large-scale refactoring situation and small-scale urgent new feature, finish the urgent new feature and then back to the refactoring.</li>
<li>Refactoring’s target doesn’t equal to the one of  “Clean Code” and “Good Engineering Practice”. Refactoring focuses on adding features quickly, fixing bugs quickly.</li>
</ul>
<h5 id="5-2-Code-Ownership"><a href="#5-2-Code-Ownership" class="headerlink" title="5.2 Code Ownership"></a>5.2 Code Ownership</h5><ul>
<li>Example: A naming is not good and we use <em>Change Function Declaration</em> skill to rename it. But the renamed function is used by other teams &#x2F; product API caller, it will result in blocked situation.</li>
<li>Use <em>Rename Function</em> skill and the old function is pass-through to the new one. Mark the old function as [deprecated].</li>
<li>Team ownership of code is recommended by author, not only restricted to one person.</li>
</ul>
<h5 id="5-3-Branches"><a href="#5-3-Branches" class="headerlink" title="5.3 Branches"></a>5.3 Branches</h5><ul>
<li>Every branch is responsible for specific features, after a period, those branches will be merged into master&#x2F;trunk. But if the feature branch is isolated for a long time, the integration with master will be hard.</li>
<li>Refactoring like renaming for merging branch sometimes is a difficult integration</li>
<li>Continuous Integration (CI) &#x2F; Trunk-Based Development: Use this practice to require every member to merge branch into master and integrate. This action avoid the large difference between branches.</li>
<li>Refactoring very fits CI practice. Small changes are easily integrated when using CI.</li>
<li>Kent Beck’s Extreme programming uses CI and refactoring</li>
</ul>
<h5 id="5-4-Testing"><a href="#5-4-Testing" class="headerlink" title="5.4 Testing"></a>5.4 Testing</h5><ul>
<li>If we want refactoring, self-testing code is required. This is a very important one of principles in refactoring!</li>
<li>If no testing can support, we can use automated refactoring. But it only executes safe refactoring methods.</li>
<li>Special style of refactoring: only use proved and absolutely safe refactoring methods. Like an example that shows how to safely execute <em>Extract Method</em> skill in C++ provided by Jay Bazuzi.</li>
<li>I very recommend that every programmer should read this book to learn unit testing: <a href="http://bit.ly/3lIj2il">The Art of Unit Testing: with examples in C# written by Roy Osherove</a></li>
</ul>
<h5 id="5-5-Legacy-Code"><a href="#5-5-Legacy-Code" class="headerlink" title="5.5 Legacy Code"></a>5.5 Legacy Code</h5><ul>
<li>Legacy code without testings is very terrible…</li>
<li>Adding new testings in current legacy code is not easy</li>
<li><a href="https://amzn.to/3LSs0o2">Working Effectively with Legacy Code by Michael Feathers</a> is recommended by author. It teaches how to perform refactoring and testings in legacy code</li>
<li>Step-by-step refactor legacy code instead of changing it widely. I think this is the hardest one of principles in refactoring.</li>
</ul>
<h5 id="5-6-Databases"><a href="#5-6-Databases" class="headerlink" title="5.6 Databases"></a>5.6 Databases</h5><ul>
<li><a href="https://amzn.to/3ZibiRK">Refactoring Databases: Evolutionary Database Design by Scott Ambler &amp; Pramod Sadalage</a>  is recommended by author.</li>
<li>Add migration scripts into version control system with code. This makes the database development efficient</li>
<li>Example with .NET, Entity Framework has a migration tool to upgrade&#x2F;downgrade database’s structure.</li>
<li>The book provides a refactoring skill: parallel change. I think I should buy this book to deeply learn it!</li>
</ul>
<h4 id="6-Refactoring-Architecture-and-Yagni"><a href="#6-Refactoring-Architecture-and-Yagni" class="headerlink" title="6. Refactoring, Architecture, and Yagni"></a>6. Refactoring, Architecture, and Yagni</h4><ul>
<li>In early period, architecture was first designed. So the later development was restricted with the architecture and the system continued to become decayed.</li>
<li>Refactoring is the iterative method to improve current design</li>
<li>you aren’t going to need it : Yagni mixes architecture, design and development and depends on refactoring</li>
<li><a href="https://amzn.to/42E812e">Building Evolutionary Architectures： Support Constant Change by Neal Ford, Rebecca Parsons, Patrick Kua</a> is a continuously developing subject and discover what pattern and practice are useful for iterative developement.</li>
</ul>
<h4 id="7-Refactoring-and-the-Wider-Software-Development-Process"><a href="#7-Refactoring-and-the-Wider-Software-Development-Process" class="headerlink" title="7. Refactoring and the Wider Software Development Process"></a>7. Refactoring and the Wider Software Development Process</h4><ul>
<li>Self-testing is the first foundation of refactoring</li>
<li>Self-testing, CI and refactoring are the 3 major practices for a refactoring team</li>
<li>Based on these 3 practices, some products can be published in one day</li>
<li>These practices are not easy to build up</li>
</ul>
<h4 id="8-Refactoring-and-Performance"><a href="#8-Refactoring-and-Performance" class="headerlink" title="8. Refactoring and Performance"></a>8. Refactoring and Performance</h4><ul>
<li>3 methods to write fast software</li>
</ul>
<ol>
<li>Time budgeting: It’s a serious method for real time system like heart pacemakers. Every module is restricted with limited resources.      </li>
<li>Constant attention: Every programmer keeps the system with high performance anytime.</li>
<li>Use the optimization statistic analysis to improve the system</li>
</ol>
<h4 id="9-Where-Did-Refactoring-Come-From"><a href="#9-Where-Did-Refactoring-Come-From" class="headerlink" title="9. Where Did Refactoring Come From?"></a>9. Where Did Refactoring Come From?</h4><ul>
<li>In 1980, Smalltalk project with refactoring skills influenced the development community</li>
<li>First one wrote the refactoring book is Martin Fowler</li>
</ul>
<h4 id="10-Automated-Refactorings"><a href="#10-Automated-Refactorings" class="headerlink" title="10. Automated Refactorings"></a>10. Automated Refactorings</h4><ul>
<li>IntelliJ IDEA provides many automated refactoring tools for popular programming language.</li>
<li>IDE analyzes the syntax tree of the code and provides safer refactoring results</li>
</ul>
<h4 id="11-Going-Further"><a href="#11-Going-Further" class="headerlink" title="11. Going Further"></a>11. Going Further</h4><ul>
<li><a href="https://amzn.to/3TLvrhV">Refactoring Workbook by Ross Venables, William Wake, John Fuller</a></li>
<li><a href="https://amzn.to/3FNMrhJ">Refactoring to Patterns by Joshua Kerievsky</a> </li>
<li><a href="https://amzn.to/40fYOM0">Refactoring HTML: Improving the Design of Existing Web Applications by Elliotte Rusty Harold</a></li>
<li><a href="https://amzn.to/3lLkwZi">Refactoring: Ruby Edition by Jay Fields, Shane Harvie, Martin Fowler, Kent Beck</a></li>
<li><a href="http://refactoring.com/">refactoring.com</a></li>
<li>I think these great authors of the books have the similar principles in refactoring</li>
</ul>
<h4 id="12-Conclusion"><a href="#12-Conclusion" class="headerlink" title="12. Conclusion"></a>12. Conclusion</h4><p>All above principles in refactoring is impressive guideline for every programmers when they want to refactor their handy codes. Do you have special principles in refactoring? Comment them!</p>
<h4 id="13-References"><a href="#13-References" class="headerlink" title="13. References"></a>13. References</h4><p><a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a></p>
]]></content>
      <categories>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Bad Smells in Code</title>
    <url>/2021/10/24/refactoring-chapter-3-bad-smells-in-code-book-summary/</url>
    <content><![CDATA[<h2 id="What-are-bad-smells-in-code"><a href="#What-are-bad-smells-in-code" class="headerlink" title="What are bad smells in code?"></a>What are bad smells in code?</h2><p>This article references the chapter 3 of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many “popular” bad smells in code. These code smells can be identified by some characteristics. Let’s browse these code smells!</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/10/stink-4265849_960_720.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/10/stink-4265849_960_720.png" alt="Bad Smells"></a></p>
<p>Bad Smell (Photo source: <a href="https://pixabay.com/vectors/stink-smell-silhouette-nose-4265849/">https://pixabay.com/vectors/stink-smell-silhouette-nose-4265849/</a> )</p>
<h4 id="1-Mysterious-Name"><a href="#1-Mysterious-Name" class="headerlink" title="1: Mysterious Name"></a>1: Mysterious Name</h4><ul>
<li>Naming is one of the two hard things in programming</li>
<li>Guessing the naming meaning is a wasteful thing</li>
<li>Some skills refactor this problem, for example, <em>Change Function Declaration</em>, <em>Rename Variable</em>  and <em>Rename Field</em></li>
</ul>
<h4 id="2-Duplicated-Code"><a href="#2-Duplicated-Code" class="headerlink" title="2: Duplicated Code"></a>2: Duplicated Code</h4><ul>
<li>If there are similar code appearing in different place, we must seriously check what the difference is. If we want to modify the duplicated code, all similar codes must be modified.</li>
<li>Some skills refactor this problem, for example,  <em>Extract Function</em>,  <em>Slide Statements</em> and  <em>Pull Up Method</em></li>
</ul>
<h4 id="3-Long-Function"><a href="#3-Long-Function" class="headerlink" title="3: Long Function"></a>3: Long Function</h4><ul>
<li>Small functions are good at explanation, sharing and choosing</li>
<li>Modern IDEs have convenient shortcuts to jump to any function</li>
<li>The principle: If there is something should be commented to describe, we need to take it written in a function. Function naming is able to tell us what the way of the function is.</li>
<li>Some skills refactor this problem, for example,  <em>Extract Function</em>,  _Replace Temp with Query, Introduce Parameter Object, Preserve Whole object, _ <em>Replace function with Command, Decompose Conditional, Replace Conditional with Polymorphism</em> and  <em>Split Loop</em></li>
</ul>
<h4 id="4-Long-Parameter-List"><a href="#4-Long-Parameter-List" class="headerlink" title="4: Long Parameter List"></a>4: Long Parameter List</h4><ul>
<li>Long parameter list confuses developers…</li>
<li>Some skills refactor this problem, for example,  <em>Replace Temp with Query, Preserve Whole Object, Introduce Parameter Object, Remove Flag Argument</em> and <em>Combine Functions into Class</em></li>
</ul>
<h4 id="5-Global-Data"><a href="#5-Global-Data" class="headerlink" title="5: Global Data"></a>5: Global Data</h4><ul>
<li>It’s the one of the unpleasant code smells</li>
<li>Every code can access it so debugging is very hard</li>
<li>Some skills refactor this problem, for example, <em>Encapsulate Variable</em></li>
</ul>
<h4 id="6-Mutable-Data"><a href="#6-Mutable-Data" class="headerlink" title="6: Mutable Data"></a>6: Mutable Data</h4><ul>
<li>If some data is modified and the other date somewhere is unexpected, the system fails</li>
<li>Immutable data restricts the update of the data and reduces the previous risks</li>
<li>Some skills refactor this problem, for example,  <em>Encapsulate Variable, Split Variable, Slide Statements, Extract Function, Separate Query from Modifier, Remove Setting Method,</em> <em>Replace Derived Variable with Query, Combine Functions into Class, Combine Functions into Transform</em> and <em>Change Reference to Value</em></li>
</ul>
<h4 id="7-Divergent-Change"><a href="#7-Divergent-Change" class="headerlink" title="7: Divergent Change"></a>7: Divergent Change</h4><ul>
<li>If some module’s modification can not focused on on point, the divergent change happens</li>
<li>For example, for a class, if a new data source is added, we must modify 3 functions; another new data source is added, we must modify 4 functions. This is the divergent change.</li>
<li>Only focus on one context to avoid divergent change. It looks like SoC (Separation of Concern)</li>
<li>Some skills refactor this problem, for example,  <em>Split Phase, Move Function</em> <em>, Extract Function</em> and  <em>Extract Class</em></li>
</ul>
<h4 id="8-Shotgun-Surgery"><a href="#8-Shotgun-Surgery" class="headerlink" title="8: Shotgun Surgery"></a>8: Shotgun Surgery</h4><ul>
<li>I very like this naming…. It’s impressive!</li>
<li>If something changes, we must modify many different classes</li>
<li>Some skills refactor this problem, for example, _ Move Function_ <em>, Move Field, Combine Functions into Class, Combine Functions into Transform, Split Phase, Inline Function</em> and  <em>Inline Class</em></li>
</ul>
<h4 id="9-Feature-Envy"><a href="#9-Feature-Envy" class="headerlink" title="9: Feature Envy"></a>9: Feature Envy</h4><ul>
<li>Some function frequently interacts with other module’s function or data, it’s feature envy.</li>
<li>There are some skills refactor this problem, for example, _ Move Function_ and  <em>Extract Function</em></li>
<li>Some patterns break this rule, like Strategy, Visitor and Kent Beck’s Self Delegation. They are used to solve divergent change.</li>
</ul>
<h4 id="10-Data-Clumps"><a href="#10-Data-Clumps" class="headerlink" title="10: Data Clumps"></a>10: Data Clumps</h4><ul>
<li>For example, 2 classes have the same fields or many functions have the same parameter</li>
<li>Some skills refactor this problem, for example, <em>Extract Class, Introduce Parameter Object</em> and  <em>Preserve Whole Object</em></li>
<li>Advanced action is to find feature envy and solve it</li>
</ul>
<h4 id="11-Primitive-Obsession"><a href="#11-Primitive-Obsession" class="headerlink" title="11: Primitive Obsession"></a>11: Primitive Obsession</h4><ul>
<li>Some types are not organized as classes, like money, coordinates, or ranges. Only use basic data type (int, float, string…) to represent them.</li>
<li>For example, phone number is not only a string, it should be encapsulated as a class and provides a display logic for GUI.</li>
<li>Only using a string to represent a type is called “stringly typed”</li>
<li>Some skills refactor this problem, for example, _ Replace Primitive with Object_ <em>, Replace Type Code with Subclasses, Replace Conditional with Polymorphism, Extract Class</em> and  <em>Introduce Parameter Object</em></li>
</ul>
<h4 id="12-Repeated-Switches"><a href="#12-Repeated-Switches" class="headerlink" title="12: Repeated Switches"></a>12: Repeated Switches</h4><ul>
<li>Somewhere code uses the same switch logic, including either switch&#x2F;case statements or if&#x2F;else statements. If we want to add a new clause, we must find all switches and update them.</li>
<li>Some skills refactor this problem, for example, <em>Replace Conditional with Polymorphism</em></li>
</ul>
<h4 id="13-Loops"><a href="#13-Loops" class="headerlink" title="13: Loops"></a>13: Loops</h4><ul>
<li>Omg….The author think of “Loop” as old-school thing….</li>
<li>Some skills refactor this problem, for example, <em>Replace Loop with Pipeline</em></li>
<li>Pipeline like map&#x2F;filter can help us understand what elements are processed</li>
</ul>
<h4 id="14-Lazy-Elements"><a href="#14-Lazy-Elements" class="headerlink" title="14. Lazy Elements"></a>14. Lazy Elements</h4><ul>
<li>Some functions or classes are unnecessarily wrapped. For example, a class is just a function.</li>
<li>Some skills refactor this problem, for example, <em>Inline Function, Inline Class</em> and  <em>Collapse Hierarchy</em></li>
</ul>
<h4 id="15-Speculative-Generality"><a href="#15-Speculative-Generality" class="headerlink" title="15. Speculative Generality"></a>15. Speculative Generality</h4><ul>
<li>Some logic is designed only for specific machinery instead of all machinery, then this logic is speculative generality.</li>
<li>Some skills refactor this problem, for example, <em>Collapse Hierarchy, Inline Function, Inline Class, Change Function Declaration</em> and  <em>Remove Dead Code</em></li>
</ul>
<h4 id="16-Temporary-Field"><a href="#16-Temporary-Field" class="headerlink" title="16. Temporary Field"></a>16. Temporary Field</h4><ul>
<li>A field of a class is only used in some situations. Other developers look at this field and guess what scope is.</li>
<li>Some skills refactor this problem, for example, <em>Extract Class, Move Function</em> and <em>Introduce Special Case</em></li>
</ul>
<h4 id="17-Message-Chains"><a href="#17-Message-Chains" class="headerlink" title="17. Message Chains"></a>17. Message Chains</h4><ul>
<li>A client calls one object A, then object A calls object B, then object B calls object C, and so on. If the relationship of the called objects changes, the client should correspondingly modify.</li>
<li>Some skills refactor this problem, for example, <em>Hide Delegate, Extract Function and Move Function</em></li>
</ul>
<h4 id="18-Middle-Man"><a href="#18-Middle-Man" class="headerlink" title="18. Middle Man"></a>18. Middle Man</h4><ul>
<li>If the half functions of a class are delegated to other classes, these delegations are overused.</li>
<li>Some skills refactor this problem, for example, <em>Remove Middle Man, Inline Function, Replace Superclass with Delegate</em> and <em>Replace Subclass with Delegate.</em></li>
</ul>
<h4 id="19-Insider-Trading"><a href="#19-Insider-Trading" class="headerlink" title="19. Insider Trading"></a>19. Insider Trading</h4><ul>
<li>A large amount of data exchange occurs between modules.</li>
<li>Some skills refactor this problem, for example, <em>Move Function, Move Field, Hide Delegate, Replace Subclass with Delegate</em> and <em>Replace Superclass with Delegate</em></li>
</ul>
<h4 id="20-Large-Class"><a href="#20-Large-Class" class="headerlink" title="20. Large Class"></a>20. Large Class</h4><ul>
<li>A class has many abilities so that it many fields. Repeated code follows up.</li>
<li>Some skills refactor this problem, for example, <em>Extract Class, Extract Superclass</em> and <em>Replace Type Code with Subclass</em></li>
</ul>
<h4 id="21-Alternative-Classes-with-Different-Interfaces"><a href="#21-Alternative-Classes-with-Different-Interfaces" class="headerlink" title="21. Alternative Classes with Different Interfaces"></a>21. Alternative Classes with Different Interfaces</h4><ul>
<li>A class is replaced with other class when they have the same interface</li>
<li>Some skills refactor this problem, for example, <em>Change Function Declaration, Move Function</em> and <em>Extract Superclass</em></li>
</ul>
<h4 id="22-Data-Class"><a href="#22-Data-Class" class="headerlink" title="22. Data Class"></a>22. Data Class</h4><ul>
<li>A data class only puts get&#x2F;set fields without behavior. Some client’s behavior should be put in this data class.</li>
<li>Some skills refactor this problem, for example, <em>Encapsulate Record, Remove Setting Method, Move Function, Extract Function</em> and <em>Split Phase</em></li>
</ul>
<h4 id="23-Refused-Bequest"><a href="#23-Refused-Bequest" class="headerlink" title="23. Refused Bequest"></a>23. Refused Bequest</h4><ul>
<li>A subclass has inherited superclass’s functions and data. If this subclass doesn’t want them, it only chooses some from them.</li>
<li>Some skills refactor this problem, for example, <em>Push Down Method, Push Down Field, Replace Subclass with Delegate</em> and <em>Replace Superclass with Delegate</em></li>
</ul>
<h4 id="24-Comments"><a href="#24-Comments" class="headerlink" title="24. Comments"></a>24. Comments</h4><ul>
<li>Some comments explain what the terrible code work for. If this code is refactored, the comments are redundant.</li>
<li>Some skills refactor this problem, for example, <em>Extract Function, Change Function Declaration</em> and <em>Introduce Assertion</em></li>
</ul>
<p>The tip at book’s page 84 describes:</p>
<blockquote>
<p>When you feel the need to write a comment, first try to refactor the code so that any comment becomes superfluous.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[Refactoring: Improving the Design of Existing Code (2nd Edition)](Improving the Design of Existing Code (2nd Edition))</p>
]]></content>
      <categories>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>A First Set of Refactorings</title>
    <url>/2022/01/30/refactoring-chapter-6-a-first-set-of-refactorings/</url>
    <content><![CDATA[<p>This article references the chapter 6 “ A First Set of Refactorings “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many important refactorings in this chapter.</p>
<p>I use .NET C# to practice with these refactorings and upload to Github.</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/plumber-4427401_1920-1024x620.jpg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/plumber-4427401_1920-1024x620.jpg" alt="A first set of refactorings"></a></p>
<p>(Photo from Pixabay: <a href="https://pixabay.com/illustrations/plumber-repair-tools-pipe-plunger-4427401/">https://pixabay.com/illustrations/plumber-repair-tools-pipe-plunger-4427401/ )</a></p>
<h4 id="Extract-Function"><a href="#Extract-Function" class="headerlink" title="Extract Function"></a>Extract Function</h4><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Redundant logics should be extracted as a function</li>
<li>A function is best when developers see its naming and understand what it does without looking at its implementation.</li>
<li>A function usually has few lines of code.</li>
<li>Sometimes a extracted function is not proper, then transfer it into inline lines.</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>No Variables Out of Scope</li>
<li>Using Local Variables</li>
<li>Reassigning a Local Variable</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Extract%20Function">Github</a></p>
<h4 id="Inline-Function"><a href="#Inline-Function" class="headerlink" title="Inline Function"></a>Inline Function</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If the indirect call of this function is not required, make it as inline function</li>
<li>This function has no polymorphism. It means that if this function belongs to a class and subclass uses it, inline function doesn’t work.</li>
</ul>
<h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Rating</li>
<li>Report Lines</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Inline%20Function">Github</a></p>
<h4 id="Extract-Variable"><a href="#Extract-Variable" class="headerlink" title="Extract Variable"></a>Extract Variable</h4><h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Some expressions are complex, so use Extract Variable to improve readability.</li>
<li>Check the target expression has no side-effect before extract it</li>
</ul>
<h5 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Static Function</li>
<li>In a Class</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Extract%20Variable">Github</a></p>
<h4 id="Inline-Variable"><a href="#Inline-Variable" class="headerlink" title="Inline Variable"></a>Inline Variable</h4><h5 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If this variable hinders the nearby refactoring, this variable should be removed.</li>
<li>Check the right side of the assignment to the variable has no side-effect.</li>
</ul>
<h5 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples:"></a>Examples:</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> grade = student.Grade;</span><br><span class="line"><span class="keyword">return</span> (grade &gt;= <span class="number">60</span>);</span><br><span class="line"><span class="comment">// after Inline Variable</span></span><br><span class="line"><span class="keyword">return</span> student.Grade &gt;= <span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Change-Function-Declaration"><a href="#Change-Function-Declaration" class="headerlink" title="Change Function Declaration"></a>Change Function Declaration</h4><h5 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>A good function name increases readability.</li>
<li>Changing parameters of a function decouple between the modules.</li>
<li>If an published API should be refactored, then use [deprecated] for the original function. After a period, migrate the old function to the new one and remove the old one.</li>
</ul>
<h5 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Renaming a Function (Simple Mechanics)</li>
<li>Renaming a Function (Migration Mechanics)</li>
<li>Adding a Paramete</li>
<li>Changing a Parameter to One of Its Properties</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Change%20Function%20Declaration">Github</a></p>
<h4 id="Encapsulate-Variable"><a href="#Encapsulate-Variable" class="headerlink" title="Encapsulate Variable"></a>Encapsulate Variable</h4><h5 id="Tips-5"><a href="#Tips-5" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Usually use function to encapsulate access of variables</li>
<li>For mutable data, if its scope exceeds one function, we encapsulate it.</li>
<li>If the variable’s value is a record, we can use <strong><em>Encapsulate Record</em></strong></li>
</ul>
<h5 id="Examples-5"><a href="#Examples-5" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple</li>
<li>Encapsulating the Value</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Encapsulate%20Variable">Github</a></p>
<h4 id="Rename-Variable"><a href="#Rename-Variable" class="headerlink" title="Rename Variable"></a>Rename Variable</h4><h5 id="Tips-6"><a href="#Tips-6" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Good naming increases readability</li>
<li>If the variable is widely used, we can use <strong><em>Encapsulate Variable</em></strong></li>
<li>If this variable is a published variable, we can’t use this refactoring</li>
</ul>
<h5 id="Examples-6"><a href="#Examples-6" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Encapsulating Variable</li>
<li>Renaming a Constant</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Rename%20Variable">Github</a></p>
<h4 id="Introduce-Parameter-Object"><a href="#Introduce-Parameter-Object" class="headerlink" title="Introduce Parameter Object"></a>Introduce Parameter Object</h4><h5 id="Tips-7"><a href="#Tips-7" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Use a class to packs the parameters of a function</li>
<li>Keep these classes as Value Objects (DDD)</li>
<li>Use <strong><em>Change Function Declaration</em></strong> to create the new class parameter</li>
</ul>
<h5 id="Examples-7"><a href="#Examples-7" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Change Function Declaration</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Introduce%20Parameter%20Object">Github</a></p>
<h4 id="Combine-Functions-into-Class"><a href="#Combine-Functions-into-Class" class="headerlink" title="Combine Functions into Class"></a>Combine Functions into Class</h4><h5 id="Tips-8"><a href="#Tips-8" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some parameter exists in multiple functions, creating a class is a good choice. Move the parameter to class field and reduce parameter of function.</li>
<li><strong><em>Combine Functions into Transform</em></strong> is another choice depending on the context</li>
<li>Use <strong><em>Encapsulate Record</em></strong> for the previously mentioned parameters. Then use <strong><em>Move Function</em></strong> for those function into a new class.</li>
<li>We can use <strong><em>Extract Function</em></strong> for the logic processing the record data into the new class.</li>
</ul>
<h5 id="Examples-8"><a href="#Examples-8" class="headerlink" title="Examples:"></a>Examples:</h5><p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Combine%20Functions%20into%20Class">Github</a></p>
<h4 id="Combine-Functions-into-Transform"><a href="#Combine-Functions-into-Transform" class="headerlink" title="Combine Functions into Transform"></a>Combine Functions into Transform</h4><h5 id="Tips-9"><a href="#Tips-9" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Transform function loads the original data, then use some functions to get new data and set it the fields of <strong>derivation</strong> data.</li>
<li>Comparing with <strong><em>Combine Functions into Class,</em></strong> if some code logic updates the original data, <strong><em>Combine Functions into Class</em></strong> is better.</li>
<li>In a transform function, first <strong>deep copy</strong> the loaded original data into result(derivation) data. Finally return this result data.</li>
<li>If the structure of the result is the same as the original, the transform function uses “Enrich” as prefix naming. If the structure changes, then use “Transform” as prefix naming.</li>
<li>It’s not recommended for JavaScript to use this refactoring instead of using <strong><em>Combine Functions into Class</em></strong> because of <strong>Immutable data</strong></li>
</ul>
<h5 id="Examples-9"><a href="#Examples-9" class="headerlink" title="Examples:"></a>Examples:</h5><p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Combine%20Functions%20into%20Transform">Github</a></p>
<h4 id="Split-Phase"><a href="#Split-Phase" class="headerlink" title="Split Phase"></a>Split Phase</h4><h5 id="Tips-10"><a href="#Tips-10" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some logic concurrently processes 2 different things, then separate it into 2 independent modules.</li>
<li>Extract the second phase code as a new function. And create an intermediate data structure as the parameter of the new function.</li>
<li>If some parameters in second phase are used by first phase, then move these parameters into the intermediate data structure.</li>
<li>Extract the first phase as a function and this function returns the intermediate data structure.</li>
</ul>
<h5 id="Examples-10"><a href="#Examples-10" class="headerlink" title="Examples:"></a>Examples:</h5><p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch6.A%20First%20Set%20of%20Refactorings/Split%20Phase">Github</a></p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This chapter introduces me to a whole clever coding environment! I think I ever did some similar refactorings in my previous projects without so detailed guidelines. If you want to learn detailed motivation and mechanics, study the chapter 6 “ A First Set of Refactorings “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. and it improves our programmer’s ability.</p>
<p>A First Set of Refactorings</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Encapsulation</title>
    <url>/2022/02/13/refactoring-chapter-7-encapsulation/</url>
    <content><![CDATA[<p>This article references the chapter 7 “ Encapsulation “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many important refactorings in this chapter.</p>
<p>I use .NET C# to practice with these refactorings and upload to Github.</p>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/02/archive-1850170_1920-1024x683.jpg"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/02/archive-1850170_1920-1024x683.jpg" alt="Encapsulation"></a></p>
<p>(Photo from Pixabay: <a href="https://pixabay.com/photos/archive-boxes-shelf-folders-1850170/">https://pixabay.com/illustrations/plumber-repair-tools-pipe-plunger-4427401/ )</a></p>
<h4 id="Encapsulate-Record"><a href="#Encapsulate-Record" class="headerlink" title="Encapsulate Record"></a>Encapsulate Record</h4><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>For mutable data, use Class object instead of Record.</li>
<li>If some record has nested data (list&#x2F;hash&#x2F;….), encapsulating this nested data is better.</li>
<li>Usually use a class to encapsulate the record and create the access methods in the class.</li>
<li>For nested data, we first focus on “Update Method”, then “Read Method” can return the copy &#x2F; readonly proxy of the data.</li>
<li>If a record’s field is also a complex structure, consider to use <strong><em>Encapsulate Record</em></strong> or <strong><em>Encapsulate Collection</em></strong>.</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Encapsulation</li>
<li>Encapsulating a Nested Record</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Encapsulate%20Record">Github</a></p>
<h4 id="Encapsulate-Collection"><a href="#Encapsulate-Collection" class="headerlink" title="Encapsulate Collection"></a>Encapsulate Collection</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Usually add “Add” and “Remove” functions for accessing the collection</li>
<li>Create a function that returns the copy of the collection. This avoids changing the original collection</li>
<li>If we want set the collection, use the copy of parameter collection to set.</li>
</ul>
<h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Encapsulation</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Encapsulate%20Collection">Github</a></p>
<h4 id="Replace-Primitive-with-Object"><a href="#Replace-Primitive-with-Object" class="headerlink" title="Replace Primitive with Object"></a>Replace Primitive with Object</h4><h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Some simple number&#x2F;string instances will has complex logic, we should encapsulate them into classes. These classes are <strong>value classes.</strong></li>
<li>Consider <strong><em>Change Reference to Value</em></strong> or <strong><em>Change Value to Reference</em></strong> for the created object.</li>
</ul>
<h5 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Replacement</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Replace%20Primitive%20with%20Object">Github</a></p>
<h4 id="Replace-Temp-with-Query"><a href="#Replace-Temp-with-Query" class="headerlink" title="Replace Temp with Query"></a>Replace Temp with Query</h4><h5 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>This skill is used for the temp variable that is calculated once.</li>
<li>Some temp variable is calculated many times, we also extract its calculation logic into query function.</li>
</ul>
<h5 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Replacement</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Replace%20Temp%20with%20Query">Github</a></p>
<h4 id="Extract-Class"><a href="#Extract-Class" class="headerlink" title="Extract Class"></a>Extract Class</h4><h5 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If one class’s responsibility is too huge, we consider that the class is split into main class and sub class. Sub class has the closed activities of functions&#x2F;data.</li>
</ul>
<h5 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Extraction</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Extract%20Class">Github</a></p>
<h4 id="Inline-Class"><a href="#Inline-Class" class="headerlink" title="Inline Class"></a>Inline Class</h4><h5 id="Tips-5"><a href="#Tips-5" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If one class’s responsibility has no reason to exist by its single class, move this class’s member into another class.</li>
</ul>
<h5 id="Examples-5"><a href="#Examples-5" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Inline</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Inline%20Class">Github</a></p>
<h4 id="Hide-Delegate"><a href="#Hide-Delegate" class="headerlink" title="Hide Delegate"></a>Hide Delegate</h4><h5 id="Tips-6"><a href="#Tips-6" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Create the delegate function to hide the inner relationship between the called object and the caller. If the called object changes, the caller still uses the delegate function without knowing the change.</li>
</ul>
<h5 id="Examples-6"><a href="#Examples-6" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Simple Hiding</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch7.Encapsulation/Hide%20Delegate">Github</a></p>
<h4 id="Remove-Middle-Man"><a href="#Remove-Middle-Man" class="headerlink" title="Remove Middle Man"></a>Remove Middle Man</h4><h5 id="Tips-7"><a href="#Tips-7" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If the delegate functions are too many, adjust caller to directly call the target object.</li>
</ul>
<h5 id="Examples-7"><a href="#Examples-7" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Just use the <strong>Hide Delegate</strong> example from end to start</li>
</ul>
<h4 id="Substitute-Algorithm"><a href="#Substitute-Algorithm" class="headerlink" title="Substitute Algorithm"></a>Substitute Algorithm</h4><h5 id="Tips-8"><a href="#Tips-8" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If the new algorithm is easy to maintain, we consider that the old algorithm is replaced by the new one.</li>
</ul>
<h5 id="Examples-8"><a href="#Examples-8" class="headerlink" title="Examples:"></a>Examples:</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FindPerson</span>(<span class="params"><span class="built_in">string</span>[] people</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.Length; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (people[i] == <span class="string">&quot;Don&quot;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Don&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (people[i] == <span class="string">&quot;John&quot;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (people[i] == <span class="string">&quot;Kent&quot;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Kent&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FindPerson</span>(<span class="params"><span class="built_in">string</span>[] people</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span>[] candidates = <span class="keyword">new</span> <span class="built_in">string</span>[]&#123;<span class="string">&quot;Don&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Kent&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> people.FirstOrDefault(x =&gt; candidates.Contains(x)) ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This chapter introduces me to the concept of complete encapsulation! If you want to learn detailed motivation and mechanics, study the chapter 7 “ Encapsulation “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. and it improves our programmer’s ability.</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Moving Features</title>
    <url>/2022/03/10/refactoring-chapter-8-moving-features/</url>
    <content><![CDATA[<p>This article references the chapter 8 “ Moving Features “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many important refactorings in this chapter.</p>
<p>I use .NET C# to practice with these refactorings and upload to Github.</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/03/moving-3671446_1920-1024x757.png" alt="Moving Features"></p>
<p>(Photo from Pixabay: <a href="https://pixabay.com/illustrations/moving-boxes-mover-moving-truck-3671446/">https://pixabay.com/illustrations/plumber-repair-tools-pipe-plunger-4427401/https://pixabay.com/illustrations/moving-boxes-mover-moving-truck-3671446/ )</a></p>
<h4 id="Move-Function"><a href="#Move-Function" class="headerlink" title="Move Function"></a>Move Function</h4><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If a nested function of a outer function may be used for other situations, move this nested function to a general scope.</li>
<li>If a function of a class is better for other class, move this function into the target class.</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Moving a Nested Function to Top Level</li>
<li>Moving between Classes</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch8.Moving%20Features/Move%20Function">Github</a></p>
<h4 id="Move-Field"><a href="#Move-Field" class="headerlink" title="Move Field"></a>Move Field</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If other structures are modified after one field is modified, we should move this field into a central structure.</li>
<li>Field should be encapsulated, it means that we add get&#x2F;set accessors to encapsulate fields to avoid “Bare” record.</li>
</ul>
<h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
<li>Moving to a Shared Object</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch8.Moving%20Features/Move%20Field">Github</a></p>
<h4 id="Move-Statements-into-Function"><a href="#Move-Statements-into-Function" class="headerlink" title="Move Statements into Function"></a>Move Statements into Function</h4><h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some statement repeatably works on many places, we should move it into a function.</li>
</ul>
<h5 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch8.Moving%20Features/Move%20Statements%20into%20Function">Github</a></p>
<h4 id="Move-Statements-into-Callers"><a href="#Move-Statements-into-Callers" class="headerlink" title="Move Statements into Callers"></a>Move Statements into Callers</h4><h5 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some statement are changed by callers in a function, we should extract it to each caller.</li>
</ul>
<h5 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>Just use the <strong>Move Statements into</strong> <strong>Function</strong> example from end to start</li>
</ul>
<h4 id="Replace-Inline-Code-with-Function-Call"><a href="#Replace-Inline-Code-with-Function-Call" class="headerlink" title="Replace Inline Code with Function Call"></a>Replace Inline Code with Function Call</h4><h5 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some inline code has been implements in some function, replace it with the function.</li>
<li>A good naming function shows what the inline code outputs without understanding the implementation</li>
</ul>
<h5 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples:"></a>Examples:</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before refactoring</span></span><br><span class="line"><span class="built_in">bool</span> hasMyFavoriteFruit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> fruit <span class="keyword">in</span> basket)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(fruit == <span class="string">&quot;Apple&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        hasMyFavoriteFruit  = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after refactoring</span></span><br><span class="line"><span class="built_in">bool</span> hasMyFavoriteFruit = basket.Contains(<span class="string">&quot;Apple&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Slide-Statements"><a href="#Slide-Statements" class="headerlink" title="Slide Statements"></a>Slide Statements</h4><h5 id="Tips-5"><a href="#Tips-5" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Some variable declarations are placed together on the top of scope, but author recommends that he declares variable when only first time he uses it.</li>
<li>Some statement has side-effect. If we slide it without test, it may cause the error.</li>
<li>We can implement the statement (function) by using C<a href="https://amzn.to/3ng73c5">ommand&#x2F;Query separation pattern</a> to avoid the side-effect.</li>
<li>This refactoring focuses on the change of the state. When we slide statement, <strong>Split Variable</strong> is a good method.</li>
</ul>
<h5 id="Examples-5"><a href="#Examples-5" class="headerlink" title="Examples:"></a>Examples:</h5><p>Sliding with Conditionals</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before refactoring</span></span><br><span class="line">Response result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(connection.Status == Status.OK)</span><br><span class="line">&#123;</span><br><span class="line">    result = CreateSuccessMessage();</span><br><span class="line">    connectionResponses.Add(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    result = CreateFailsMessage();</span><br><span class="line">    connectionResponses.Add(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">// after refactoring</span></span><br><span class="line">Response result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(connection.Status == Status.OK)</span><br><span class="line">&#123;</span><br><span class="line">    result = CreateSuccessMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    result = CreateFailsMessage();</span><br><span class="line">&#125;</span><br><span class="line">connectionResponses.Add(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<h4 id="Split-Loop"><a href="#Split-Loop" class="headerlink" title="Split Loop"></a>Split Loop</h4><h5 id="Tips-6"><a href="#Tips-6" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If a loop contains many independent works, split them into their own loop scope.</li>
<li>We use <strong>Move Statement</strong> to move related variable declaration near by the new loop.</li>
<li>Split loop can be extracted as a function.</li>
<li><strong>Replace Loop with Pipeline</strong> is a better implementation.</li>
</ul>
<h5 id="Examples-6"><a href="#Examples-6" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch8.Moving%20Features/Split%20Loop">Github</a></p>
<h4 id="Replace-Loop-with-Pipeline"><a href="#Replace-Loop-with-Pipeline" class="headerlink" title="Replace Loop with Pipeline"></a>Replace Loop with Pipeline</h4><h5 id="Tips-7"><a href="#Tips-7" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Collection Pipeline is a modern pattern. A pipeline receives a collection and process it with some operations and outputs a new collection.</li>
<li>JavaScript has map&#x2F;filter&#x2F;… pipeline functions, C# has LINQ (select&#x2F;where…).</li>
<li>Pipeline increases the code readability.</li>
</ul>
<h5 id="Examples-7"><a href="#Examples-7" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch8.Moving%20Features/Replace%20Loop%20with%20Pipeline">Github</a></p>
<h4 id="Remove-Dead-Code"><a href="#Remove-Dead-Code" class="headerlink" title="Remove Dead Code"></a>Remove Dead Code</h4><h5 id="Tips-8"><a href="#Tips-8" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If some code is not used ever, remove it to avoid confusing you&#x2F;your team members.</li>
<li>Version control can manage all code history. Make the good use of it.</li>
</ul>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This chapter introduces me how to move the code logic greatly. In my early coding job, I used to write long logic function. And this function was gradually hard maintainable. I learned some like Moving Features skills to enhance the code but it still was not completed. I have grown up to write better code when I study this refactoring chapter. If you want to learn detailed motivation and mechanics, study the chapter 8 “ Moving Features “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. and it improves our programmer’s ability.</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Organizing Data</title>
    <url>/2022/03/26/refactoring-chapter-9-organizing-data/</url>
    <content><![CDATA[<p>This article references the chapter 9 “ Organizing Data “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. Author had highlighted many important refactorings in this chapter.</p>
<p>I use .NET C# to practice with these refactorings and upload to Github.</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2022/03/cabinet-3283536_960_720.jpg" alt="organizing data"></p>
<p>(Photo from Pixabay: <a href="https://pixabay.com/photos/cabinet-drawer-wood-catalogue-3283536/">https://pixabay.com/photos/cabinet-drawer-wood-catalogue-3283536/</a><a href="https://pixabay.com/illustrations/moving-boxes-mover-moving-truck-3671446/">)</a></p>
<hr>
<h4 id="Split-Variable"><a href="#Split-Variable" class="headerlink" title="Split Variable"></a>Split Variable</h4><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>Loop variable and collecting variable are special. They are assigned value many times.</li>
<li>Other variable is responsible for one thing. It should be assigned value one time.</li>
<li>If some variable is assigned many times, we should split it into different variables.</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
<li>Assigning to an Input Parameter</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch9.Organizing%20Data/Split%20Variable">Github</a></p>
<hr>
<h4 id="Rename-Field"><a href="#Rename-Field" class="headerlink" title="Rename Field"></a>Rename Field</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>A field with good naming makes the developer clever about what the code does.</li>
<li>Field and accessors (getter&#x2F;setter) namings are important.</li>
<li>If a record is still not encapsulated, use <strong>Encapsulate Record</strong>.</li>
</ul>
<h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch9.Organizing%20Data/Rename%20Field">Github</a></p>
<hr>
<h4 id="Replace-Derived-Variable-with-Query"><a href="#Replace-Derived-Variable-with-Query" class="headerlink" title="Replace Derived Variable with Query"></a>Replace Derived Variable with Query</h4><h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>We should minimize the scope of mutable data at much as possible.</li>
<li>Use this skill to avoid “We update the source data but we forget to update the derived variable”</li>
</ul>
<h5 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
<li>More Than One Source</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch9.Organizing%20Data/Replace%20Derived%20Variable%20with%20Query">Github</a></p>
<hr>
<h4 id="Change-Reference-to-Value"><a href="#Change-Reference-to-Value" class="headerlink" title="Change Reference to Value"></a>Change Reference to Value</h4><h5 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>A <a href="https://martinfowler.com/bliki/ValueObject.html">value object</a> is immutable. We can transfer this object into other logic without caring about modifying the object’s data.</li>
<li>If an object can be shared between many objects and they can see its modification, it should be a reference object.</li>
<li>Value object usually implements <strong>equals</strong> function.</li>
</ul>
<h5 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
<li>More Than One Source</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch9.Organizing%20Data/Change%20Reference%20to%20Value">Github</a></p>
<hr>
<h4 id="Change-Reference-to-Value-1"><a href="#Change-Reference-to-Value-1" class="headerlink" title="Change Reference to Value"></a>Change Reference to Value</h4><h5 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>If a shared Value Object data needs update, we need to find all data copies and update them. Change it to Reference Object and the object’s update reflects on all clients.</li>
<li>Build a <a href="https://martinfowler.com/eaaCatalog/repository.html">Repository</a> to manage the reference object. All clients find the reference objects by the repository.</li>
</ul>
<h5 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples:"></a>Examples:</h5><ul>
<li>A simple example</li>
</ul>
<p><a href="https://github.com/u8989332/martin-fowler-refactoring-2nd/tree/master/Ch9.Organizing%20Data/Change%20Value%20to%20Reference">Github</a></p>
<hr>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This chapter introduces me how to organize data. In ASP.NET MVC development, I have used Service&#x2F;Repository pattern to manage my data source. And I used the LINQ to perform <strong>Replace Derived Variable with Query</strong>. I have grown up to write better code when I study this refactoring chapter. If you want to learn detailed motivation and mechanics, study the chapter 9 “ Organizing Data “ of <a href="https://amzn.to/3LUmBwI">Refactoring: Improving the Design of Existing Code (2nd Edition)</a>. and it improves our programmer’s ability.</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Refactoring</category>
      </categories>
  </entry>
  <entry>
    <title>Spark 1.5.2 Standalone 安裝</title>
    <url>/2015/11/24/spark-1-5-2-standalone/</url>
    <content><![CDATA[<p>安裝 Spark 1.5.2 Standalone</p>
<h4 id="1-Spark簡介"><a href="#1-Spark簡介" class="headerlink" title="1.Spark簡介"></a>1.Spark簡介</h4><p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark-logo-trademark.png" alt="Spark"></p>
<p>Spark是由美國UC Berkeley AMPLab所開發的專案，是一種能執行分散式運算的系統。Spark的運算速度比Hadoop的MapReduce還要快，其原因在於Spark與Hadoop系統的主要差異有：</p>
<ol>
<li> 運算幾乎都在memory完成，減少硬碟的I&#x2F;O</li>
<li> 使用DAG排程，減少job的loading</li>
</ol>
<p>這樣的優異表現在這兩年多內迅速的成長，甚至許多國際大企業支持這項Open Source的開發。它的架構如下：</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark-stack.png" alt="Spark 框架"></p>
<p>  　　Spark的子架構有</p>
<ol>
<li>Spark SQL：可對資料用SQL語言作查詢</li>
<li>Spark Streaming：資料能以串流的方式處理</li>
<li>MLib：能用Machine Learning的技術對資料作處理</li>
<li>GraphX：將資料轉為圖論作處理</li>
</ol>
<p>　　未來會對每一種系統作介紹與使用方式。</p>
<h4 id="2-安裝Spark"><a href="#2-安裝Spark" class="headerlink" title="2.安裝Spark"></a>2.安裝Spark</h4><p>　　Spark的分散式模式有Standalone、Yarn與Mesos。Standalone模式是Spark只使用自己的分散式機制與各台機器連結，也可使用Zookeeper增加Master選舉機制；Yarn與Mesos模式是使用這兩者的資源管理執行job。一般作測試會使用Standalone，若要在正式的Production運算會使用Yarn或Mesos。目前最新的Spark版本為1.5.2，本篇以這版本的Standalone模式作安裝介紹。<br>　　在下載Spark之前，先確定cluster有安裝JAVA7以上的版本與SSH無密碼連線，相關安裝設置可參考安裝Hadoop集群這篇：<a href="https://geekcodeparadise.com/2015/09/hadoop-2-7-1-cluster/">[Hadoop] 安裝Hadoop 2.7.1 Cluster在VirtualBox</a>　<br>　　首先用wget下載1.5.2版的Spark：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/spark/spark-1.5.2/spark-1.5.2-bin-hadoop2.6.tgz</span><br><span class="line">tar -zxf spark-1.5.2-bin-hadoop2.6.tgz</span><br></pre></td></tr></table></figure>

<p>　　進到spark-1.5.2-bin-hadoop2.6&#x2F;conf底下，將spark-env.sh.template複製成spark-env.sh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure>

<p>　　在這內容最下方增加這幾筆參數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim spark-env.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=hadoop01 <span class="comment">#Spark Master的IP</span></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_PORT=7077 <span class="comment">#Spark Master的port</span></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_WEBUI_PORT=8090 <span class="comment">#Spark WebUI的port，官方預設是8080，我的機器有其他應用佔用了，所以改用8090</span></span><br></pre></td></tr></table></figure>

<p>　　接著複製slaves.template成slaves：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> slaves.template slaves</span><br></pre></td></tr></table></figure>

<p>　　在最下方增加每台機器的hostname：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim slaves</span><br><span class="line"></span><br><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br><span class="line">hadoop04</span><br><span class="line">hadoop05</span><br></pre></td></tr></table></figure>

<p>　　將Spark資料夾作權限更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /home/test/spark-1.5.2-bin-hadoop2.6</span><br></pre></td></tr></table></figure>

<p>　　複製給其他台機器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /home/test/spark-1.5.2-bin-hadoop2.6 <span class="built_in">test</span>@hadoop02:/home/test/</span><br><span class="line">scp -r /home/test/spark-1.5.2-bin-hadoop2.6 <span class="built_in">test</span>@hadoop03:/home/test/</span><br><span class="line">scp -r /home/test/spark-1.5.2-bin-hadoop2.6 <span class="built_in">test</span>@hadoop04:/home/test/</span><br><span class="line">scp -r /home/test/spark-1.5.2-bin-hadoop2.6 <span class="built_in">test</span>@hadoop05:/home/test/</span><br></pre></td></tr></table></figure>

<p>　　在hadoop01啟動Spark：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/test/spark-1.5.2-bin-hadoop2.6/sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<p>　　Spark這樣子就啟動完成了，用Web port:8090檢查狀態：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/11/web2Bstatus-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/web2Bstatus.png" alt="Spark 1.5.2 Standalone shell 網頁"></a></p>
<p>　　可以看見有5個Workers，每台配置1GB的RAM運行。進入Spark shell檢查是否能連到cluster上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/test/spark-1.5.2-bin-hadoop2.6/bin/spark-shell --master spark://hadoop01:7077</span><br><span class="line"><span class="comment">#後面參數--master代表指定要啟用shell的機器位置，cluster的Master是hadoop01，而port預設是用7077</span></span><br><span class="line"><span class="comment">#特別要注意的是ip不能打實際的ip（192.168.56.101），Spark抓不到....</span></span><br></pre></td></tr></table></figure>

<p>　　會出現scala&gt;的command，代表可以用scala程式語言作Spark的運算：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark2Bshell2Bscala-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark2Bshell2Bscala.png" alt="Spark 1.5.2 Standalone shell"></a></p>
<p>　　在出現scala command之前有一些error，是顯示Spark抓不到HDFS的位置，因為目前沒開Hadoop，這error不會影響使用Spark。在Web上也可看見有spark shell的application。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark2Bshell2Bscala2Bweb-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/spark2Bshell2Bscala2Bweb.png" alt="Spark 1.5.2 Standalone 網頁"></a></p>
<p>　　退出scala command，使用Spark的範例計算圓周率PI。在spark-1.5.2-bin-hadoop2.6的目錄下有examples目錄，裡面有一些簡單用Spark運算的程式碼，最常使用計算PI來作測試。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/test/spark-1.5.2-bin-hadoop2.6/bin/spark-submit --master spark://hadoop01:7077 examples/src/main/python/pi.py 10</span><br><span class="line"><span class="comment">#最後兩個參數為要執行的計算PI程式碼與計算PI的迭代次數</span></span><br></pre></td></tr></table></figure>

<p>　　計算的輸出顯示在一堆INFO當中：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/11/pi-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/11/pi.png" alt="Spark 1.5.2 Standalone 輸出"></a></p>
<h4 id="3-結論"><a href="#3-結論" class="headerlink" title="3.結論"></a>3.結論</h4><p>　　Spark相較Hadoop確實快了許多，在job的啟動及計算有明顯的差異，之後會作個計算的速度比較。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><p><a href="http://spark.apache.org/docs/latest/index.html">Spark官方網站</a></p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Spark</category>
      </categories>
  </entry>
  <entry>
    <title>Threading in C# - GETTING STARTED</title>
    <url>/2021/12/05/threading-in-csharp-part-1-getting-started/</url>
    <content><![CDATA[<h3 id="Threading-in-C-前言"><a href="#Threading-in-C-前言" class="headerlink" title="Threading in C# 前言"></a>Threading in C# 前言</h3><p>這陣子換了新工作環境，公司使用不少C# Thread相關的技術，而知名書籍C# in a Nutshell的作者Joseph Albahari，將C# Threading 的技術教學都免費公開，因此會閱讀他的教學文來撰寫讀書筆記，希望在工作專案或Side Project都有幫助到。</p>
<p>作者有一些程式碼並非完整，我會盡量寫出實際可執行的範例，且有些功能Net Core以後不支援，也會加上註明。以下正式開始。</p>
<h3 id="Introduction-and-Concepts"><a href="#Introduction-and-Concepts" class="headerlink" title="Introduction and Concepts"></a>Introduction and Concepts</h3><ul>
<li>Thread是獨立的執行路徑, 也能同時和其他Thread工作</li>
<li>C# Client程式(Console, wpf, winform等), CLR都會起單一的Main thread執行</li>
</ul>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2021/12/NewThread.png" alt="Multi-Threading"></p>
<p>Multi-Threading in C# (Picture source: <a href="http://www.albahari.com/threading/">Threading in C#<br>Joseph Albahari</a>)</p>
<ul>
<li>被賦予工作的Thread, 只要那工作(function)完成, 該Thread也就結束,也無法重新工作</li>
<li>每個Thread會分配到記憶體獨立的Stack區塊, 所以function的變數能有地方儲存</li>
<li>Thread如果參考到同一物件, 該物件的資料會共享. 如果用static的資料也一樣是共享</li>
<li>但資料共享容易造成_<strong>Thread-Safe</strong>_的問題, 要特別處理, 像下面範例, 因為兩個取到done的值都是false, 所以都會執行</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class ThreadTestWithSharedData<br>{<br>    private bool done &#x3D; false;<br>    static void Main()<br>    {<br>        ThreadTestWithSharedData test &#x3D; new ThreadTestWithSharedData();<br>        Thread t &#x3D; new Thread(test.GoMaybeNotSafe);<br>        t.Start();<br>        test.GoMaybeNotSafe();<br>        Console.Read();<br>    }</p>
<pre><code>public void Go()
&#123;
    if(!done)&#123;
        done = true;
        Console.WriteLine(&quot;done&quot;);
    &#125;
&#125;

public void GoMaybeNotSafe()
&#123;
    if(!done)&#123;
        Console.WriteLine(&quot;done&quot;);
        done = true;
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>使用Exclusive lock, 只允許一個thread運算</li>
<li>當Thread被Blocked, 不會消耗CPU資源</li>
</ul>
<h4 id="Join-and-Sleep"><a href="#Join-and-Sleep" class="headerlink" title="Join and Sleep"></a>Join and Sleep</h4><ul>
<li>使用Join可等待Thread完成</li>
<li>使用Sleep讓當前Thread暫停指定的時間</li>
<li>不管是Join或Sleep, 都是_<strong>Blocked</strong>_</li>
<li>Thread.Sleep(0) 將目前Thread的運算時間放其, 將CPU時間交給別的Thread, 等同功能是 Thread.Yield()</li>
<li>用Sleep(0)或Yield, 可以用來找thread safety的問題, 假如把Yield填入程式任何地方且出現問題, 代表這程式碼有Bug</li>
</ul>
<h4 id="How-Threading-Works"><a href="#How-Threading-Works" class="headerlink" title="How Threading Works"></a>How Threading Works</h4><ul>
<li>在CLR裡有個Thread Scheduler, 代表作業系統, 由它Thread的執行時間</li>
<li>單一處理器的系統, 切的time slice時間比switch context的時間還長</li>
<li>多處理器的系統, 切的time slice有concurrency, 可以同時執行多個thread</li>
<li>Thread如果被preempted(搶占), 代表它是被interrupted, 比如time-slicing</li>
</ul>
<h4 id="Threads-vs-Processes"><a href="#Threads-vs-Processes" class="headerlink" title="Threads vs Processes"></a>Threads vs Processes</h4><ul>
<li>多個Thread可以執行在1個Process</li>
<li>Process之間是互相隔離</li>
<li>Thread之間互相分享Heap記憶體的資料</li>
</ul>
<h4 id="Threading’s-Uses-and-Misuses-誤用"><a href="#Threading’s-Uses-and-Misuses-誤用" class="headerlink" title="Threading’s Uses and Misuses(誤用)"></a>Threading’s Uses and Misuses(誤用)</h4><ul>
<li>Maintaining a responsive user interface: 其他的Worker Thread可背後執行消耗的任務, 而Main(UI) Thread與User操作互動</li>
<li>Making efficient use of an otherwise blocked CPU:</li>
<li>Parallel programming: 在多核心&#x2F;多處理器的環境, 多個執行緒能平行分擔工作</li>
<li>Speculative(投機性) execution: 有些任務可以用多個演算法同時運算, 最終結果取最快運算完的.</li>
<li>Allowing requests to be processed simultaneously: .NET的Server功能(WCF、ASP.NET等) 收到Request, 會自動建立多執行緒來處理. Client也是可同樣的作法.</li>
<li>強調多執行緒之間共用資料時, 都會有Bug的產生. 建議把多執行緒的邏輯能封裝在獨立的library, 也比較好測試</li>
<li>有些功能用太多執行緒不見得更快, 比如Disk IO, 只要幾個thread讀取 比 10幾個thread還快</li>
</ul>
<h3 id="Creating-and-Starting-Threads"><a href="#Creating-and-Starting-Threads" class="headerlink" title="Creating and Starting Threads"></a>Creating and Starting Threads</h3><ul>
<li>Thread建立時會帶入委託TheadStart, 但可以省略直接帶functionc或匿名function</li>
</ul>
<h4 id="Passing-Data-to-a-Thread"><a href="#Passing-Data-to-a-Thread" class="headerlink" title="Passing Data to a Thread"></a>Passing Data to a Thread</h4><ul>
<li>可以在Thread.Start(someArgs)代入該function的參數</li>
<li>也可以用ParameterizedThreadStart, 但是function的參數必須用object, 再另外轉型</li>
</ul>
<p><strong>Lambda expressions and captured variables:</strong> 傳參數要注意共用性的問題, 下面的輸出可能是0223557799, 而不是0~9各出現一次, 原因是有時多個Thread對i會存取到一樣的</p>
<p>for (int i &#x3D; 0; i &lt; 10; i++)<br>  new Thread (() &#x3D;&gt; Console.Write (i)).Start();</p>
<p>解決Captured variable的方法是指定變數:</p>
<p>for (int i &#x3D; 0; i &lt; 10; i++)<br>{<br>  int temp &#x3D; i;<br>  new Thread (() &#x3D;&gt; Console.Write (temp)).Start();<br>}</p>
<h4 id="Naming-Threads"><a href="#Naming-Threads" class="headerlink" title="Naming Threads"></a>Naming Threads</h4><ul>
<li>可以指定Thread的名字, 比較容易做Debug</li>
<li>用<a href="http://thread.currentthread.name/">Thread.CurrentThread.Name</a> &#x3D; XXXX 指定名字</li>
</ul>
<h4 id="Foreground-and-Background-Threads"><a href="#Foreground-and-Background-Threads" class="headerlink" title="Foreground and Background Threads"></a>Foreground and Background Threads</h4><ul>
<li>Thread預設建立是Foreground, 代表它執行完才會讓App結束</li>
<li>指定Thread.IsBackground &#x3D; true, App終止時並不會理會Background的thread而強制終止</li>
<li>如果在程式要結束且有finally的background thread, 這thread也會被忽略掉, 解決方法有2</li>
</ul>
<ol>
<li>用Join</li>
<li>如果是Pooled thread, 可用event wait handler</li>
</ol>
<ul>
<li>如果有程式被任務管理員中止, 所有程式內的thread都會像background的直接中止</li>
</ul>
<h4 id="Thread-Priority"><a href="#Thread-Priority" class="headerlink" title="Thread Priority"></a>Thread Priority</h4><ul>
<li>Priority決定thread的執行時間長度</li>
<li>小心使用Priority, 否則可能造成對其他thread取資源的starvation</li>
<li>如果Process的Priority很低, 即使調高Thread的Priority也是會被限制資源</li>
<li>Process有個RealTime的Priority, 這會幾乎搶佔所有作業系統的資源, 小心使用, 一般用High就好</li>
<li>如果要做RealTime的應用程式且包含使用者介面, 通常會拆開來, 使用者介面一個程式、後端運算是另一個程式, 彼此溝通用Remoting(WCF, Web Api之類)或memory-mapped files (C# in a Nutshell 有提到!! 沒用過~~)</li>
</ul>
<h4 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h4><ul>
<li>建立Thread的try&#x2F;catch&#x2F;finally的scope, 無法捕捉到thread拋出的exception, 以下範例會直接拋出Exception, 而程式直接中止, 不會進到catch</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class ThreadThrowException<br>{<br>    static void Main(string[] args){<br>        try{<br>            Thread t &#x3D; new Thread(Go);<br>            t.Start();<br>        }<br>        catch(Exception ex){<br>            Console.WriteLine(“Hi i am here” + ex.Message);<br>        }</p>
<pre><code>    Console.Read();
&#125;

static void Go()
&#123;
    throw new Exception(&quot;Null&quot;);
&#125;
</code></pre>
<p>}</p>
<ul>
<li>將try&#x2F;catch寫在被Thread執行的function</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class ThreadThrowException2<br>{<br>    static void Main(string[] args){<br>        Thread t &#x3D; new Thread(Go);<br>        t.Start();</p>
<pre><code>    Console.Read();
&#125;

static void Go()
&#123;
    try&#123;
        throw new Exception(&quot;Null&quot;);
    &#125;
    catch(Exception ex)&#123;
        Console.WriteLine(&quot;Hi i am here&quot; + ex.Message);
    &#125;
    
&#125;
</code></pre>
<p>}</p>
<ul>
<li>Global的異常事件處理(WPF和Winform的Application.DispatcherUnhandledException和 Application.ThreadException), 只有Main UI thread拋出的異常才會處理, 其他Worker thread的異常要自己處理</li>
<li>AppDomain.CurrentDomain.UnhandledException會被任何異常觸發, 但無法阻止後續程式的中止, 以下範例兩個exception都會被UnhandledException捕捉, 但程式仍直接中止</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class ThreadThrowExceptionWithAppDomainHandler<br>{<br>    static void Main(string[] args){<br>        AppDomain currentDomain &#x3D; AppDomain.CurrentDomain;<br>        currentDomain.UnhandledException +&#x3D; new UnhandledExceptionEventHandler(MyHandler);<br>        try{<br>            Thread t &#x3D; new Thread(Go);<br>            t.Start();<br>        }<br>        catch(Exception ex){<br>            Console.WriteLine(“Hi i am here” + ex.Message);<br>        }</p>
<pre><code>    throw new Exception(&quot;TEST&quot;);

    Console.Read();
&#125;

static void Go()
&#123;
    throw new Exception(&quot;Null&quot;);
&#125;

static void MyHandler(object s, UnhandledExceptionEventArgs args)
&#123;
    Exception e = (Exception) args.ExceptionObject;
    Console.WriteLine(&quot;runtime terminating: &#123;0&#125; &quot;, args.IsTerminating);
&#125;
</code></pre>
<p>}</p>
<h3 id="Threading-Pool"><a href="#Threading-Pool" class="headerlink" title="Threading Pool"></a>Threading Pool</h3><ul>
<li>使用Threading Pool的4種方式</li>
</ul>
<ol>
<li>Task Parallel Library</li>
<li>ThreadPool.QueueUserWorkItem</li>
<li>asynchronous delegates (BeginXXXXX…)</li>
<li>BackgroundWorker</li>
</ol>
<ul>
<li>以下是間接會用到Threading pool:</li>
</ul>
<ol>
<li>WCF, Remoting, ASP.NET, ASMX Web service等的應用程式Server</li>
<li>System.Timers.Timer和System.Threading.Timer</li>
<li>Net有用Async結尾的函式, 比如WebClient(使用event-based asynchronous pattern)和BeginXXXX開頭的函式(asynchronous programming model pattern)</li>
<li>PLINQ</li>
</ol>
<ul>
<li>使用Threading Pool的注意事項</li>
</ul>
<ol>
<li>不能對Thread pool設定Name</li>
<li>thread pool都是background thread</li>
<li>block thread pool可能會造成一些潛在問題, 有一些優化的手法(比如ThreadPool.SetMinThreads)</li>
</ol>
<ul>
<li>Thread pool設過priority後, 任務執行完回收到pool會賦歸成normal priority</li>
<li>可以用Thread.CurrentThread.IsThreadPoolThread 查看目前Thread是不是從pool來的</li>
</ul>
<h4 id="Entering-the-Thread-Pool-via-TPL"><a href="#Entering-the-Thread-Pool-via-TPL" class="headerlink" title="Entering the Thread Pool via TPL"></a>Entering the Thread Pool via TPL</h4><ul>
<li>新的Task類別使用Thread pool更簡單</li>
<li>非泛型的Task類別取代ThreadPool.QueueUserWorkItem</li>
<li>泛型的Task<TResult>類別取代asynchronous delegate (BeginXXXXX…)</li>
<li>非泛型的Task類別用Task.Factory.StartNew</li>
<li>會回傳一個Task物件, 可以用Wait()等待, 而Task指定的函式發生Exception時, 會捕捉到</li>
<li>如果不對Task物件做Wait, 而中間發生的Exception會造成程式中止 ( 這個用Console程式無法成功, 主程式沒被中止)</li>
<li>Task<TResult>的結果可用.Result取得該Task回傳的結果</li>
<li>在Task<TResult>取Result有Exception時, 會包裝在AggregateException, 沒處理的話會讓程式中止</li>
</ul>
<h4 id="Entering-the-Thread-Pool-Without-TPL"><a href="#Entering-the-Thread-Pool-Without-TPL" class="headerlink" title="Entering the Thread Pool Without TPL"></a>Entering the Thread Pool Without TPL</h4><ul>
<li>ThreadPool.QueueUserWorkItem 和 asynchronous delegates都是不使用TPL而用Thread pool的方法, 差異在於asynchronous delegates可從thread回傳資料、回傳exception給caller</li>
</ul>
<p><em><strong>QueueUserWorkItem</strong></em></p>
<ul>
<li>像是new Thread一樣, 代入void的function, 也能代入參數, 都包裝在object</li>
<li>如果function有未處理的exception, 將造成程式中止</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class QueueUserWorkItem<br>{<br>    static void Main(string[] args){</p>
<pre><code>    ThreadPool.QueueUserWorkItem(Go);
    ThreadPool.QueueUserWorkItem(Go, 12345);
    Console.Read();
&#125;

static void Go(object data)
&#123;
    Console.WriteLine(&quot;Hello &quot; + data);
&#125;
</code></pre>
<p>}</p>
<p><em><strong>Asynchronous delegates</strong></em></p>
<ul>
<li>能夠回傳值, 基於IAsyncResult</li>
<li>Asynchronous delegate和asynchronous methods不一樣, 有些函式庫也是用BeginXXX&#x2F;EndXXX開頭</li>
<li>使用Asynchronous delegates的流程:</li>
</ul>
<ol>
<li>建立要被委託的函式, 必需指定成Func類別</li>
<li>用Func的BeginInvoke呼叫該函式, 會回傳IAsyncResult</li>
<li>用Func的EndInvoke代入IAsyncResult變數, 將取得結果</li>
</ol>
<p>using System;<br>using System.Threading;</p>
<p>class AsynchronousDelegate<br>{<br>    static void Main(string[] args){<br>        Func&lt;string, int, string&gt; task &#x3D; Go;<br>        IAsyncResult cookie &#x3D; task.BeginInvoke(“test”, 123, null, null);<br>        string result &#x3D; task.EndInvoke(cookie);<br>        Console.WriteLine(“Result is “ + result);<br>        Console.Read();<br>    }</p>
<pre><code>static string Go(string name, int n)
&#123;
    return name + &quot; and &quot; + n.ToString();
&#125;
</code></pre>
<p>}</p>
<ul>
<li>EndInvoke會做3件事:</li>
</ul>
<ol>
<li>如果事情還未完成, 會等它完成</li>
<li>接收回傳值</li>
<li>將Exception拋回至Caller</li>
</ol>
<ul>
<li>技術上來講, 如果函式沒有要回傳值, 可以不呼叫EndInvoke, 但內部造成的Exception要小心. 所以建議都呼叫EndInvoke</li>
<li>另一種用法是把處理運算結果寫在另一個委託函式, 該函式接收IAsyncResult的參數. 而不是在Caller呼叫 EndInvoke</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class AsynchronousDelegate2<br>{<br>    static void Main(string[] args){<br>        Func&lt;string, int, string&gt; task &#x3D; Go;<br>        task.BeginInvoke(“test”, 123, Done, task);<br>        Console.Read();<br>    }</p>
<pre><code>static void Done(IAsyncResult cookie)
&#123;
    var target = (Func&amp;lt;string, int, string&gt;) cookie.AsyncState;
    string result = target.EndInvoke(cookie);
    Console.WriteLine(&quot;Result is &quot; + result);
&#125;

static string Go(string name, int n)
&#123;
    return name + &quot; and &quot; + n.ToString();
&#125;
</code></pre>
<p>}</p>
<h4 id="Optimizing-the-Thread-Pool"><a href="#Optimizing-the-Thread-Pool" class="headerlink" title="Optimizing the Thread Pool"></a>Optimizing the Thread Pool</h4><ul>
<li>ThreadPool.SetMaxThreads可以設置Thread pool最多的Thread數量</li>
<li>每個環境有預設的上限</li>
</ul>
<ol>
<li>Framework 4.0 &amp; 32-bit 可設1023個</li>
<li>Framework 4.0 &amp; 64-bit 可設32768個</li>
<li>Framework 3.5 可設每個核心250個</li>
<li>Framework 2.0 可設每個核心25個</li>
</ol>
<ul>
<li>ThreadPool.SetMinThreads能設置最小的Thread數量, 預設是每個core會有1個</li>
<li>SetMinThreads能優化的狀況是, 因為建立Thread會有延遲, 但如果SetMinThreads指定X個, 這X個Thread不要有延遲.</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://amzn.to/3lQcLky">C# 9.0 in a Nutshell: The Definitive Reference, Joseph Albahari (Amazon)</a></li>
</ol>
<p><a href="https://geekcodeparadise.com/threading-in-csharp-series-book-summary/">Threading in C# 系列的讀書筆記</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Thread</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>Threading in C# - BASIC SYNCHRONIZATION</title>
    <url>/2021/12/05/threading-in-csharp-part-2-basic-synchronization/</url>
    <content><![CDATA[<h3 id="Threading-in-C-PART-2-BASIC-SYNCHRONIZATION"><a href="#Threading-in-C-PART-2-BASIC-SYNCHRONIZATION" class="headerlink" title="Threading in C# - PART 2: BASIC SYNCHRONIZATION"></a>Threading in C# - PART 2: BASIC SYNCHRONIZATION</h3><p>這篇文章為閱讀 Threading in C# 系列的Part 2筆記.</p>
<h3 id="Threading-Synchronization-Essentials"><a href="#Threading-Synchronization-Essentials" class="headerlink" title="Threading - Synchronization Essentials"></a>Threading - Synchronization Essentials</h3><ul>
<li>同步的結構分4種:</li>
</ul>
<ol>
<li>Simple blocking methods: 像是Sleep, Join, Task.Wait等</li>
<li>Locking constructs: 限制數個Thread做後續操作, Excluseive locking只有一個thread, 比如lock(Monitor.Enter, Monitor.Exit), Mutex 和 SpinLock. 而Nonexclusive locking像是Semaphore, SemaphoreSlim 和 reader&#x2F;writer locks</li>
<li>Signaling constructs: Thread可以暫停, 直到收到通知才恢復, 這可避免沒效率的輪詢. 比如用 event wait handler, Monitor的Wait&#x2F;Pulse, CountdownEvent和Barrier</li>
<li>Nonblocking synchronization constructs: Thread.MemoryBarrier, Thread.VolatileRead, Thread.VolatileWrite, volatile關鍵字 和 Interlocked類別</li>
</ol>
<h4 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h4><ul>
<li>等待、Sleep等會讓thread暫停, 把time slice還給CPU.</li>
<li>可用ThreadState檢查是否Blocked</li>
</ul>
<p>bool blocked &#x3D; (someThread.ThreadState &amp; ThreadState.WaitSleepJoin) !&#x3D; 0</p>
<ul>
<li>當Thread發生block 或 unblock, 都會造成 Context Switch</li>
<li>unblock的觸發條件:</li>
</ul>
<ol>
<li>blocking條件已滿足</li>
<li>operation timing out(有指定timeout的時候)</li>
<li>被interrupt</li>
<li>被aborted</li>
</ol>
<h4 id="Blocking-Versus-Spinning"><a href="#Blocking-Versus-Spinning" class="headerlink" title="Blocking Versus Spinning"></a>Blocking Versus Spinning</h4><ul>
<li>用loop一直查詢某條件, 造成CPU消耗很大的運算資源</li>
<li>一種比較好一點的寫法是, 在loop內加個Thread.Sleep</li>
<li>如果要用Spinning的寫法, 一種是保證該條件很快就滿足的運算, 另外一種是用SpinLock&#x2F;SpinWait</li>
</ul>
<h4 id="ThreadState"><a href="#ThreadState" class="headerlink" title="ThreadState"></a>ThreadState</h4><p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-11.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-11.png"></a></p>
<ul>
<li>ThreadState可以檢查Thread的狀態</li>
</ul>
<h3 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h3><ul>
<li>區分 thread-safe和thread-unsafe的程式碼, 通常是有static變數, 如果有多個thread存取時會不會錯誤</li>
<li>最簡單的方式是用lock關鍵字做同步化, 綁住某個同步化物件, 只允許一個thread操作, 其他的thread變成blocked狀態, 且依照queue的順序來排隊</li>
</ul>
<h4 id="A-Comparison-of-Locking-Constructs"><a href="#A-Comparison-of-Locking-Constructs" class="headerlink" title="A Comparison of Locking Constructs"></a>A Comparison of Locking Constructs</h4><ul>
<li>下表的overhead是指對一個thread做block和unblock的時間</li>
</ul>
<p>Construct</p>
<p>Purpose</p>
<p>Cross-Process ?</p>
<p>Overhead</p>
<p>lock (Monitor.Enter &#x2F; Monitor.Exit)</p>
<p>確保只有一個Thread能存取資源或一段code</p>
<p> </p>
<p>20 ns</p>
<p>Mutext</p>
<p>同lock</p>
<p>Yes</p>
<p>1000 ns</p>
<p>SemaphoreSlim</p>
<p>確保指定數量的thread能存取資源或一段code</p>
<p> </p>
<p>200 ns</p>
<p>Semaphore</p>
<p>同Semaphore</p>
<p>Yes</p>
<p>1000 ns</p>
<p>ReaderWriterLockSlim</p>
<p>允許多個reader能與一個writer共存</p>
<p> </p>
<p>40 ns</p>
<p>ReaderWriterLock</p>
<p>同ReaderWriterLockSlim</p>
<p> </p>
<p>100 ns</p>
<h4 id="Monitor-Enter-and-Monitor-Exit"><a href="#Monitor-Enter-and-Monitor-Exit" class="headerlink" title="Monitor.Enter and Monitor.Exit"></a>Monitor.Enter and Monitor.Exit</h4><ul>
<li>lock &#x3D; Monitor.Enter + Monitor.Exit + try&#x2F;finally</li>
</ul>
<p>try<br>{<br>    DoSomething();<br>}<br>finally<br>{<br>    Monitor.Exit(_locker);<br>}</p>
<ul>
<li>上面寫法會有bug, 如果在Enter和try之間發生exception (比如thread被Abort或記憶體溢出), 則永遠不釋放該locker</li>
<li>更好的寫法是在try內用Enter, 且代入bool的變數, 用來判斷是否lock成功, 成功的話可以呼叫Exit</li>
</ul>
<p>bool lockTaken &#x3D; false;<br>try<br>{<br>Monitor.Enter(_locker, ref lockTaken)<br>}<br>finally<br>{<br>if(lockTaken)<br>{<br>Monitor.Exit(_locker);<br>}<br>}</p>
<ul>
<li>還有個TryEnter, 可以代入timeout, 如果回傳true代表lock成功, 如果回傳false代表lock過程超時</li>
</ul>
<h4 id="Choosing-the-Synchronization-Object"><a href="#Choosing-the-Synchronization-Object" class="headerlink" title="Choosing the Synchronization Object"></a>Choosing the Synchronization Object</h4><ul>
<li>必須是reference type的物件</li>
<li>一般是private的物件, 做邏輯封裝</li>
<li>精準的lock會用專門的locker物件</li>
<li>lock(this)或lock(typeof(SomeClass)), 很難預防死結和過多的blocking</li>
</ul>
<h4 id="When-to-Lock"><a href="#When-to-Lock" class="headerlink" title="When to Lock"></a>When to Lock</h4><ul>
<li>基本的規則是, lock在存取可寫的共享物件</li>
<li>Thread safe與unsafe的寫法</li>
</ul>
<p>class ThreadUnsafe<br>{<br>static int _x;<br>static void Increment() { ++_x; }<br>static void Assign() { _x &#x3D; 123; }<br>}</p>
<p>class ThreadSafe<br>{<br>static readonly object _locker &#x3D; new object();<br>static int _x;<br>static void Increment() { lock(_locker) { ++_x; }}<br>static void Assign() { lock(_locker) { _x &#x3D; 123; }}<br>}</p>
<ul>
<li>non-blocking的同步化, 後續有memory-barriers和Interlocked可用</li>
</ul>
<h4 id="Locking-and-Atomicity"><a href="#Locking-and-Atomicity" class="headerlink" title="Locking and Atomicity"></a>Locking and Atomicity</h4><ul>
<li>有一組變數, 寫跟讀總是在同一個lock, 則稱它們是Atomic</li>
<li>比如下面x與y的除法範例</li>
</ul>
<p>lock (_locker)<br>{<br>if(x!&#x3D;0)<br>y &#x2F;&#x3D; x;<br>}</p>
<ul>
<li>有時會有破壞atomicity的bug, 比如有呼叫其他函式造成exception, 使某些變數沒完整計算完</li>
<li>建議其他函式先運算完再把它的值帶入到lock, 或者try的catch&#x2F;finally做rollback</li>
</ul>
<h4 id="Nested-Locking"><a href="#Nested-Locking" class="headerlink" title="Nested Locking"></a>Nested Locking</h4><ul>
<li>lock可以巢狀包裝</li>
<li>適用於lock的內容, 有call其他的函式, 這些函式實作再加上lock</li>
</ul>
<h4 id="Deadlocks"><a href="#Deadlocks" class="headerlink" title="Deadlocks"></a>Deadlocks</h4><ul>
<li>當兩個thread都掌握對方的資源且等待對方釋放, 沒任何進展就是死結</li>
<li>基本的死結案例:</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class TestDeadlocks<br>{<br>    static void Main(string[] args){<br>        object locker1 &#x3D; new object();<br>        object locker2 &#x3D; new object();<br>        new Thread(() &#x3D;&gt; {<br>            lock(locker1){<br>                Thread.Sleep(1000);<br>                Console.WriteLine(“Ready to lock 2”);<br>                lock(locker2);<br>            }<br>        }).Start();<br>        lock(locker2){<br>            Thread.Sleep(1000);<br>            Console.WriteLine(“Ready to lock 1”);<br>            lock(locker1);<br>        }</p>
<pre><code>    Console.WriteLine(&quot;Hi&quot;);
    Console.Read();
&#125;
</code></pre>
<p>}</p>
<ul>
<li>更複雜的死結是,Thread 1 lock 而呼叫A class的X方法, X方法呼叫B class的Y 方法, 另外Thread 2 lock而呼叫B class的Y方法, Y方法呼叫A class的X方法.</li>
<li>考慮lock是否要用在別的class的函式</li>
<li>之後的declarative, data parallelism, immutable types 和 nonblock synchronization能減少lock的需求</li>
<li>另一些常見的死結發生在WPF的Dispatcher.Invoke或Winform的Control.Invoke, 解法是用BeginInvoke</li>
</ul>
<h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><ul>
<li>基本上lock的速度很快</li>
<li>如果有很短暫的lock, 可以改用SpinLock, 減少Context Switch</li>
<li>Lock得太久, 會減少共時性的效能; Lock也是造成Deadlock的風險</li>
</ul>
<h4 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h4><ul>
<li>跨Process的lock, 大約比lock慢50倍</li>
<li>使用WaitOne做lock, ReleaseMutex unlock, 而用close或dispose也是release</li>
<li>Mutex認出同樣的lock是用Name</li>
<li>如果是執行在Terminal Services環境, 一般的Mutex無法跨terminal server session, 要在Name加上Global 前綴字</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class OneAtATimePlease<br>{<br>    static void Main(string[] args){<br>        using(var mutex &#x3D; new Mutex(false, “test oreilly”))<br>        {<br>            if(!mutex.WaitOne(TimeSpan.FromSeconds(3), false)){<br>                Console.WriteLine(“ another is running”);<br>                Console.Read();<br>                return;<br>            }<br>            RunProgram();<br>        }<br>    }</p>
<pre><code>static void RunProgram()
&#123;
    Console.WriteLine(&quot;To exit&quot;);
    Console.Read();
&#125;
</code></pre>
<p>}</p>
<h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><ul>
<li>Semaphore允許多個Thread在同一區段執行, 超過此容量的thread會block等待</li>
<li>把Semaphore的容量設為1, 就和lock與mutex一樣, 但Semaphore的Release是任何thread都能呼叫</li>
<li>SemaphoreSlim有更低延遲, 且能帶cancellation token, 用在parallel programming</li>
<li>如果Semaphore有給名字, 也是能跨Process</li>
<li>下面範例是最多3個Thread進入</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class SemaphoreClub<br>{<br>    static SemaphoreSlim _sem &#x3D; new SemaphoreSlim(3);<br>    static void Main(string[] args){<br>        for(int i &#x3D; 0 ; i &lt; 5; ++i){<br>            new Thread(Enter).Start(i);<br>        }<br>        Console.Read();<br>    }</p>
<pre><code>static void Enter(object id)
&#123;
    Console.WriteLine(id + &quot; wants to enter&quot;);
    \_sem.Wait();
    Console.WriteLine(id + &quot; is in!&quot;);
    Thread.Sleep(500 \* (int) id);
    Console.WriteLine(id + &quot; is leaving&quot;);
    \_sem.Release();
&#125;
</code></pre>
<p>}</p>
<h3 id="Thread-Safety"><a href="#Thread-Safety" class="headerlink" title="Thread Safety"></a>Thread Safety</h3><ul>
<li>一般的type很少是Thread-safe, 原因有如下:</li>
</ul>
<ol>
<li>開發時要維護該type所有Thread-safe欄位</li>
<li>Thread-safety有效能上的花費, 即使沒有多執行緒也必要花費</li>
<li>使用Thread-safe的type不一定能讓執行程式thread-safe</li>
</ol>
<ul>
<li>基本的用法是用exclusive lock去鎖定特定的程式碼而達到thread-safe</li>
<li>另外是減少共享資料, 達到無狀態的功能, 比如ASP.NET Web的Request, 大都是獨自處理</li>
<li>最後是用automatic locking regime的方式, 對class或property加上ContextBoundObject和Synchronization屬性, 就能自動有鎖的功能. 但缺點是會產生另一種方式的死結、併發性差、意外重入等問題. 盡量用exlusive lock.</li>
</ul>
<h4 id="Thread-Safety-and-NET-Framework-Types"><a href="#Thread-Safety-and-NET-Framework-Types" class="headerlink" title="Thread Safety and .NET Framework Types"></a>Thread Safety and .NET Framework Types</h4><ul>
<li>Enumeration是thread-unsafe的行為, 所以共同資料要enumeration時, 先宣告一個local變數, 再用lock的方式copy (ToList, ToArray等)到local變數</li>
<li>Enumeration的另一種解法是reader&#x2F;writer lock</li>
</ul>
<p>class ThreadSafe<br>{<br>static List<string> _list &#x3D; new List<string>();<br>static void Main()<br>{<br>new Thread(AddItem).Start();<br>new Thread(AddItem).Start();<br>}</p>
<p>static void AddItem()<br>{<br>lock (_list) _list.Add(“Item “ + _list.Count());<br>string[] items;<br>lock (_list) items &#x3D; _list.ToArray();<br>foreach(string s in items) Console.WriteLine(s);<br>}<br>}</p>
<p><em><strong>Locking around thread-safe objects</strong></em></p>
<ul>
<li>如果物件本身是thread-safe, 但是對它的有些操作仍是要lock, 比如if的敘述, 沒有lock的狀況下, 多執行緒的情況會存取到同樣的值而做後續if block的操作(且可能會改值).</li>
</ul>
<p><em><strong>Static members</strong></em></p>
<ul>
<li>.net framework設計static member是thread-safe, 而實例的member不是. 比如取DateTime.Now, 就不需要去用lock來取</li>
<li>static function不是thread-safe, 要確認功能對資料的共享性</li>
</ul>
<p><em><strong>Read-only thread safety</strong></em></p>
<ul>
<li>能在文件註明該collection是只讀訪問的thread-safe, 並要求使用者在只讀的方法做寫入</li>
<li>實作ToArray等, 本身會有thread-unsafe的issue</li>
<li>如果文件缺少說明, 要注意是否某些方法是read-only. 比如Random.Next(), 內部實作有更新private seed, 因此要用lock取值或者分開的Random物件</li>
</ul>
<h4 id="Thread-Safety-in-Application-Servers"><a href="#Thread-Safety-in-Application-Servers" class="headerlink" title="Thread Safety in Application Servers"></a>Thread Safety in Application Servers</h4><ul>
<li>通常像ASP.NET,WCF都是獨立thread處理request, 但有時需要共享資料, 像catch, 更新和取資料都要lock, 會減少效能</li>
</ul>
<h4 id="Rich-Client-Applications-and-Thread-Affinity"><a href="#Rich-Client-Applications-and-Thread-Affinity" class="headerlink" title="Rich Client Applications and Thread Affinity"></a>Rich Client Applications and Thread Affinity</h4><ul>
<li>在WPF或Winform, UI的元件有Affinity特性, 代表哪個thread建立元件, 那元件只能被那thread存取.</li>
<li>所以別的thread需要marshal原本thread來控制元件, 比如Winform的Invoke或BeginInvoke, WPF的Invoke或BeginInvoke</li>
<li>Invoke是同步方法, 會block目前thread; BeginInvoke是非同步方法, 立即回傳caller而marshal的request會進到queue(和keyboard, mouse的事件使用同樣的message queue)</li>
</ul>
<p><strong><em>Worker threads versus UI threads</em></strong></p>
<ul>
<li>Rich client有兩大thread: UI Thread和Worker Thread</li>
<li>UI Thread專門建立UI元件, Worker thread一般用來執行long-running job</li>
<li>Rich client都會有一個UI Thread且是Main thread, 再由它生成work thread, 可直接生成或者用BackgroundWorker</li>
<li>Single Document Interface (SDI), 像是Word, 會有多個UI Thread</li>
</ul>
<h4 id="Immutable-Objects"><a href="#Immutable-Objects" class="headerlink" title="Immutable Objects"></a>Immutable Objects</h4><ul>
<li>物件能封裝成裡面的狀態不能被內部與外部改變, 稱為immutable object. 決定它內部值是在Constructor且值是Read-only. 可減少lock的執行時間.</li>
<li>下面範例是建立一個immutable object, 只有assign新物件才會需要lock, 取值不需要</li>
</ul>
<p>class ProgressStatus<br>{<br>public readonly int PercentComplete;<br>public readonly string StatusMessage;<br>public ProgressStatus(int percentComplete, string statusMessage)<br>{<br>PercentComplete &#x3D; percentComplete;<br>StatusMessage &#x3D; statusMessage;<br>}<br>}</p>
<p>class Program<br>{<br>readonly object _statusLocker &#x3D; new object();<br>ProgressStatus _status;<br>void SomeFunction()<br>{<br>_status &#x3D; new ProgressStatus(50, “Working on it”);<br>ProgressStatus statusCopy;<br>lock(_statusLocker) statusCopy &#x3D; _status;<br>int pc &#x3D; statusCopy.PercentComplete;<br>string msg &#x3D; statusCopy.StatusMessage;<br>}<br>}</p>
<ul>
<li>在int pc &#x3D; … 的最後2行, 有隱含用Memory barrier包裝</li>
<li>後續不使用lock, 還會有顯示Memory barrier, Interlocked.CompareExchange, spin-waits等功能可用</li>
</ul>
<h3 id="Threading-Signaling-with-Event-Wait-Handles"><a href="#Threading-Signaling-with-Event-Wait-Handles" class="headerlink" title="Threading - Signaling with Event Wait Handles"></a>Threading - Signaling with Event Wait Handles</h3><ul>
<li>Signaling是指thread會一直等待, 直到收到從別的Thread發的通知</li>
<li>和一般C#的event不相關</li>
<li>3種類型: AutoResetEvent, ManualResetEvent, CountdownEvent</li>
</ul>
<h4 id="A-Comparison-of-Signaling-Constructs"><a href="#A-Comparison-of-Signaling-Constructs" class="headerlink" title="A Comparison of Signaling Constructs"></a>A Comparison of Signaling Constructs</h4><ul>
<li>下表的overhead是指對一個signal和wait的時間</li>
</ul>
<p>Construct</p>
<p>Purpose</p>
<p>Cross-Process ?</p>
<p>Overhead</p>
<p>AutoResetEvent</p>
<p>允許一個thread當收到singal時,執行一次unblock</p>
<p>Yes</p>
<p>1000 ns</p>
<p>ManualResetEvent</p>
<p>允許一個thread當收到singal時,執行無限期的unblock (直到它重置)</p>
<p>Yes</p>
<p>1000 ns</p>
<p>ManualResetEventSlim (Net Framework 4)</p>
<p>同ManualResetEvent</p>
<p> </p>
<p>40 ns</p>
<p>CountdownEvent (Net Framework 4)</p>
<p>允許一個thread當收到預定數量的singal時,執行unblock</p>
<p> </p>
<p>40 ns</p>
<p>Barrier (Net Framework 4)</p>
<p>實作Thread執行屏障</p>
<p> </p>
<p>80 ns</p>
<p>Wait and Pulse</p>
<p>允許一個thread block直到某條件達成</p>
<p> </p>
<p>120 ns for a Pulse</p>
<h4 id="AutoResetEvent"><a href="#AutoResetEvent" class="headerlink" title="AutoResetEvent"></a>AutoResetEvent</h4><ul>
<li>它像是一個票閘, 插入一張票只讓一個人過</li>
<li>Thread 在門閘時呼叫WaitOne來wait&#x2F;block, 而呼叫Set插入票</li>
<li>如果有多個thread在門閘呼叫WaitOne, 變成queue排隊</li>
<li>Ticket可以來自任何thread, 代表任何unblock的thread可存取該AutoResetEvent物件並呼叫Set</li>
<li>在constructor代入true的話, 代表直接呼叫Set</li>
<li>用EventWaitHandle可達到相同的功能 (EventWaitHandle是AutoResetEvent的父類別)</li>
</ul>
<p>var auto &#x3D; new AutoResetEvent (false);</p>
<p>&#x2F;&#x2F; 等同寫法</p>
<p>var auto2 &#x3D; new EventWaitHandle(false, EventResetMode.AutoReset);</p>
<ul>
<li>使用的範例如下:</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>class TestAutoResetEvent<br>{<br>    static EventWaitHandle _waitHandle &#x3D; new AutoResetEvent(false);<br>    static void Main(string[] args){</p>
<pre><code>    new Thread(() =&amp;gt; &#123;
        Console.WriteLine(&quot;Wait...&quot;);
        \_waitHandle.WaitOne();
        Console.WriteLine(&quot;awake&quot;);
    &#125;).Start();
    Thread.Sleep(1000);
    \_waitHandle.Set();
    Console.Read();
&#125;
</code></pre>
<p>}</p>
<ul>
<li>範例對應的時序表</li>
</ul>
<p><a href="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-12.png"><img src="https://geekcodeparadise.com/wp-content/uploads/2022/01/image-12.png"></a></p>
<p><em><strong>Producer&#x2F;consumer queue</strong></em></p>
<ul>
<li>一個queue用來放進要執行的任務, 而其他thread在背景從這queue挑任務來做</li>
<li>用這種queue能有效管理要執行的thread數量, 比如IO密集型任務可只安排一個thread, 其他需要10個</li>
<li>CLR的Thread pool也是一種Producer&#x2F;consumer queue</li>
<li>queue插入的資料會有對應的任務, 比如填入檔案名稱, 而對應的任務是加密該檔案</li>
<li>以下用AutoResetEvent實作範例</li>
</ul>
<p>using System;<br>using System.Collections.Generic;<br>using System.Threading;</p>
<p>namespace ProducerConsumerTest<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            using (ProducerConsumerQueue q &#x3D; new ProducerConsumerQueue())<br>            {<br>                q.EnqueueTask(“Hello”);<br>                for(int i &#x3D; 0; i &lt; 20; ++i)<br>                {<br>                    q.EnqueueTask(“Say “ + i);<br>                }<br>                q.EnqueueTask(“Good bye”);<br>            }<br>        }<br>    }</p>
<pre><code>public class ProducerConsumerQueue : IDisposable
&#123;
    EventWaitHandle \_wh = new AutoResetEvent(false);
    Thread \_worker;
    readonly object \_locker = new object();
    Queue&amp;lt;string&amp;gt; \_tasks = new Queue&amp;lt;string&amp;gt;();
    public ProducerConsumerQueue()
    &#123;
        \_worker = new Thread(Work);
        \_worker.Start();
    &#125;

    public void EnqueueTask(string task)
    &#123;
        lock (\_locker)
        &#123;
            \_tasks.Enqueue(task);
        &#125;
        \_wh.Set();
    &#125;

    public void Dispose()
    &#123;
        EnqueueTask(null); // signal the consumer to exit
        \_worker.Join(); // wait for the consumer&#39;s thread to finish
        \_wh.Close(); // release any OS Resources
    &#125;

    private void Work()
    &#123;
        while (true)
        &#123;
            string task = null;
            lock(\_locker)
            &#123;
                if(\_tasks.Count &amp;gt; 0)
                &#123;
                    task = \_tasks.Dequeue();
                    if(task == null)
                    &#123;
                        return;
                    &#125;
                &#125;
            &#125;
            if(task != null)
            &#123;
                Console.WriteLine(&quot;Performing task : &quot; + task);
                Thread.Sleep(1000); // simulate work...
            &#125;
            else
            &#123;
                \_wh.WaitOne(); // no more tasks , wait for a signal
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>
<p>}</p>
<ol>
<li>用lock去鎖定queue, 達到thread-safe</li>
<li>在enqueue之後, 呼叫Set, 通知在while(true)有wait的thread可以往下做</li>
<li>如果caller插入null的資料, 直接結束</li>
<li>queue如果是空的, 會呼叫WaitOne等待signal</li>
<li>在Dispose的實作, 呼叫Enqueue(null), 讓Work方法讀到null而return結束, 否則Thread的Join永遠不結束; 對EventWaitHandle呼叫Close, 可以釋放內部有用到的資源</li>
</ol>
<ul>
<li>.Net Framework 4 有BlockingCollection, 實作Producer&#x2F;Consumer queue</li>
<li>上述用AutoResetEvent的Producer&#x2F;Consumer queue是個好的範例, 未來加上cancellation或bounded queue, 都可以此為起點</li>
</ul>
<h4 id="ManualResetEvent"><a href="#ManualResetEvent" class="headerlink" title="ManualResetEvent"></a>ManualResetEvent</h4><ul>
<li>和AutoResetEvent相比, ManualResetEvent是一般的閘門, 呼叫Set時, 讓所有等待(有呼叫過WaitOne)的Thread全都能進入</li>
<li>呼叫Reset能把閘門關上</li>
<li>呼叫WaitOne就會Block</li>
<li>等同的寫法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var manual1 = new ManualResetEvent(false);</span><br><span class="line">var manual2 = new EventWaitHandle(false, EventResetModel.ManualReset);</span><br></pre></td></tr></table></figure>

<ul>
<li>另一個是ManualResetEventSlim能執行更快且支援CancellationToken, 但不能跨Process</li>
<li>ManualResetEvent是讓一個Thread允許多個Thread unblock, CountdownEvent則相反</li>
</ul>
<h4 id="CountdownEvent"><a href="#CountdownEvent" class="headerlink" title="CountdownEvent"></a>CountdownEvent</h4><ul>
<li>用CountdownEvent可以等多個Thread執行後再往後執行</li>
<li>在.NET Framework 4之前, 可以用Wait and Pulse來實作CountdownEvent</li>
<li>建構CountdownEvent指定要的數量, 呼叫Wait則block該thread, 而呼叫Signal會降低count, 直到count為0, 該thread將unblock</li>
<li>以下範例是等待3個Thread執行後, 才繼續執行</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>public class Program<br>{<br>static CountdownEvent _countDown &#x3D; new CountdownEvent(3);<br>public static void Main()<br>{<br>new Thread(SaySomething).Start(“Thread 1”);<br>new Thread(SaySomething).Start(“Thread 2”);<br>new Thread(SaySomething).Start(“Thread 3”);<br>_countDown.Wait();<br>Console.WriteLine(“All threads have finished”);<br>}<br>static void SaySomething(object msg)<br>{<br>Thread.Sleep(3000);<br>Console.WriteLine(msg);<br>_countDown.Signal();<br>}<br>}</p>
<ul>
<li>Count可以用AddCount來加更多需等待的數量, 但如果已經達到count &#x3D; 0而又呼叫AddCount, 將拋出exception</li>
<li>建議可用TryAddCount, 回傳false代表count已經是0</li>
<li>呼叫Reset將Count回到初始值</li>
</ul>
<h4 id="Creating-a-Cross-Process-EventWaitHandle"><a href="#Creating-a-Cross-Process-EventWaitHandle" class="headerlink" title="Creating a Cross-Process EventWaitHandle"></a>Creating a Cross-Process EventWaitHandle</h4><ul>
<li>EventWaitHandle可以指定名字, 讓多個Process根據同一個名字而共同參考</li>
<li>基本用法:</li>
</ul>
<p>EventWaitHandle wh &#x3D; new EventWaitHandle(false, EventResetMode.AutoReset, “MyCompany.MyApp.Name”);</p>
<h4 id="Wait-Handles-and-the-Thread-Pool"><a href="#Wait-Handles-and-the-Thread-Pool" class="headerlink" title="Wait Handles and the Thread Pool"></a>Wait Handles and the Thread Pool</h4><ul>
<li>使用ThreadPool.RegisterWaitForSingleObject, 可以不綁特定的Thread來執行, 將要委託的任務交給Thread pool執行</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace TestWaitHandleThreadPool<br>{<br>    class Program<br>    {<br>        static ManualResetEvent _starter &#x3D; new ManualResetEvent(false);<br>        static void Main(string[] args)<br>        {<br>            RegisteredWaitHandle reg &#x3D; ThreadPool.RegisterWaitForSingleObject(_starter, Go, “Some Data”, -1, true);<br>            Thread.Sleep(5000);<br>            _starter.Set();<br>            Console.ReadLine();<br>            reg.Unregister(_starter);<br>        }</p>
<pre><code>    static void Go(object data, bool timeOut)
    &#123;
        Console.WriteLine(&quot;Start work : &quot; + data);
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>參數-1代表不用timeout, 如果有timeout的話, 會檢測傳送的物件（範例是Some Data字串）的狀態; 參數true代表該Thread pool收到signal後, 不再重設要Wait.</li>
<li>假如原本用WaiOne的方式處理, Server收到100個任務就得new 100個Thread, 變成綁定太多且大量Block. 改寫的方法如下, 讓後續的委託工作都給‘hread Pool處理</li>
</ul>
<p>void AppServerMethod()<br>{<br>_wh.WaitOne();<br>&#x2F;&#x2F; … continue execution<br>}</p>
<p>&#x2F;&#x2F; 變成</p>
<p>void AppServerMethod()<br>{<br> RegisteredWaitHandle reg &#x3D; ThreadPool.RegisterWaitForSingleObject(_starter, Resume, null, -1, true);<br> &#x2F;&#x2F; …<br>}</p>
<p>static void Resume(object data, bool timeOut)<br>{<br>&#x2F;&#x2F; … continue execution<br>}</p>
<h4 id="WaitAny-WaitAll-and-SignalAndWait"><a href="#WaitAny-WaitAll-and-SignalAndWait" class="headerlink" title="WaitAny, WaitAll, and SignalAndWait"></a>WaitAny, WaitAll, and SignalAndWait</h4><ul>
<li>WaitHandle提供static method, 包含WaitNay, WaitAll, SignalAndWait, 可以對有繼承WaitHandle的物件使用較複雜的Signal&#x2F;Wait的功能</li>
<li>WaitAny: 等待任一個Thread收到Signal</li>
<li>WaitAll: 等待所有Thread都收到Signal</li>
<li>SignalAndWait: 對第一個參數的thread發出signal, 對第二個參數的thread做等待</li>
</ul>
<p><em><strong>Alternatives to WaitAll and SignalAndWait</strong></em></p>
<ul>
<li>WaitAll和SignalAndWait不能在單一執行緒的環境執行.</li>
<li>SignalAndWait的替代方案是Barrier類別, 而WaitAll的替代方案是Parallel class的Invoke方法</li>
</ul>
<h3 id="Synchronization-Contexts-NET-Core已不存在）"><a href="#Synchronization-Contexts-NET-Core已不存在）" class="headerlink" title="Synchronization Contexts (.NET Core已不存在）"></a>Synchronization Contexts (.NET Core已不存在）</h3><ul>
<li>繼承ContextBoundObject且加上Synchronization屬性, CLR在這物件會自動使用lock</li>
<li>如下範例, 每個Demo函式會排隊執行</li>
</ul>
<p>using System;<br>using System.Runtime.Remoting.Contexts;<br>using System.Threading;</p>
<p>namespace TestAutoLock<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            AutoLock safeInstance &#x3D; new AutoLock();<br>            new Thread(safeInstance.Demo).Start();<br>            new Thread(safeInstance.Demo).Start();<br>            safeInstance.Demo();<br>        }<br>    }</p>
<pre><code>\[Synchronization\]
public class AutoLock : ContextBoundObject
&#123;
    public void Demo()
    &#123;
        Console.Write(&quot;Thread id : &quot; + Thread.CurrentThread.ManagedThreadId);
        Console.Write(&quot; Start.....&quot;);
        Thread.Sleep(1000);
        Console.WriteLine(&quot;End&quot;);
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>自動lock不包含static的成員和沒有繼承ContextBoundObject的物件(比如Form)</li>
<li>想像是CLR將原始Class套上一層ContextBoundObject Proxy, 能呼叫原始Class的成員, 再為它的方法都加上同步化的功能</li>
<li>如果前面的AutoLock是個Collection, 則使用它的物件也必須是ContextBoundObject, 否則存取它的item需要手動加上lock</li>
<li>Synchronization Context預設會延伸從同一層Scope的Context, 也就是lock包含的深度一直向下</li>
<li>在Synchronization的attribute可以改變預設的行為, 有這些選項:</li>
</ul>
<ol>
<li>NOT_SUPPORTED: 就跟沒加上Synchronization的屬性一樣</li>
<li>SUPPORTED: 如果來自別的synchronized 物件做初始化, 則延伸它的context, 否則保持unsynchronized</li>
<li>REQUIRED (預設): 如果來自別的synchronized 物件做初始化, 則延伸它的context, 否則建立新的Context</li>
<li>REQUIRES_NEW: 總是建立新增Synchronization context</li>
</ol>
<ul>
<li>以下範例是會產生Deadlock的Synchronization:</li>
</ul>
<p>using System;<br>using System.Runtime.Remoting.Contexts;<br>using System.Threading;</p>
<p>namespace TestAutoLockDeadlock<br>{<br>    [Synchronization]<br>    public class Deadlock : ContextBoundObject<br>    {<br>        public Deadlock Other;</p>
<pre><code>    public void Demo()
    &#123;
        Console.WriteLine(Thread.CurrentThread.ManagedThreadId);
        Thread.Sleep(1000);
        Console.WriteLine(&quot;Call other&quot;);
        Other.Hello();
    &#125;

    void Hello()
    &#123;
        Console.WriteLine(&quot;hello&quot;);
    &#125;
&#125;
class Program
&#123;
    private static void Main(string\[\] args)
    &#123;
        Deadlock dead1 = new Deadlock();
        Deadlock dead2 = new Deadlock();
        dead1.Other = dead2;
        dead2.Other = dead1;
        new Thread(dead1.Demo).Start();
        dead2.Demo();
        Console.Read();
    &#125;
&#125;
</code></pre>
<p>}</p>
<ol>
<li>兩個Deadlock物件都是在Program建立, Program本身是unsynchronized, 所以Deadlock物件建立各自的Synchronization Context, 也有各自的lock</li>
<li>呼叫對方的Hello方法後, 即發生Deadlock</li>
</ol>
<h4 id="Reentrancy"><a href="#Reentrancy" class="headerlink" title="Reentrancy"></a>Reentrancy</h4><ul>
<li>Reentrant的定義是, 如果有段程式碼被中斷, 執行緒去執行別的程式, 之後再回來執行這段程式而沒造成影響</li>
<li>通常Thread-safe和reentrant視為同等</li>
<li>如果[Synchronization(true)]這樣使用, 代表需要reentry, 當執行離開此程式碼時, 會把lock釋放, 可避免deadlock. 副作用是在這釋放期間, 任何thread可以進入該物件的context(比如呼叫它的方法)</li>
<li>[Synchronization(true)]是類別層級, 所以在非該context的呼叫都會當class層面的木馬(?)</li>
<li>如果沒有reentrancy, 則在一些場合比較難工作, 比如在一個synchronized class實作多執行緒, 將邏輯委託給其他worker thread, 則worker thread彼此間要溝通沒有reentrancy的話, 將會受阻.</li>
<li>同步自動鎖造成deadlock, reentrancy, 刪除併發等問題, 在一些應用場合沒有手動lock來的好用</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://amzn.to/3lQcLky">C# 9.0 in a Nutshell: The Definitive Reference, Joseph Albahari (Amazon)</a></li>
</ol>
<p><a href="https://geekcodeparadise.com/threading-in-csharp-series-book-summary/">Threading in C# 系列的讀書筆記</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Thread</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>Threading in C# - USING THREADS</title>
    <url>/2021/12/05/threading-in-csharp-part-3-using-threads/</url>
    <content><![CDATA[<h3 id="Threading-in-C-PART-3-USING-THREADS"><a href="#Threading-in-C-PART-3-USING-THREADS" class="headerlink" title="Threading in C# - PART 3: USING THREADS"></a>Threading in C# - PART 3: USING THREADS</h3><p>這篇文章為閱讀 Threading in C# 系列的Part 3筆記.</p>
<p><img src="https://geekcodeparadise.com/wp-content/uploads/2021/12/NewThread.png" alt="Multi-Threading"></p>
<p>Multi-Threading in C# (Picture source: <a href="http://www.albahari.com/threading/">Threading in C#<br>Joseph Albahari</a>)</p>
<h3 id="Threading-Pattern-The-Event-Based-Asynchronous-Pattern"><a href="#Threading-Pattern-The-Event-Based-Asynchronous-Pattern" class="headerlink" title="Threading Pattern - The Event-Based Asynchronous Pattern"></a>Threading Pattern - The Event-Based Asynchronous Pattern</h3><ul>
<li>EAP可啟用多執行緒且不需要Consumer主動或管理thread, 有以下特徵</li>
</ul>
<ol>
<li>合作式取消模型</li>
<li>當Worker thread完成工作, 可安全更新WFP&#x2F;Winform的UI元件</li>
<li>在完成的事件傳遞Exception</li>
</ol>
<ul>
<li>EAP只是個Pattern, 實作上最常見的有BackgroundWorker, WebClient等</li>
<li>這些Class包含有*Async的方法, 通常就是EAP. 呼叫*Async的方法, 將任務交給其他thread執行, 而任務完成後, 會觸發Completed事件</li>
<li>*Completed事件的參數包含這些:</li>
</ul>
<ol>
<li>有個flag標示該任務是否有被取消</li>
<li>有exception拋出時, 包裝在Error物件</li>
<li>call function代入的userToken</li>
</ol>
<ul>
<li>使用EAP的設計, 如果有遵循APM的規則, 可以節省Thread</li>
<li>之後的Task實作和EAP很相似, 讓EAP的魅力大減</li>
</ul>
<h3 id="BackgroundWorker"><a href="#BackgroundWorker" class="headerlink" title="BackgroundWorker"></a>BackgroundWorker</h3><ul>
<li>BackgroundWorker是在System.ComponentModel, 符合EAP設計, 並有以下特徵:</li>
</ul>
<ol>
<li>合作的取消模型</li>
<li>當Worker完成, 可以安全更新WPF&#x2F;Winform的Control</li>
<li>把Exception傳遞到完成事件</li>
<li>有個進度回報的protocol</li>
<li>實作IComponent, 在Design time(Ex: Visual Studio Designer)可以被託管</li>
</ol>
<h4 id="Using-BackgroundWorker"><a href="#Using-BackgroundWorker" class="headerlink" title="Using BackgroundWorker"></a>Using BackgroundWorker</h4><ul>
<li>建立BackgroundWorker的最小步驟: 建立BackgroundWorker並處理DoWork事件, 再呼叫RunWorkerAsync函式, 此函式也能代入參數. 在DoWork委託的函式, 從DoWorkEventArgs取出Argument, 代表有代入的參數.</li>
<li>以下是基本的範例</li>
</ul>
<p>using System;<br>using System.ComponentModel;</p>
<p>namespace BackgroundWorkerTest<br>{<br>    class Program<br>    {<br>        static BackgroundWorker _bw &#x3D; new BackgroundWorker();<br>        static void Main(string[] args)<br>        {<br>            _bw.DoWork +&#x3D; MyDoWork;<br>            _bw.RunWorkerAsync(123456);<br>            Console.ReadLine();<br>        }</p>
<pre><code>    private static void MyDoWork(object sender, DoWorkEventArgs e)
    &#123;
        Console.WriteLine(e.Argument);
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>BackgroundWorker有個RunWorkerCompleted事件, 當DoWork的事件完成將會觸發, 而在RunWorkerCompleted裡查詢有DoWork拋出的Exception、也能對UI Control做更新</li>
<li>如果要增加progress reporting, 要以下步驟:</li>
</ul>
<ol>
<li>設置WorkerReportsProgress屬性為true</li>
<li>定期在DoWork的委託事件呼叫ReportProgress, 代入目前完成的進度值, 也可選代入user-state</li>
<li>新增ProgressChanged事件處理, 查詢前面代入的進度值, 用ProgressPercentage參數查</li>
<li>在ProgressChanged也能更新UI Control</li>
</ol>
<ul>
<li>如果要增加Cancellation的功能:</li>
</ul>
<ol>
<li>設置WorkerSupportsCancellation屬性為true</li>
<li>定期在DoWork的委託事件內檢查CancellationPending這個boolean值, 如果它是true, 則可以設置DoWorkEventArgs的Cancel為true並做return. 如果DoWork的工作太困難而不能繼續執行, 也可以不理會CancellationPending的狀態而直接設Cancel為true</li>
<li>呼叫CancelAsync來請求取消任務</li>
</ol>
<ul>
<li>以下是progress reporting和cancellation的範例, 每經過1秒會回報累加的進度(每次增加20). 如果在5秒內按下任何鍵, 會送出cancel請求並停止DoWork. 否則超過5秒後, 在DoWorkEventArgs的Result可以設值, 並在RunWorkerCompleted的RunWorkerCompletedEventArgs的Result取值.</li>
</ul>
<p>using System;<br>using System.ComponentModel;<br>using System.Threading;</p>
<p>namespace BackgroundWorkerProgressCancel<br>{<br>    class Program<br>    {<br>        static BackgroundWorker _bw;<br>        static void Main(string[] args)<br>        {<br>            _bw &#x3D; new BackgroundWorker<br>            {<br>                WorkerReportsProgress &#x3D; true,<br>                WorkerSupportsCancellation &#x3D; true<br>            };<br>            _bw.DoWork +&#x3D; bw_DoWork;<br>            _bw.ProgressChanged +&#x3D; bw_ProgressChanged;<br>            _bw.RunWorkerCompleted +&#x3D; bw_RunWorkerCompleted;</p>
<pre><code>        \_bw.RunWorkerAsync(&quot;Run worker now&quot;);

        Console.WriteLine(&quot;Press Enter in the next 5 seconds to cancel&quot;);
        Console.ReadLine();
        if (\_bw.IsBusy)
        &#123;
            \_bw.CancelAsync();
        &#125;

        Console.ReadLine();
    &#125;

    private static void bw\_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    &#123;
        if (e.Cancelled)
        &#123;
            Console.WriteLine(&quot;You canceled&quot;);
        &#125;
        else if(e.Error != null)
        &#123;
            Console.WriteLine(&quot;Worker exception: &quot; + e.Error.ToString());
        &#125;
        else
        &#123;
            Console.WriteLine(&quot;Completed: &quot; + e.Result);
        &#125;
    &#125;

    private static void bw\_ProgressChanged(object sender, ProgressChangedEventArgs e)
    &#123;
        Console.WriteLine(&quot;Reached &quot; + e.ProgressPercentage + &quot;%&quot;);
    &#125;

    private static void bw\_DoWork(object sender, DoWorkEventArgs e)
    &#123;
        for(int i = 0; i &lt;= 100; i+= 20)
        &#123;
            if (\_bw.CancellationPending)
            &#123;
                e.Cancel = true;
                return;
            &#125;

            \_bw.ReportProgress(i);
            Thread.Sleep(1000);
        &#125;

        e.Result = 123456;
    &#125;
&#125;
</code></pre>
<p>}</p>
<h4 id="Subclassing-BackgroundWorker"><a href="#Subclassing-BackgroundWorker" class="headerlink" title="Subclassing BackgroundWorker"></a>Subclassing BackgroundWorker</h4><ul>
<li>可以繼承BackgroundWorker來實作EAP</li>
<li>以下範例是整合前面BackgroundWorker的範例, 再搭配原作者未完整的繼承案例, 功能是每一秒會累加財務的金額和信用點數, 增加的值是建構物件時給的參數. 經過5秒後把累加的結果放在Dictionary</li>
</ul>
<p>using System;<br>using System.Collections.Generic;<br>using System.ComponentModel;<br>using System.Threading;</p>
<p>namespace BackgroundWorkerSubClass<br>{<br>    class Program<br>    {<br>        static FinancialWorker _bw;<br>        static void Main(string[] args)<br>        {<br>            _bw &#x3D; new Client().GetFinancialTotalsBackground(10, 50);<br>            _bw.ProgressChanged +&#x3D; bw_ProgressChanged;<br>            _bw.RunWorkerCompleted +&#x3D; bw_RunWorkerCompleted;</p>
<pre><code>        \_bw.RunWorkerAsync(&quot;Hello to worker&quot;);
        Console.WriteLine(&quot;Press Enter in the next 5 seconds to cancel&quot;);
        Console.ReadLine();
        if (\_bw.IsBusy) \_bw.CancelAsync();
        Console.ReadLine();
    &#125;

    static void bw\_RunWorkerCompleted(object sender,
                                 RunWorkerCompletedEventArgs e)
    &#123;
        if (e.Cancelled)
            Console.WriteLine(&quot;You canceled!&quot;);
        else if (e.Error != null)
            Console.WriteLine(&quot;Worker exception: &quot; + e.Error.ToString());
        else
        &#123;
            Dictionary&lt;string, int&gt; result = e.Result as Dictionary&lt;string, int&gt;;
            Console.WriteLine(&quot;Complete: &quot;);      // from DoWork
            foreach (var item in result)
            &#123;
                Console.WriteLine($&quot;Key &#123;item.Key&#125; Value &#123;item.Value&#125;&quot;);
            &#125;
        &#125;

    &#125;

    static void bw\_ProgressChanged(object sender,
                                    ProgressChangedEventArgs e)
    &#123;
        Console.WriteLine(&quot;Reached &quot; + e.ProgressPercentage + &quot;%&quot;);
    &#125;
&#125;

public class Client
&#123;
    public FinancialWorker GetFinancialTotalsBackground(int moneyIncreaseBase, int creditPointIncreaseBase)
    &#123;
        return new FinancialWorker(moneyIncreaseBase, creditPointIncreaseBase);
    &#125;
&#125;

public class FinancialWorker : BackgroundWorker
&#123;
    public Dictionary&lt;string, int&gt; Result;   // You can add typed fields.
    public readonly int MoneyIncreaseBase, CreditPointIncreaseBase;

    public FinancialWorker()
    &#123;
        WorkerReportsProgress = true;
        WorkerSupportsCancellation = true;
    &#125;

    public FinancialWorker(int moneyIncreaseBase, int creditPointIncreaseBase) : this()
    &#123;
        this.MoneyIncreaseBase = moneyIncreaseBase;
        this.CreditPointIncreaseBase = creditPointIncreaseBase;
    &#125;

    protected override void OnDoWork(DoWorkEventArgs e)
    &#123;
        Result = new Dictionary&lt;string, int&gt;();
        Result.Add(&quot;Money&quot;, 0);
        Result.Add(&quot;CreditPoint&quot;, 0);

        int percentCompleteCalc = 0;
        while (percentCompleteCalc &lt;= 80)
        &#123;
            if (CancellationPending)
            &#123;
                e.Cancel = true;
                return;
            &#125;
            ReportProgress(percentCompleteCalc, &quot;Monet &amp; Credit Point is increasing!&quot;);
            percentCompleteCalc += 20;
            Result\[&quot;Money&quot;\] += MoneyIncreaseBase;
            Result\[&quot;CreditPoint&quot;\] += CreditPointIncreaseBase;
            Thread.Sleep(1000);
        &#125;
        ReportProgress(100, &quot;Done!&quot;);
        e.Result = Result;
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>這種繼承寫法, 可以讓Caller不用指定DoWork委託, 在呼叫RunWorkerAsync時執行有override的OnDoWork.</li>
<li>主要是把progress report, cancellation和comleted(可以更新UI之類、取運算結果)要負責的功能給caller指定, 而DoWork的邏輯交給該BackgroundWorker子類別負責.</li>
</ul>
<h3 id="Threading-的-停止-Interrupt-and-Abort"><a href="#Threading-的-停止-Interrupt-and-Abort" class="headerlink" title="Threading 的[停止]: Interrupt and Abort"></a>Threading 的[停止]: Interrupt and Abort</h3><ul>
<li>Interrupt和Abort能停止Blocked的thread</li>
<li>Abort也能停止非block的thread, 比如一直在無限迴圈執行的thread, 所以Abort會在特定場合使用, 但Interrupt很少用到</li>
</ul>
<h4 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h4><ul>
<li>Interrupt能強制使blocked thread釋放, 並拋出ThreadInterruptedException.</li>
<li>除非沒有handle ThreadInterruptedException(Catch抓到它), 否則該thread在interrupt後不會結束.</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace InterruptBasic<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            Thread t &#x3D; new Thread(() &#x3D;&gt;<br>            {<br>                try<br>                {<br>                    Thread.Sleep(Timeout.Infinite);<br>                }<br>                catch (ThreadInterruptedException)<br>                {<br>                    Console.WriteLine(“Forcibly”);<br>                }<br>                Console.WriteLine(“Woken!”);<br>            });</p>
<pre><code>        t.Start();
        t.Interrupt();
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>如果對一個non-blocked的thread使用interrupt, 它仍會持續進行, 直到它blocked, 就會拋出ThreadInterruptedException. 以下範例呈現此功能, Main thread對worker thread做interrupt, 而worker執行完一個稍微久的迴圈再做Blocked(Sleep)就會拋exception</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace ThreadInterruptNonblocking<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            Thread t &#x3D; new Thread(() &#x3D;&gt;<br>            {<br>                try<br>                {<br>                    long count &#x3D; 0;<br>                    while (count &lt; 1000000000)<br>                    {<br>                        count++;<br>                    }<br>                    Console.WriteLine(“Sleep”);<br>                    Thread.Sleep(1000);<br>                    Console.WriteLine(“I am done”);<br>                }<br>                catch(ThreadInterruptedException ex)<br>                {<br>                    Console.WriteLine(“Catch interrupt!”);<br>                }<br>            });</p>
<pre><code>        t.Start();
        Console.WriteLine(&quot;Call interrupt&quot;);
        t.Interrupt();

        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p>} </p>
<ul>
<li>先確認thread的狀態再呼叫interrupt, 可以避免此問題, 但這方法不是thread-safe, 因為if 和 interrupt 會有機率發生搶占</li>
</ul>
<p>if ((worker.ThreadState &amp; ThreadState.WaitSleepJoin) &gt; 0)<br>  worker.Interrupt();</p>
<ul>
<li>只要有thread在lock或synchronized的時候發生blocked, 則有對它interrupt的指令蜂擁而上. 如果該thread沒有處理好發生interrupt後的後續(比如在finally要釋放資源), 將導致資源不正確釋放、物件狀態未知化.</li>
<li>因此, interrupt是不必要的, 要強制對blocked thread做釋放, 安全的方式是用cancellation token. 如果是要unblock thread, Abort相較是比較有用的.</li>
</ul>
<h4 id="Abort-Net-Core不支援"><a href="#Abort-Net-Core不支援" class="headerlink" title="Abort (Net Core不支援)"></a>Abort (Net Core不支援)</h4><ul>
<li>Abort也是強制釋放blocked thread, 且會拋出ThreadAbortException. 但是在catch結尾會再重拋一次該exception</li>
<li>如果有在catch呼叫Thread.ResetAbort, 就不會發生重拋</li>
<li>在呼叫Abort後的時間內, 該thread的ThreadState是AbortRequested</li>
<li>尚未handle的ThreadAbortException 並不會造成程式shutdown</li>
<li>Abort和Interrupt的最大差異在於被呼叫的non-blocked thread會發生什麼事. Interrupt會等到該thread block才運作, 而Abort會立即拋出exceptio(unmanaged code除外)</li>
<li>Managed code不是abort-safe, 比如有個FileStream在建構讀檔的過程被Abort, 而unmanaged的file handler沒被中止, 導致檔案一直open, 直到該程式的AppDomain結束才會釋放.</li>
<li>有2個案例是可以安全做Abort:</li>
</ul>
<ol>
<li>在abort該thread後, 連它的AppDomain也要中止. 比如Unit testing</li>
<li>對自身Thread做Abort, 比如ASP.NET的Redirect機制是這樣做</li>
</ol>
<ul>
<li>作者的LINQPad工具, 當取消某個查詢時, 對它的thread abort. abort結束後, 會拆解並重新建立新的application domain, 避免發生潛在受汙染狀態</li>
</ul>
<h3 id="Safe-Cancellation"><a href="#Safe-Cancellation" class="headerlink" title="Safe Cancellation"></a>Safe Cancellation</h3><ul>
<li>Abort在大部分的情境, 是個很危險的功能</li>
<li>建議替代的方式是實作cooperative pattern, 也就是worker會定期檢查某個flag, 如果該flag被設立, 則自己做abort(比如BackgroundWorker)</li>
<li>Caller對該flag設置, Worker會定期檢查到.</li>
<li>這種pattern的缺點是worker的method必須顯式支援cancellation</li>
<li>這種是少數安全的cancellation pattern</li>
<li>以下是自定義封裝的cancellation flag class:</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace CancellationCustom<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            var canceler &#x3D; new RulyCanceler();<br>            new Thread(()&#x3D;&gt;{<br>                try{<br>                    Work(canceler);<br>                }<br>                catch(OperationCanceledException){<br>                    Console.WriteLine(“Canceled”);<br>                }<br>            }).Start();</p>
<pre><code>        Thread.Sleep(1000);
        canceler.Cancel();
    &#125;

    private static void Work(RulyCanceler canceler)
    &#123;
        while(true)
        &#123;
            canceler.ThrowIfCancellationRequested();
            try
            &#123;
                // other method
                OtherMethod(canceler);
            &#125;
            finally
            &#123;
                // any required cleanup
            &#125;
        &#125;
    &#125;

    private static void OtherMethod(RulyCanceler canceler)
    &#123;
        // do stuff...
        for(int i = 0 ; i &lt; 1000000;++i)
        &#123;
        &#125;
        Console.WriteLine(&quot;I am doing work&quot;);


        canceler.ThrowIfCancellationRequested();
    &#125;
&#125;

class RulyCanceler
&#123;
    object \_cancelLocker = new object();
    bool \_cancelRequest;
    public bool IsCancellationRequested
    &#123;
        get
        &#123;
            lock(\_cancelLocker)
            &#123;
                return \_cancelRequest;
            &#125;
        &#125;
    &#125;

    public void Cancel()
    &#123;
        lock(\_cancelLocker)
        &#123;
            \_cancelRequest = true;
        &#125;
    &#125;

    public void ThrowIfCancellationRequested()
    &#123;
        if(IsCancellationRequested)
        &#123;
            throw new OperationCanceledException();
        &#125;
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>上述寫法是安全的cancellation pattern, 但是Work method本身不需要RulyCanceler物件, 因此NET Framework提供Cancellation Token, 讓設置</li>
</ul>
<h4 id="Cancellation-Tokens"><a href="#Cancellation-Tokens" class="headerlink" title="Cancellation Tokens"></a>Cancellation Tokens</h4><ul>
<li>Net Framework 4.0提供cooperative cancellation pattern的CancellationTokenSource和CancellationToken, 使用方式為:</li>
</ul>
<ol>
<li>CancellationTokenSource提供Cancel方法</li>
<li>CancellationToken有IsCancellationRequested屬性和ThrowIfCancellationRequested方法</li>
</ol>
<ul>
<li>這個類別是更前面範例更複雜, 拆出2個類別作分開的功能(Cancel和檢查flag)</li>
<li>使用CancellationTokenSource範例如下:</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace CancellationTokenCustom<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            var cancelSource &#x3D; new CancellationTokenSource();<br>            new Thread(() &#x3D;&gt; {<br>                try<br>                {<br>                    Work(cancelSource.Token);<br>                }<br>                catch (OperationCanceledException)<br>                {<br>                    Console.WriteLine(“Canceled”);<br>                }<br>            }).Start();</p>
<pre><code>        Thread.Sleep(1000);
        cancelSource.Cancel();
        Console.ReadLine();
    &#125;

    private static void Work(CancellationToken cancelToken)
    &#123;
        while (true)
        &#123;
            cancelToken.ThrowIfCancellationRequested();
            try
            &#123;
                // other method
                OtherMethod(cancelToken);
            &#125;
            finally
            &#123;
                // any required cleanup
            &#125;
        &#125;
    &#125;

    private static void OtherMethod(CancellationToken cancelToken)
    &#123;
        // do stuff...
        for (int i = 0; i &lt; 1000000; ++i)
        &#123;
        &#125;
        Console.WriteLine(&quot;I am doing work&quot;);


        cancelToken.ThrowIfCancellationRequested();
    &#125;

&#125;
</code></pre>
<p>}</p>
<ul>
<li>主要流程為</li>
</ul>
<ol>
<li>先建立CancellationTokenSource物件</li>
<li>將CancellationTokenSource的CancellationToken代入可支援取消的函式</li>
<li>在支援取消的函式, 不斷用CancellationToken物件檢查IsCancellationRequested或者透過ThrowIfCancellationRequested來中止程式</li>
<li>對CancellationTokenSource物件呼叫Cancel方法</li>
</ol>
<ul>
<li>CancellationToken是struct, 意味這如果有隱式copy給其他的token, 則都是參考同一個CancellationTokenSource</li>
<li>CancellationToken的WaitHandle屬性會回傳取消的訊號, 而Register方法可以註冊一個委託事件, 當cancel被呼叫時可以觸發該委託.</li>
<li>Cancellation tokens在Net Framework常用的類別如下:</li>
</ul>
<ol>
<li>ManualResetEventSlim and SemaphoreSlim</li>
<li>CountdownEvent</li>
<li>Barrier</li>
<li>BlockingCollection</li>
<li>PLINQ and Task Parallel Library</li>
</ol>
<ul>
<li>這些類別通常有Wait的函式, 如果有呼叫Wait後再用CancellationToken做cancel, 將取消那Wait的功能. 比起Interrupt更清楚、安全.</li>
</ul>
<h3 id="Lazy-Initialization"><a href="#Lazy-Initialization" class="headerlink" title="Lazy Initialization"></a>Lazy Initialization</h3><ul>
<li>類別的Field, 有些在Construct需要花費較多的資源, 比如下方的程式:</li>
</ul>
<p>class Foo<br>{<br>public readonly Expensive Expensive &#x3D; new Expensive();<br>}</p>
<p>class Expensive<br>{<br>&#x2F;&#x2F; suppose this is expensive to construct<br>}</p>
<ul>
<li>可以改成一開始是null, 直到存取時才做初始化, 也就是lazily initialize, 比如下方程式:</li>
</ul>
<p>class Foo<br>{<br>Expensive _expensive;<br>public Expensive Expensive<br>{<br>get<br>{<br>if(_expensive &#x3D;&#x3D; null)<br>{<br>_expensive &#x3D; new Expensive();<br>}</p>
<p>return _expensive;<br>}<br>}<br>}</p>
<p>class Expensive<br>{<br>&#x2F;&#x2F; suppose this is expensive to construct<br>}</p>
<ul>
<li>但是在多執行緒的狀況下, 取Expensive property可能會有重複做new Expensive()的機率, 並非thread-safe. 要達到Thread-safe, 可以加上lock:</li>
</ul>
<p>class Foo<br>{<br>Expensive _expensive;<br>readonly object _expensiveLock &#x3D; new object();<br>public Expensive Expensive<br>{<br>get<br>{<br>lock(_expensiveLock)<br>{<br>if(_expensive &#x3D;&#x3D; null)<br>{<br>_expensive &#x3D; new Expensive();<br>}</p>
<p>return _expensive;<br>}<br>}<br>}<br>}</p>
<p>class Expensive<br>{<br>&#x2F;&#x2F; suppose this is expensive to construct<br>}</p>
<h4 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy<T></h4><ul>
<li>.NET Framework 4.0提供Lazy<T>的類別, 能做lazy initialization的功能. Constructor有1個參數isThreadSafe, 設為true時, 代表能支援thread-safe, 若為false, 只能用在single-thread的情境.</li>
<li>Lazy在支援thread-safe的實作, 採用Double-checked locking, 更有效率檢查初始化</li>
<li>改成用Lazy且是factory的寫法:</li>
</ul>
<p>class Foo<br>{<br>Lazy<Expensive> _expensive &#x3D; new Lazy<Expensive>(() &#x3D;&gt; new Expensive(), true);<br>readonly object _expensiveLock &#x3D; new object();<br>public Expensive Expensive<br>{<br>get<br>{<br>return _expensive.Value;<br>}<br>}<br>}</p>
<h4 id="LazyInitializer"><a href="#LazyInitializer" class="headerlink" title="LazyInitializer"></a>LazyInitializer</h4><ul>
<li>LazyInitializer是static類別, 和Lazy<T>差異在</li>
</ul>
<ol>
<li>它的static method可以直接對想做lazy initialization的field, 可以效能優化</li>
<li>有提供其他的初始化模式, 會有多個執行緒競爭</li>
</ol>
<ul>
<li>以下是LazyInitializer使用EnsureInitialized的初始化field的範例:</li>
</ul>
<p>class Foo<br>{<br>Expensive _expensive;<br>public Expensive Expensive<br>{<br>get<br>{<br>LazyInitializer.EnsureInitialized(ref _expensive, () &#x3D;&gt; new Expensive());<br>return _expensive;<br>}<br>}<br>}</p>
<ul>
<li>可以傳另一個參數做thread race的初始化, 最終只會有1個thread取得1個物件. 這種作法好處是比起Double-checked locking還要快, 因為它不需要lock.</li>
<li>但thread race的初始化很少會用到, 且它有一些缺點:</li>
</ul>
<ol>
<li>如果有多個thread競爭, 數量比CPU core還多, 會比較慢</li>
<li>潛在得浪費CPU資源做重複的初始化</li>
<li>初始化的邏輯必須是thread-safe, 比如前述Expensive的Constructor, 有static變數要寫入的話, 就可能是thread-unsafe</li>
<li>initializer對物件的初始化需要dispose時, 而沒有額外的邏輯就無法對浪費的物件做dispose</li>
</ol>
<ul>
<li>double-checked locking的參考寫法:</li>
</ul>
<p>volatile Expensive _expensive;<br>public Expensive Expensive<br>{<br>  get<br>  {<br>    if (_expensive &#x3D;&#x3D; null)             &#x2F;&#x2F; First check (outside lock)<br>      lock (_expenseLock)<br>        if (_expensive &#x3D;&#x3D; null)         &#x2F;&#x2F; Second check (inside lock)<br>          _expensive &#x3D; new Expensive();<br>    return _expensive;<br>  }<br>}</p>
<ul>
<li>race-to-initialize的參考寫法:</li>
</ul>
<p>volatile Expensive _expensive;<br>public Expensive Expensive<br>{<br>  get<br>  {<br>    if (_expensive &#x3D;&#x3D; null)<br>    {<br>      var instance &#x3D; new Expensive();<br>      Interlocked.CompareExchange (ref _expensive, instance, null);<br>    }<br>    return _expensive;<br>  }<br>}</p>
<h3 id="Thread-Local-Storage"><a href="#Thread-Local-Storage" class="headerlink" title="Thread-Local Storage"></a>Thread-Local Storage</h3><ul>
<li>Thread擁有自己獨立的資料, 別的Thread無法存取</li>
<li>有3種thread-local storage的實作</li>
</ul>
<h4 id="ThreadStatic"><a href="#ThreadStatic" class="headerlink" title="[ThreadStatic]"></a>[ThreadStatic]</h4><ul>
<li>對1個static的field加上ThreadStatic屬性, 因此每個thread存取該變數都是獨立的</li>
<li>缺點是不能用在instance的變數, 且它只有在第1個thread存取它時才初始化值一次, 因此其他thread一開始都拿到預設值.</li>
<li>以下範例是另外建2個thread對ThreadStatic變數_x各自修改值並輸出. Static constructor在程式剛啟動以Main Thread執行, 因此初始化的值5只有給Main Thread, 而t1和t2的_x值是0. 在Sleep 2秒後, Main thread的_x值仍是 5 .</li>
</ul>
<p>using System;<br>using System.Threading;<br>namespace ThreadStaticTest<br>{<br>    class Program<br>    {<br>        [ThreadStatic] static int _x;<br>        static Program()<br>        {<br>            _x &#x3D; 5;<br>        }<br>        static void Main(string[] args)<br>        {<br>            Thread t1 &#x3D; new Thread(() &#x3D;&gt; {<br>                Console.WriteLine(“t1 before: “ + _x);<br>                _x &#x3D; 666;<br>                Console.WriteLine(“t1 after: “ + _x);<br>            });</p>
<pre><code>        Thread t2 = new Thread(() =&gt; &#123;
            Console.WriteLine(&quot;t2 before: &quot; + \_x);
            \_x = 777;
            Console.WriteLine(&quot;t2 after: &quot; + \_x);
        &#125;);

        t1.Start();
        t2.Start();
        Thread.Sleep(2000);
        Console.WriteLine(\_x);
        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p>}</p>
<h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal<T></h4><ul>
<li>在Net Framework 4.0推出, 能對static 和 instance的field指定預設值</li>
<li>用ThreadLocal建立的值, 要存取時使用它的Value property</li>
<li>ThreadLocal有使用Lazy存取, 因此每個Thread再存取時會做Lazy的計算</li>
<li>如下面範例, 每個Thread的_x初始值都是3</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace ThreadLocalTest<br>{<br>    class Program<br>    {<br>        static ThreadLocal<int> _x &#x3D; new ThreadLocal<int> (() &#x3D;&gt; 3);<br>        static void Main(string[] args)<br>        {<br>            Console.WriteLine(“Hello World!”);</p>
<pre><code>        Thread t1 = new Thread(() =&gt; &#123;
            Console.WriteLine(&quot;t1 before: &quot; + \_x);
            \_x.Value = 666;
            Console.WriteLine(&quot;t1 after: &quot; + \_x);
        &#125;);

        Thread t2 = new Thread(() =&gt; &#123;
            Console.WriteLine(&quot;t2 before: &quot; + \_x);
            \_x.Value = 777;
            Console.WriteLine(&quot;t2 after: &quot; + \_x);
        &#125;);

        t1.Start();
        t2.Start();
        Thread.Sleep(2000);
        Console.WriteLine(\_x);
        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>如果是建立instance field, 用Random作為範例, Random類別是thread-unsafe, 因此在multi-thread的環境使用lock之外, 可以用ThreadLocal建立屬於各thread的獨立物件, 如下範例:</li>
</ul>
<p>var localRandom &#x3D; new ThreadLocal<Random>(() &#x3D;&gt; new Random());<br>Console.WriteLine (localRandom.Value.Next());</p>
<ul>
<li>前面Random本身有小缺陷, 如果multi-thread在相差10ms之間都對Random取值, 可能會取到相同的值, 因此可以改良帶入一些隨機參數做初始化:</li>
</ul>
<p>var localRandom &#x3D; new ThreadLocal<Random><br> ( () &#x3D;&gt; new Random (Guid.NewGuid().GetHashCode()) );</p>
<h4 id="GetData-and-SetData"><a href="#GetData-and-SetData" class="headerlink" title="GetData and SetData"></a>GetData and SetData</h4><ul>
<li>把資料存在LocalDataStoreSlot, 而這slot可以設定名稱或者不命名</li>
<li>由Thread的GetNamedDataSlot方法設定有名稱的slot, 而AllocateDataSlot方法取得不命名的slot</li>
<li>Thread的FreeNamedDataSlot方法會釋放有特定名稱的slot與所有thread的關聯, 但原本的slot物件仍可以存取該資料</li>
<li>以下範例是建立名稱為Name的slot和不命名的slot, 分別是存字串MyName和整數值MyNum. Main Thread和另外建立的t1 t2 thread, 對MyName與MyNum都是獨立的值. 最後在呼叫FreeNamedDataSlot之前, 從Name取slot的值仍是”Main name”, 但呼叫FreeNamedDataSlot後, 從Name取slot的值變成null.</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace TestLocalDataStoreSlot<br>{<br>    class Program<br>    {<br>        static LocalDataStoreSlot _nameSlot &#x3D; Thread.GetNamedDataSlot(“Name”);<br>        static LocalDataStoreSlot _numSlot &#x3D; Thread.AllocateDataSlot();</p>
<pre><code>    static string MyName
    &#123;
        get
        &#123;
            object data = Thread.GetData(\_nameSlot);
            return data == null ? string.Empty : (string)data;
        &#125;

        set
        &#123;
            Thread.SetData(\_nameSlot, value);
        &#125;
    &#125;

    static int MyNum
    &#123;
        get
        &#123;
            object data = Thread.GetData(\_numSlot);
            return data == null ? -1 : (int)data;
        &#125;

        set
        &#123;
            Thread.SetData(\_numSlot, value);
        &#125;
    &#125;

    static void Main(string\[\] args)
    &#123;
        Thread t1 = new Thread(() =&gt;
        &#123;
            Console.WriteLine(&quot;t1 before name: &quot; + MyName);
            MyName = &quot;T1!&quot;;
            Console.WriteLine(&quot;t1 after name: &quot; + MyName);

            Console.WriteLine(&quot;t1 before num: &quot; + MyNum);
            MyNum = 555;
            Console.WriteLine(&quot;t1 after num: &quot; + MyNum);
        &#125;);

        Thread t2 = new Thread(() =&gt;
        &#123;
            Console.WriteLine(&quot;t2 before name: &quot; + MyName);
            MyName = &quot;T2?&quot;;
            Console.WriteLine(&quot;t2 after name: &quot; + MyName);

            Console.WriteLine(&quot;t2 before num: &quot; + MyNum);
            MyNum = 777;
            Console.WriteLine(&quot;t2 after num: &quot; + MyNum);
        &#125;);

        t1.Start();
        t2.Start();

        Console.WriteLine(&quot;Main before name: &quot; + MyName);
        MyName = &quot;Main name&quot;;
        Console.WriteLine(&quot;Main after name: &quot; + MyName);



        Console.WriteLine(&quot;Main before num: &quot; + MyNum);
        MyNum = 12345678;
        Console.WriteLine(&quot;Main after num: &quot; + MyNum);

        Console.ReadLine();

        string s1 = Thread.GetData(Thread.GetNamedDataSlot(&quot;Name&quot;)) as string;
        Console.WriteLine(&quot;Main before clear: &quot; + s1);

        Thread.FreeNamedDataSlot(&quot;Name&quot;);

        string s2 = Thread.GetData(Thread.GetNamedDataSlot(&quot;Name&quot;)) as string;
        Console.WriteLine(&quot;Main after clear: &quot; + s2);

        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p>}</p>
<h3 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h3><ul>
<li>Timer可提供某些工作做週期性的執行</li>
<li>在不用Timer的寫法如下, 缺點是會綁住Thread的資源, 且DoSomeAction的任務將逐漸延遲執行</li>
</ul>
<p>new Thread (delegate() {<br>                         while (enabled)<br>                         {<br>                           DoSomeAction();<br>                           Thread.Sleep (TimeSpan.FromHours (24));<br>                         }<br>                       }).Start();</p>
<ul>
<li>Net提供4種Timer, 其中2種是一般性的multi-thread timer:</li>
</ul>
<ol>
<li>System.Threading.Timer</li>
<li>System.Timers.Timer</li>
</ol>
<ul>
<li>Single-thread timer:</li>
</ul>
<ol>
<li>System.Windows.Forms.Timer (Windows Form timer)</li>
<li>System.Windows.Threading.DispatcherTimer (WPF timer)</li>
</ol>
<ul>
<li>multi-thread timer能更精準、彈性, 而single-thread timer是安全、方便的執行簡單任務, 比如更新Wiform &#x2F; WPF 的元件</li>
</ul>
<h4 id="Multithreaded-Timers"><a href="#Multithreaded-Timers" class="headerlink" title="Multithreaded Timers"></a>Multithreaded Timers</h4><ul>
<li>System.Threading.Timer是最簡單的multi-thread timer</li>
<li>可以呼叫Change方法來改變執行的時間</li>
<li>以下範例是建立Timer, 等5秒後才開始做任務, 每個任務間隔1秒.</li>
</ul>
<p>using System;<br>using System.Threading;</p>
<p>namespace ThreadingTImer<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            Timer tmr &#x3D; new Timer(Tick, “tick…”, 5000, 1000);<br>            Console.ReadLine();<br>            tmr.Dispose();<br>        }</p>
<pre><code>    static void Tick(object data)
    &#123;
        Console.WriteLine(data);
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>另一個System.Timers的Timer, 是基於System.Threading.Timer的包裝, 主要增加的功能有:</li>
</ul>
<ol>
<li>實作Component, 可用在Visual Studio’s designer</li>
<li>不使用Change, 改成Interval property</li>
<li>不使用直接的委託, 而是Elapsedevent</li>
<li>用Enabled來啟用或停止timer</li>
<li>如果對Enabled感到疑惑, 改用Start和Stop方法</li>
<li>AutoReset代表著重複執行的事件</li>
<li>SynchronizingObject property可以呼叫Invoke和BeginInvoke方法, 可以安全呼叫WPF &#x2F; Winform的元件</li>
</ol>
<ul>
<li>以下是System.Timers.Timer的範例, 每0.5秒執行任務, 透過Start和Stop啟用和停止timer.</li>
</ul>
<p>using System;<br>using System.Timers;</p>
<p>namespace TimersTimer<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            Timer tmr &#x3D; new Timer();<br>            tmr.Interval &#x3D; 500;<br>            tmr.Elapsed +&#x3D; tmr_Elapsed;<br>            tmr.Start();<br>            Console.ReadLine();<br>            tmr.Stop();<br>            Console.ReadLine();<br>            tmr.Start();<br>            Console.ReadLine();<br>            tmr.Dispose();<br>        }</p>
<pre><code>    private static void tmr\_Elapsed(object sender, ElapsedEventArgs e)
    &#123;
        Console.WriteLine(&quot;Tick&quot;);
    &#125;
&#125;
</code></pre>
<p>}</p>
<ul>
<li>Multi-thread timer是從thread pool的少量thread來支援timer, 也代表每次執行的委託任務, 都可能由不同的thread來執行.</li>
<li>Elapsed事件幾乎是很準時的執行, 不管前一段時間的任務執行完畢與否, 因此委託給它的任務必須是thread-safe</li>
<li>Multi-thread timer的精準度是基於作業系統 誤差約10~20ms, 如果要更精準, 需要使用native interop來呼叫Windows multimedia timer, 誤差可降至1ms. 這interop定義在winmm.dll. 使用winmm.dll的一般流程:</li>
</ul>
<ol>
<li>呼叫timeBeginPeriod, 通知作業系統需要高精度的timing</li>
<li>呼叫timeSetEvent啟用timer</li>
<li>任務完成後, 呼叫timeKillEvent停止timer</li>
<li>呼叫timeEndPeriod, 通知作業系統不再需要高精度的timing</li>
</ol>
<ul>
<li>搜尋 [dllimport winmm.dll timesetevent] 能找到winmm.dll的範例</li>
</ul>
<h4 id="Single-Threaded-Timers"><a href="#Single-Threaded-Timers" class="headerlink" title="Single-Threaded Timers"></a>Single-Threaded Timers</h4><ul>
<li>Single-thread timer是用來在WPF或Winform, 如果拿到別的應用程式, 則那個timer將不會觸發</li>
<li>Winform &#x2F; WPF的timer並不是基於thread pool, 而是用User interface model的message pumping技術. 也就是Timer觸發的任務都會是同一個thread, 而那thread是一開始建立timer的thread.</li>
<li>使用single-thread timer的好處:</li>
</ul>
<ol>
<li>忘記thread-safe的問題</li>
<li>Timer執行的任務(Tick), 必須前一個任務完成才會觸發下一個</li>
<li>不需要呼叫元件的Invoke, 能直接在Tick委託任務執行更新UI元件的功能</li>
</ol>
<ul>
<li>因為single-thread的限制, 帶來的缺點是:</li>
</ul>
<ol>
<li>除非Tick任務執行地很快, 否則UI將會沒辦法反應</li>
</ol>
<ul>
<li>WPF &#x2F; Winform的timer只適合簡單的任務, 否則需要採用multi-thread timer.</li>
<li>Single-thread的timer的精準度和multi-thread timer差不多, 會有幾十ms的差異. 而會因為UI的request或其他timer的事件而造成更不準確.</li>
</ul>
<h3 id="Threading-in-C-參考資料"><a href="#Threading-in-C-參考資料" class="headerlink" title="Threading in C# 參考資料"></a>Threading in C# 參考資料</h3><ol>
<li><a href="https://amzn.to/3lQcLky">C# 9.0 in a Nutshell: The Definitive Reference, Joseph Albahari (Amazon)</a></li>
</ol>
<p><a href="https://geekcodeparadise.com/threading-in-csharp-series-book-summary/">Threading in C# 系列的讀書筆記</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Thread</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu 移除與安裝 MySQL</title>
    <url>/2015/10/06/ubuntu-install-uninstall-mysql/</url>
    <content><![CDATA[<p>ubuntu 移除與安裝 MySQL</p>
<h4 id="1-移除MySQL"><a href="#1-移除MySQL" class="headerlink" title="1.移除MySQL"></a>1.移除MySQL</h4><p>　　若在ubuntu上有安裝MySQL且想移除它，可用下面這些指令來完整的移除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge mysql-server mysql-client mysql-common</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get autoclean</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/mysql</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /etc/mysql</span><br></pre></td></tr></table></figure>

<h4 id="2-安裝MySQL"><a href="#2-安裝MySQL" class="headerlink" title="2.安裝MySQL"></a>2.安裝MySQL</h4><p>　　若要在ubuntu上安裝MySQL，可用下面這些指令安裝：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server </span><br></pre></td></tr></table></figure>

<p>　　安裝過程會要求設定root的密碼，切記密碼不要用<strong>root</strong>，因為我之前一直設定root為密碼，害我無法登入mysql。。。不知是MySQL的BUG還是啥特殊設定</p>
<p>　　安裝完成後，啟動MySQL就大功造成：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>

<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="http://www.liquidweb.com/kb/how-to-install-mysql-on-ubuntu-14-04-lts/">liquidweb : How to Install MySQL on Ubuntu 14.04 LTS</a> </li>
<li><a href="http://askubuntu.com/questions/172514/how-do-i-uninstall-mysql">ask ubuntu : How do I uninstall Mysql?</a></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10037 Bridge</title>
    <url>/2019/07/25/uva-10037-bridge/</url>
    <content><![CDATA[<p>UVa 10037 Bridge 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10037 - Bridge</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=978">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;978</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>經典謎題-過橋問題，有N個人要過橋，每次最多只能2人過橋，過橋都得依靠手電筒才能走。每個人有各自過橋速度，當2人過橋時，這一趟花費時間為速度最慢的那位。求N個人過橋所需最短時間。<br>　　範例輸入有4個人，過橋速度分別為1、2、5、10，範例輸出的總時間為17，第一趟由1和2過去 &#x3D;&gt; 1回來 &#x3D;&gt;5和10過去 &#x3D;&gt; 2回來 &#x3D;&gt; 1和2過去，時間花費為2 + 1 + 10 + 2 + 2 &#x3D; 17。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1</p>
<p>4<br>1<br>2<br>5<br>10</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>17<br>1 2<br>1<br>5 10<br>2<br>1 2</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>這題不能用簡單的Greedy Method，比如每次都用最快和最慢，以範例輸入的答案會是10 + 1 + 5 + 1 + 2 &#x3D; 19，不是最佳解17。</li>
<li>計算每最慢與次慢2人過橋的方案，可分2種方案互相比對，將最快、次快、最慢、次慢的人分成A、B、C、D<ol>
<li>由A、C過去&#x3D;&gt;A回來&#x3D;&gt;A、D過去&#x3D;&gt;A回來，總花費時間為2 * A + C + D。</li>
<li>由A、B過去&#x3D;&gt;A回來&#x3D;&gt;C、D過去&#x3D;&gt;B回來，總花費時間為2 * B + A + C。</li>
<li>由這2方案取最少時間為這次2人已過橋的解，再更新C與D為下一批最慢與次慢的人。</li>
</ol>
</li>
<li>剩下3人時，最好的方案為A、C過去&#x3D;&gt;A回來&#x3D;&gt;A、B過去，時間為C + A + B</li>
<li>剩下2人時，方案只剩A、B過去，時間為B。</li>
<li>特殊輸入為只有1個人時，直接輸出答案。</li>
</ol>
<p>　　難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10000-10099/10037.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10000-10099/10037.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10082 WERTYU</title>
    <url>/2019/07/06/uva-10082-wertyu/</url>
    <content><![CDATA[<p>UVa 10082 WERTYU 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10082 - WERTYU</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1023">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1023</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>題意為模擬鍵盤誤key，需將錯誤字串反解成正確字串，反解的方式為該字元需換成鍵盤左邊的鍵值，比如輸入F 轉成 D、輸入 ] 轉成 [ 。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>O S, GOMR YPFSU&#x2F;</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>I AM FINE TODAY.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　使用C語言的getchar讀一個字元即輸出一個字元。由於需要比對錯誤字元與正確字元的關聯，一開始先建表，使錯誤字元與正確字元的關係 &#x3D;&gt; table[i-1] &#x3D; correctKey，其中 i 是找到該錯誤字元的index。但有可能輸入不會在表中，比如空白鍵，則需要輸出原始值。<br>　　在程式碼for迴圈找尋index的中間條件式，用table[i] 非 ‘’ &amp;&amp; table[i] !&#x3D; c，如此index最後只有兩種值，第一個是找到字元的index、另一個是找不到index ( &#x3D; strlen(table) )。<br>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10000-10099/10082.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10000-10099/10082.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 101 The Blocks Problem</title>
    <url>/2019/11/09/uva-101-the-blocks-problem/</url>
    <content><![CDATA[<p>UVa 101 The Blocks Problem 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>101 - The Blocks Problem</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=37">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;37</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N個區塊，區塊的編號從0 至 N-1，接著會有4種指令：</p>
<ul>
<li>move a onto b： 把a和b上方的區塊都歸回到原本位置，再把a疊到b上方。</li>
<li>move a over b： 把a上方的區塊都歸回到原本位置， 再把a疊到b所在區塊堆的上方。</li>
<li>pile a onto b： 把b上方的區塊都歸回到原本位置， 再把a及它上面的區塊堆都疊到b上方。</li>
<li>pile a over b： 把a及上方的區塊都疊到b所在區塊堆的上方。</li>
</ul>
<p>　　如果a和b都在同一區塊堆，則該行指令無效。最後指令是quit時，顯示每個區塊堆的細節，如果該編號區塊已疊在別的區塊則那行空白。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>10<br>move 9 onto 1<br>move 8 over 1<br>move 7 over 1<br>move 6 over 1<br>pile 8 over 6<br>pile 8 over 5<br>move 2 over 1<br>move 4 over 9<br>quit</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>0: 0<br>1: 1 9 2 4<br>2:<br>3: 3<br>4:<br>5: 5 8 7 6<br>6:<br>7:<br>8:<br>9:</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>模擬4種指令的動作，可以用vector作區塊疊放的功能、用一個陣列Mapping現在每個區塊位置。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/101.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/101.cpp</a></p>
<p>UVa 101 The Blocks Problem</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10340 All in All</title>
    <url>/2019/10/02/uva-10340-all-in-all/</url>
    <content><![CDATA[<p>UVa 10340 All in All 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10340 - All in All</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1281">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1281</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2個字串s與t，求s是否為t的子序列</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>sequence subsequence<br>person compression<br>VERDI vivaVittorioEmanueleReDiItalia<br>caseDoesMatter CaseDoesMatter</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Yes<br>No<br>Yes<br>No</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>此題只求s是否全包含於t，所以只要算每個s的字元是否依序出現在t即可。特別注意是沒有給s與t的最大長度，所以空間要設置比較大。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10300-10399/10340.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10300-10399/10340.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10391 Compound Words</title>
    <url>/2020/01/16/uva-10391-compound-words/</url>
    <content><![CDATA[<p>UVa 10391 Compound Words 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10391 - Compound Words</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1332">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1332</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>會有N個字串，求這N個字串任選2個並連接成的新字串，是否出現在N個字串裡。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>a<br>alien<br>born<br>less<br>lien<br>never<br>nevertheless<br>new<br>newborn<br>the<br>zebra</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>alien<br>newborn</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ul>
<li>建1個Set，這N個字串都放在Set裡，然後歷遍Set每個字串，依據該字串的長度Len切成Len - 1種組合的2個子字串，看這些子字串是否都存在Set，如果都存在則它就是一個解。</li>
<li>比如alien，可以切成{a, lien}, {al, ien}, {ali, en}, {alie, n} 4種組合，第1個組合有符合即輸出。</li>
</ul>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10300-10399/10391.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10300-10399/10391.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10474 Where is the Marble?</title>
    <url>/2019/11/06/uva-10474-where-is-the-marble/</url>
    <content><![CDATA[<p>UVa 10474 Where is the Marble? 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10474 - Where is the Marble?</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1415">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1415</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N顆石頭和Q個查詢，每個石頭有整數編號，編號的大小沒有順序。接著Q個查詢，每個查詢是一個編號，求這查詢編號在這石頭群的出現位置，出現位置為所有編號由小到大的最小位置。找不到則顯示not found。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4 1<br>2<br>3<br>5<br>1<br>5<br>5 2<br>1<br>3<br>3<br>3<br>1<br>2<br>3<br>0 0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>CASE# 1:<br>5 found at 4<br>CASE# 2:<br>2 not found<br>3 found at 3</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>將石頭排序後再用二分搜尋法找位置。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10400-10499/10474.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10400-10499/10474.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10714 Ants</title>
    <url>/2019/08/18/uva-10714-ants/</url>
    <content><![CDATA[<p>UVa 10714 Ants 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10714 - Ants</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1655">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1655</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>在一個長度為TotalLength公分的桿子上，有N隻螞蟻在上面，每隻螞蟻有各自從桿子左邊數來的起始位置Li，螞蟻的任務是要走到桿子邊緣，若途中遇到別隻螞蟻，要走反方向回去，每隻螞蟻行走速度是1 公分&#x2F;秒。計算全部的螞蟻走到桿子邊緣的最短時間與最長時間。<br>　　範例輸入有2個測資，第一筆測資是TotalLength &#x3D; 10公分、N &#x3D; 3隻螞蟻。接著3筆輸入，3隻從桿子左邊數來的螞蟻位置Li。第一筆輸出最快是4秒，最慢是8秒。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>10 3<br>2 6 7<br>214 7<br>11 12 7 13 176 23 191</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>4 8<br>38 207</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>這題若用模擬的方式，需列舉出每種螞蟻的起始方向，再計算每隻碰撞後的折返方向，至少花費2^n的計算時間，不可能採用。</li>
<li>螞蟻的碰撞折返，可以看成兩隻互相穿越，這樣可不用計算折返方向。</li>
<li>看成穿越後，最短時間為max1≤i≤n{ min(Li, TotalLength - Li) }，最長時間為max1≤i≤n{ max(Li, TotalLength - Li) }</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10700-10799/10714.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10700-10799/10714.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10763 Foreign Exchange</title>
    <url>/2019/12/29/uva-10763-foreign-exchange/</url>
    <content><![CDATA[<p>UVa 10763 Foreign Exchange 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10763 - Foreign Exchange</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1704">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1704</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N組交換學生的列表，每1組交換學生的輸入為a b，代表某位學生在a國家想到b國家。求這N組列表是否都能達到配對，也就是任1組a到b都要有b到a的配對。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>10<br>1 2<br>2 1<br>3 4<br>4 3<br>100 200<br>200 100<br>57 2<br>2 57<br>1 2<br>2 1<br>10<br>1 2<br>3 4<br>5 6<br>7 8<br>9 10<br>11 12<br>13 14<br>15 16<br>17 18<br>19 20<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>YES<br>NO</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題一開始用Map + MultiSet方式來解，但是速度實在太慢，居然花0.52秒．．．後來看到這位<a href="//blog.kaaass.net/acm/2019/02/uva-10763-foreign-exchange/">高手解法</a>，只要將a與b分別排序，求a與b在同1個index的值是否相同即可。再加上只要N不是偶數，一定是NO，可以加速至只花0.06秒。<br>　　輸入有一種測資是  </p>
<p>3<br>1 2<br>1 2<br>2 1  </p>
<p>這代表找不到第2個2 1可以配對，所以要此測資為NO。<br>　　<br>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10700-10799/10763.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10700-10799/10763.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10815 Andy&#39;s First Dictionary</title>
    <url>/2019/11/09/uva-10815-andys-first-dictionary/</url>
    <content><![CDATA[<p>UVa 10815 Andy’s First Dictionary 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10815 - Andy’s First Dictionary</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1756">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1756</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一長串的文字，包含空白、標點符號、英文字母、數字等，求所有出現的英文單字。單字不區分大小寫，比如Apple與apple是一樣的。輸入的最後是以EOF結尾，並依照字典排序輸出單字，並都轉成小寫。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>Adventures in Disneyland  </p>
<p>Two blondes were going to Disneyland when they came to a fork in the<br>road. The sign read: “Disneyland Left.”  </p>
<p>So they went home.</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>a<br>adventures<br>blondes<br>came<br>disneyland<br>fork<br>going<br>home<br>in<br>left<br>read<br>road<br>sign<br>so<br>the<br>they<br>to<br>two<br>went<br>were<br>when</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用set可以快速建立字典，只須注意切英文單字字串的方法即可。最簡潔的切字串實作可以用sstream。 難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10800-10899/10815.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10800-10899/10815.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10916 Factstone Benchmark</title>
    <url>/2019/07/18/uva-10916-factstone-benchmark/</url>
    <content><![CDATA[<p>UVa 10916 Factstone Benchmark 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10916 - Factstone Benchmark</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=1857">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;1857</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>定義Factstone為該年代電腦等級的分數，在1960年的電腦是4Bit，其Factstone &#x3D; 3。3代表3! &#x3D; 6，是4bit unsigned能表示的數值範圍0<del>15，若是4! &#x3D; 24，超過4bit unsigned上限的15，所以1960年電腦的Factstone是3。每經過10年，電腦bit數升級為之前的2倍，到了1970年，Factstone &#x3D; 5，代表5! &#x3D; 120是8bit unsigned能表示的數值範圍0</del>255，但不能是6，因為6! &#x3D; 720，超過8bit unsigned上限的255。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1960<br>1981<br>0 </p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>3<br>8</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>用一般的int計算，即使是long long也會overflow，不採用。</li>
<li>用大數模擬運算會太慢，也不採用。</li>
<li>利用數學模型解，將這題轉為數學式，求的是n! &lt;&#x3D; 2k-1 &lt; 2k，將左右兩邊取log2，log2(n!) &#x3D; log2(n) + log2(n-1) + … + log2(1) &lt; log2(2k) &#x3D; k，其中k是那一年電腦的bit。求出n即為Factstone。</li>
</ol>
<p>這題速度上的優化可用建表與略過已知的答案。</p>
<ul>
<li>每一年的Factstone可以事先算好存到表格。</li>
<li>1960<del>1969年Factstone都一樣，先算出1960的答案後直接填入1961</del>1969，其他年份以此類推。</li>
</ul>
<p>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10900-10999/10916.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10900-10999/10916.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 10935 Throwing cards away I</title>
    <url>/2019/12/29/uva-10935-throwing-cards-away-i/</url>
    <content><![CDATA[<p>UVa 10935 Throwing cards away I 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>10935 - Throwing cards away I</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1876">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;1876</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1副牌組並輸入N，代表此排組由上而下的編號為1至N。每次抽最上層的牌並輸出此牌的編號，再將下一個最上層的牌放到牌組最下方。直到牌組剩一張為止。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>7<br>19<br>10<br>6<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Discarded cards: 1, 3, 5, 7, 4, 2<br>Remaining card: 6<br>Discarded cards: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 4, 8, 12, 16, 2, 10, 18, 14<br>Remaining card: 6<br>Discarded cards: 1, 3, 5, 7, 9, 2, 6, 10, 8<br>Remaining card: 4<br>Discarded cards: 1, 3, 5, 2, 6<br>Remaining card: 4</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題使用Queue做模擬即可。<br>　　<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10900-10999/10935.cpp">https://github.com/u898933</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10900-10999/10935.cpp">2</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/10900-10999/10935.cpp">&#x2F;ProblemSolving&#x2F;blob&#x2F;master&#x2F;UVaOnlineJudge&#x2F;10900-10999&#x2F;10935.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 12096 The SetStack Computer</title>
    <url>/2019/11/11/uva-12096-the-setstack-computer/</url>
    <content><![CDATA[<p>UVa 12096 The SetStack Computer 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>12096 - The SetStack Computer</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3248">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;3248</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>模擬一個集合的堆疊計算機。該計算機有5種指令</p>
<ul>
<li>PUSH：Push一個{}空集合到Stack</li>
<li>DUP：複製Stack的Top集合，再Push到Stack</li>
<li>ADD：將Stack Pop 2個集合，最先Pop的集合a 和第2個Pop的集合b，將集合a加入至集合b後再Push到Stack</li>
<li>UNUON：將Stack Pop 2個集合做Union後，再Push到Stack</li>
<li>INTERSECT：將Stack Pop 2個集合做Intersect後，再Push到Stack</li>
</ul>
<p>　　輸入有T筆測資，每筆測資會有N個前面5種的指令，每當一個指令完成後，要輸出目前Stack Top的集合的元素數量。當N個指令完成後，輸出***。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>9<br>PUSH<br>DUP<br>ADD<br>PUSH<br>ADD<br>DUP<br>ADD<br>DUP<br>UNION<br>5<br>PUSH<br>PUSH<br>ADD<br>PUSH<br>INTERSECT</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>0<br>0<br>1<br>0<br>1<br>1<br>2<br>2<br>2<br>***<br>0<br>0<br>1<br>0<br>0<br>***</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題使用劉汝佳的解法，需使用稍微複雜的資料結構：</p>
<ul>
<li>typedef set<int> Set ：用typedef對set<int>做個別名，用來模擬堆疊計算機的基本元素</li>
<li>vector<Set> set_stack ：將每個集合做成數字索引</li>
<li>map&lt;Set,int&gt; set_to_id：紀錄集合的存在性和id，id是set_stack數量。這map和前面set_stack是互相1 對 1。</li>
<li>vector<int>：本題計算機的堆疊，存的是集合的索引值</li>
</ul>
<p>　　以範例測資第1個輸入做講解，指令PUSH，會新增第一個空集合，編號為0，如圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/1-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/1-2.png" alt="UVa 12096 The SetStack Computer 圖1"></a></p>
<p>圖1</p>
<p>接著指令DUP，將ids的top元素複製並push，如圖2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/2-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/2-1.png" alt="UVa 12096 The SetStack Computer 圖2"></a></p>
<p>圖2</p>
<p>接著指令ADD，從ids Pop 2個元素，將都是id為0的空集合，將第2個空集合加入id為0的空集合，形成新的集合，再Push到ids，如圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/3-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/3-2.png" alt="UVa 12096 The SetStack Computer 圖3"></a></p>
<p>圖3</p>
<p>接著指令PUSH，ids上方新增一個空集合，因為已經在set_to_id建立過，所以id為0，如圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/4-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/4-2.png" alt="UVa 12096 The SetStack Computer 圖4"></a></p>
<p>圖4</p>
<p>接著指令ADD，從ids Pop 2個元素，分別是id為0與1的集合，將第2個集合Set (0) 加入id為0的空集合，但此集合已存在，所以加入後仍只有id為0的元素，再將它Push到ids，如圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/5-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/5-2.png" alt="圖5"></a></p>
<p>圖5</p>
<p>接著指令DUP，將ids的top元素複製並push，如圖6</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/6.png" alt="圖6"></a></p>
<p>圖6</p>
<p>接著指令ADD，從ids Pop 2個元素，都是id為1的集合，將第2個集合Set (0) 加入id為1的集合，形成新的集合 Set (0, 1) 並賦予id為2，再將它Push到ids，如圖7</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/7-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/7.png" alt="圖7"></a></p>
<p>圖7</p>
<p>接著指令DUP，將ids的top元素複製並push，如圖8</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/8-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/8.png" alt="圖8"></a></p>
<p>圖8</p>
<p>接著指令UNION，從ids Pop 2個元素，都是id為2的集合，做union的結果仍是Set (0, 1)，<br>再將它Push到ids，如圖9</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/9-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/9.png" alt="圖9"></a></p>
<p>圖9</p>
<p>以上9個指令已完成，而INTERSECT功能與UNION相似，可以用第2個測資模擬一遍。這題須善用STL的set_union、set_intersection與inserter。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12000-12099/12096.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12000-12099/12096.cpp</a></p>
<p>UVa 12096 The SetStack Computer</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 11809 Floating-Point Numbers</title>
    <url>/2019/10/05/uva-11809-floating-point-numbers/</url>
    <content><![CDATA[<p>UVa 11809 Floating-Point Numbers 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>11809 - Floating-Point Numbers</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2909">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;2909</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>題目很長，經過整理的意思是</p>
<p>A\times10^{B} &#x3D; (2^{-1}+2^{-2}+..+2^{-M-1})\times2^{2^{E}-1}</p>
<p>，求M與E。輸入0e0則結束程式。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>5.699141892149156e76<br>9.205357638345294e18<br>0e0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>5 8<br>8 6</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>以範例第1筆輸入 A &#x3D; 5.699141892149156，B &#x3D; 76，其對應的浮點數2進位轉10進位表示法為</p>
<p>0.111111111_{2} \times 2^{111111}&#x3D;(2^{-1}+2^{-2}+..+2^{-8-1})\times2^{2^{6}-1}</p>
<p>　　將10進位等式轉成通式，另外命名m與e。</p>
<p>(2^{-1}+2^{-2}+..+2^{-M-1})\times2^{2^{E}-1}&#x3D;(1-2^{-M-1})\times2^{2^{E}-1}&#x3D;m\times2^{e}</p>
<p>與輸入格式兩邊取log10</p>
<p>\log_{10}(A\times10^{B}) &#x3D; \log_{10}(m\times2^{e}) \\<br>\log_{10}(A) + B &#x3D; \log_{10}(m) + e\times\log_{10}(2)</p>
<p>由於0 &lt; A &lt; 10，使</p>
<p>\log_{10}(A) &lt; 1</p>
<p>，則</p>
<p>B&#x3D;\lfloor \log_{10}(m) + e\times\log_{10}(2)\rfloor \\<br>A&#x3D;10^{\log_{10}(m) + e\times\log_{10}(2)-B}</p>
<p>知道A與B的規則，且M與E的範圍不大，可以將所有M與E產生的A與B做建表。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/11800-11899/11809.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/11800-11899/11809.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 12100 Printer Queue</title>
    <url>/2020/01/19/uva-12100-printer-queue/</url>
    <content><![CDATA[<p>UVa 12100 Printer Queue 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>12100 - Printer Queue</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3252">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;3252</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>會有N個列印工作，每個工作會有優先序(Priority)，1是最小、9是最大。如果在列隊前方的工作的優先序，比其他工作優先序還小，則前方的工作要排到後方。如果列隊只剩它優先序最大，則輪到它列印。<br>　　題目有另一個輸入m，代表原始列隊裡的工作位置(0 到 N - 1)，求何時輪到第m個工作被列印。<br>　　以範例輸入第2筆測資，輸入4個列印工作、指定m &#x3D; 2(工作優先序 &#x3D; 3的那一筆)，一開始工作優先序1發現列隊有比它大的工作，則排到後方，變成2 3 4 1。接著優先序2發現有比它大的工作，則排到後方，變成3 4 1 2。接著優先序3發現有比它大的工作，則排到後方，變成4 1 2 3。接著優先序4是列隊最大的優先序，則它可列印，剩下1 2 3。重複前面的規則，優先序3的工作是第2個列印，所以輸出答案2。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>1 0<br>5<br>4 2<br>1 2 3 4<br>6 0<br>1 1 9 1 1 1</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1<br>2<br>5</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　單純的模擬題，建1個Queue，這N個工作依序放在Queue並依前述規則輸出。另外需建1個優先序陣列，紀錄優先序1~9的數量剩幾個，才能知道目前要列印的工作是不是它。<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12100-12199/12100.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12100-12199/12100.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 12108 Extraordinarily Tired Students</title>
    <url>/2019/11/01/uva-12108-extraordinarily-tired-students/</url>
    <content><![CDATA[<p>UVa 12108 Extraordinarily Tired Students 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>12108 - Extraordinarily Tired Students</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3260">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;3260</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有n個學生，每個學生有a、b、c等3個數值，a代表醒著的時間次數、b代表睡覺的時間次數，a + b 為整個週期。c代表目前該學生在哪個時間點，1 &lt;&#x3D; c &lt;&#x3D; a + b。每個學生依照他的醒著／睡覺週期來過每個時間點，求學生會在哪個最早的時間點全都醒著。其中有特殊條件，當現在的睡覺人數超過醒著人數，輪到他睡覺時才可以睡，否則他要再醒著a個時間次數。如果沒有都醒著的時間點，則回傳-1。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>2 4 1<br>1 5 2<br>1 4 3<br>3<br>1 2 1<br>1 2 2<br>1 2 3<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Case 1: 18<br>Case 2: -1</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>一般的模擬題，其中當檢查時間點已超過(a1 + b1) * (a2 + b2) * … * (an + bn)仍沒有全部人醒著，則回傳-1。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12100-12199/12108.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12100-12199/12108.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 12333 Revenge of Fibonacci</title>
    <url>/2020/06/07/uva-12333-revenge-of-fibonacci/</url>
    <content><![CDATA[<p>UVa 12333 Revenge of Fibonacci 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>12333 - Revenge of Fibonacci</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3755">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;3755</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個數字開頭，求最早出現有此開頭的Fibonacci數字的索引值，索引值從0開始。比如開頭12，最早有12開頭的是第25個Fibonacci數字:121393。</p>
<p>如果沒任何Fibonacci數字包含開頭, 則輸出-1。索引值上限小於100000、每個數字開頭最多40位數。  
　　</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>15 1 12 123 1234 12345 9 98 987 9876 98765 89 32 51075176167176176176 347746739 5610</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Case #1: 0 Case #2: 25 Case #3: 226 Case #4: 1628 Case #5: 49516 Case #6: 15 Case #7: 15 Case #8: 15 Case #9: 43764 Case #10: 49750 Case #11: 10 Case #12: 51 Case #13: -1 Case #14: 1233 Case #15: 22374</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ul>
<li>採用大數的方式，建立第0~99999個Fibonacci數字。</li>
<li>將每個大數開頭的前40個位數，用<a href="https://geekcodeparadise.com/2020/06/data-structure-trie/">Trie</a>紀錄，再用Trie查詢是否有此開頭。</li>
</ul>
<p>難度為Medium</p>
<h3 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h3><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12300-12399/12333.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12300-12399/12333.cpp</a></p>
<h3 id="UVa-12333-Revenge-of-Fibonacci"><a href="#UVa-12333-Revenge-of-Fibonacci" class="headerlink" title="UVa 12333 Revenge of Fibonacci"></a>UVa 12333 Revenge of Fibonacci</h3>]]></content>
      <categories>
        <category>Trie</category>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>Big Number</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1225 Digit Counting</title>
    <url>/2019/08/22/uva-1225-digit-counting/</url>
    <content><![CDATA[<p>UVa 1225 Digit Counting 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1225 - Digit Counting</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=3666">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;3666</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個數字N，計算出從1 、 2、….、N每一位數的出現數量。以範例N &#x3D; 13，其包含1、2、3、4、….、11、12、13，而數字1出現6次、數字2與3出現3次，其他數字出現1次。輸出為0 至 9的數量。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>3<br>13</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>0 1 1 1 0 0 0 0 0 0<br>1 6 2 2 1 1 1 1 1 1</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　N的範圍不大，可以一開始先建表，求出1~9999的各個位數的數量。求位數只用 % 與 &#x2F; 即可。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1200-1299/1225.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1200-1299/1225.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 12504 Updating a Dictionary</title>
    <url>/2020/03/20/uva-12504-updating-a-dictionary/</url>
    <content><![CDATA[<p>UVa 12504 Updating a Dictionary 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>12504 - Updating a Dictionary</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=3948">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;3948</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N組Key-Value的字典集合，每一組包含2個字典，求第1個變成第2個的差異性。差異性包含</p>
<ol>
<li>新增Key，輸出前面加上 + 號，後續接著key值，多筆用, 逗點隔開</li>
<li>移除Key，輸出前面加上 - 號，後續接著key值，多筆用, 逗點隔開</li>
<li>同一個Key的Value有更新，輸出前面加上 * 號，後續接著key值，多筆用, 逗點隔開</li>
<li>無任何變化</li>
</ol>
<p>如果有出現前面3種差異性，則依新增、移除、有更新的順序輸出細節，後面的key值一字典排序；若沒任一前3種差異性，則輸出No changes。　<br>以範例測資第1筆，多了d和ee的key、少了b和f的key、c的值從10變成5。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>{a:3,b:4,c:10,f:6}<br>{a:3,c:5,d:10,ee:4}<br>{x:1,xyz:123456789123456789123456789}<br>{xyz:123456789123456789123456789,x:1}<br>{first:1,second:2,third:3}<br>{third:3,second:2}</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>+d,ee<br>-b,f<br>*c  </p>
<p>No changes  </p>
<p>-first</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>需要用2種資料結構，分別存字典前與後的內容：</p>
<ol>
<li>set<string> keys_1&#x2F;keys_2: 只存key</li>
<li>map&lt;string, string&gt; maps_1&#x2F;maps_2：存Kev-Value</li>
</ol>
<p>用STL內建的set_difference判斷是否有新增、移除Key，而set_intersection判斷未變化的Key，若有未變化的Key再比對Value是否有變化。<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12000-12099/12054.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/12000-12099/12054.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 133 The Dole Queue</title>
    <url>/2019/10/11/uva-133-the-dole-queue/</url>
    <content><![CDATA[<p>UVa 133 The Dole Queue 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>133 - The Dole Queue</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=69">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;69</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1個編號從1到N的循環Queue，分別有2個人A與B，A從1往逆時鐘走k步、B從N往順時針走m步。每次走到一個位置後，那位置不再被拜訪。求每次A與B的拜訪位置。<br>題目特別說明範例輸出 ␣ 符號是代表空白。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>10 4 3<br>0 0 0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>␣␣4␣␣8,␣␣9␣␣5,␣␣3␣␣1,␣␣2␣␣6,␣10,␣␣7</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>模擬走路的過程，可以用1個陣列記住每次拜訪的位置有哪些。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/133.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/133.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1339 Ancient Cipher</title>
    <url>/2019/10/06/uva-1339-ancient-cipher/</url>
    <content><![CDATA[<p>UVa 1339 Ancient Cipher 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1339 - Ancient Cipher</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4085">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4085</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2個字串，求第1個字串是否能編碼成第2個字串。編碼規則為第1個字串的每個字元能1對1映射第2個字串的每個字元。以範例輸入第1筆測資JWPUDJSTVP，它的<br>J &#x3D;&gt; I、W &#x3D;&gt; V、P&#x3D;&gt;O….、T&#x3D;&gt;S，所以是YES。而第2筆測資MAMA只有2個不同字元，目標ROME有4個不同字元，無法完整1對1映射，所以是NO。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>JWPUDJSTVP<br>VICTORIOUS<br>MAMA<br>ROME<br>HAHA<br>HEHE<br>AAA<br>AAA<br>NEERCISTHEBEST<br>SECRETMESSAGES</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>YES<br>NO<br>YES<br>YES<br>NO</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>不用管字元先後順序，而是將2個字串的26個英文字母字元出現數量各自加總後排序。排序後2個字元數量由小到大比對，有不同數量代表無法編碼，反之可以。<br>　　比如測資第3筆的HAHA和HEHE，他們字元數量排序都是{0,0,…..,0,2,2}，所以是可以編碼的。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1300-1399/1339.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1300-1399/1339.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 136 Ugly Numbers</title>
    <url>/2019/11/17/uva-136-ugly-numbers/</url>
    <content><![CDATA[<p>UVa 136 Ugly Numbers 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>136 - Ugly Numbers</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=72">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;72</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>若1個數字，它只能被2、3、5整除的話，則它是Ugly Number，求第1500個Ugly Number</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>沒有輸入</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>The 1500’th ugly number is 答案.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>需使用Priority Queue和Set ：</p>
<p>LL &#x3D; long long;</p>
<ul>
<li>priority_queue&lt;LL, vector<LL>, greater<LL> &gt; pq：用來存目前所有的Ugly Number，Top代表當前最小Ugly Number</li>
<li>set<LL> s：紀錄已經被計算過的Ugly Number，若已被算過，則不加入pq。</li>
</ul>
<p>　 一開始在pq、s先填入1值，接著從pq不斷取top、pop算到1500次的top為題目的解。</p>
<ol>
<li>第1次pq的top且pop的是1，1 * 2 &#x3D; 2、1 * 3 &#x3D; 3、 1 * 5 &#x3D; 5 , 2 、3 、5都不在s裡，所以都push到pq。</li>
<li>第2次pq的top且pop的是2，2 * 2 &#x3D; 4、2 * 3 &#x3D; 6、 2 * 5 &#x3D; 10，4、6、10都不在s裡，所以都push到pq。</li>
<li>第3次pq的top且pop的是3，3 * 2 &#x3D; 6、3 * 3 &#x3D; 9、 3 * 5 &#x3D; 15，6已在s裡面，而9、15都不在s裡，所以只push 9、15到pq。</li>
<li>第4次pq的top且pop的是4，4 * 2 &#x3D; 8、4 * 3 &#x3D; 12、 4 * 5 &#x3D; 20，8、12、20都不在s裡，所以都push到pq。</li>
<li>第5次pq的top且pop的是5，5 * 2 &#x3D; 10、5 * 3 &#x3D; 15、 5 * 5 &#x3D; 25，10、15已在s裡面，而25不在s裡，所以只push 25到pq。</li>
<li>經過前述的邏輯，到第1500次pq的top且pop的是859963392</li>
</ol>
<p>Priority Queue的Push與Pop都是O(logN)的時間複雜度，所以整體需O(NlogN)。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/136.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/136.cpp</a></p>
<p>UVa 136 Ugly Numbers</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1368 DNA Consensus String</title>
    <url>/2019/09/12/uva-1368-dna-consensus-string/</url>
    <content><![CDATA[<p>UVa 1368 DNA Consensus String 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1368 - DNA Consensus String</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=4114">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;4114</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給m個只有包含T、C、G、A字母的DNA序列，長度皆為n，找出一個DNA序列是它們的 consensus string。 consensus string的定義為Hamming distance是最小的。如果有多個consensus string，回傳字典排序最小的。<br>Hamming Distance的計算，比如第1筆測資，</p>
<ul>
<li>字母A跟5筆DNA序列的第1個字母的Hamming Distance之和等於 1 + 1 + 0 + 1 + 1 &#x3D; 4</li>
<li>字母C跟5筆DNA序列的第1個字母的Hamming Distance之和等於 1 + 1 + 1 + 1 + 1 &#x3D; 5</li>
<li>字母G跟5筆DNA序列的第1個字母的Hamming Distance之和等於 1 + 1 + 1 + 1 + 1 &#x3D; 5</li>
<li>字母T跟5筆DNA序列的第1個字母的Hamming Distance之和等於 0 + 0 + 1 + 0 + 0 &#x3D; 1</li>
</ul>
<p>　　所以第1筆測資的答案的第1個字母會是T，再看第2個字母</p>
<ul>
<li>字母A跟5筆DNA序列的第2個字母的Hamming Distance之和等於 0 + 0+ 0 + 1 + 0 &#x3D; 1</li>
<li>字母C跟5筆DNA序列的第2個字母的Hamming Distance之和等於 1 + 1 + 1 + 1 + 1 &#x3D; 5</li>
<li>字母G跟5筆DNA序列的第2個字母的Hamming Distance之和等於 1 + 1 + 1 + 0 + 1 &#x3D; 4</li>
<li>字母T跟5筆DNA序列的第2個字母的Hamming Distance之和等於 1 + 1 + 1 + 1 + 1 &#x3D; 5</li>
</ul>
<p>所以第1筆測資的答案的第2個字母會是A。其他以此類推。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>5 8<br>TATGATAC<br>TAAGCTAC<br>AAAGATCC<br>TGAGATAC<br>TAAGATGT<br>4 10<br>ACGTACGTAC<br>CCGTACGTAG<br>GCGTACGTAT<br>TCGTACGTAA<br>6 10<br>ATGTTACCAT<br>AAGTTACGAT<br>AACAAAGCAA<br>AAGTTACCTT<br>AAGTTACCAA<br>TACTTACCAA</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>TAAGATAC<br>7<br>ACGTACGTAA<br>6<br>AAGTTACCAA<br>12</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>計算所有A、C、G、T與各DNA序列的每個字元最小的Hamming Distance和，可以先從T&#x3D; &gt; G &#x3D;&gt; C &#x3D;&gt; A判斷，最終可以求出字典最小的consensus string。時間複雜度為O(n * m)。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1300-1399/1368.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1300-1399/1368.c</a></p>
<p>UVa 1368 DNA Consensus String</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 156 Ananagrams</title>
    <url>/2019/11/10/uva-156-ananagrams/</url>
    <content><![CDATA[<p>UVa 156 Ananagrams 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>156 - Ananagrams</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=92">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;92</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一長串的文字，只包含英文字母的單字，將所有單字做字典排序。排序的元素要排除Anagram，Anagram是指如果一個單字的字母可任意排列成另一個單字且不區分大小寫，則這單字是Anagram，以範例輸入的ScAlE和LaCeS是Anagram。<br>　　當單字出現為#時，輸出沒出現Anagram的單字，並以字典排序。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>ladder came tape soon leader acme RIDE lone Dreis peat<br>ScAlE orb eye Rides dealer NotE derail LaCeS drIed<br>noel dire Disk mace Rob dries<br>#</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Disk<br>NotE<br>derail<br>drIed<br>eye<br>ladder<br>soon</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用set紀錄是答案的單字、map紀錄轉成小寫且排序的單字、一般陣列紀錄索引與原始單字，當單字輸入時，轉小寫且排序用map檢查有無重複，有重複則在set移除此單字，否則加入此單字。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/156.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/100-199/156.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1583 Digit Generator</title>
    <url>/2019/07/13/uva-1583-digit-generator/</url>
    <content><![CDATA[<p>UVa 1583 Digit Generator 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1583 - Digit Generator</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4458">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4458</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個數字A，找出能生成A的最小數字B。生成的方法為B + (B的每一位數和) &#x3D; A，比如範例輸入216，能生成216的答案有</p>
<ul>
<li>207 &#x3D;&gt; 207 + (7 + 0 + 2) &#x3D; 216</li>
<li>198 &#x3D;&gt; 198 + (1 + 9 + 8) &#x3D; 216</li>
</ul>
<p>但要求最小的答案，所以是198</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>216<br>121<br>2005</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>198<br>0<br>1979</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　如果用邊輸入邊解答的方式，可能會TLE，所以先建表算出1到100,000的答案。建表要從100,000往下算，才能算出最小值的答案。<br>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1583.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1583.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1584 Circular Sequence</title>
    <url>/2019/07/16/uva-1584-circular-sequence/</url>
    <content><![CDATA[<p>UVa 1584 Circular Sequence 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1584 - Circular Sequence</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=4459">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;4459</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入一個字串，輸出此字串最小字典排序的循環字串。循環字串的規則為頭尾相接，在任何位置由左至右都是同一字串。比如範例輸入的CTCC，其有CTCC、CCTC、CCCT、TCCC 4種循環，其中CCCT為最小的字典排序，即為答案。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>CGAGTCAGCT<br>CTCC</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>AGCTCGAGTC<br>CCCT</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　輸入長度為N的字串，第一直覺的作法是用列舉N種的循環字串，然後排序出最小的字串。但如果要省空間並省點時間的做法，可採用同一個字串變數、一個記住目前最小的起始Index以及用餘數比對字串。<br>　　比如字串變數s為CBA，長度len為3，一開始minIndex &#x3D; 0，</p>
<p>　　第一次循環的字元比對(targetIndex &#x3D; 1)：</p>
<ol>
<li>s[(minIndex + 0) % len] &#x3D; ‘C’ &gt; s[(targetIndex + 0) % len] &#x3D; ‘B’</li>
</ol>
<p>　　發現B比C還小，將minIndex換成targetIndex &#x3D; 1</p>
<p>　　第二次循環的字元比對(targetIndex &#x3D; 2)：</p>
<ol>
<li>s[(minIndex + 0) % len] &#x3D; ‘B’ &gt; s[(targetIndex + 0) % len] &#x3D; ‘A’</li>
</ol>
<p>　　發現A比B還小，將minIndex換成targetIndex &#x3D; 2 　　最後循環結束，minIndex是2，因此可以用餘數與字串長度輸出結果A &#x3D;&gt; C &#x3D;&gt; B。</p>
<p>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1584.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1584.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1585 Score</title>
    <url>/2019/08/21/uva-1585-score/</url>
    <content><![CDATA[<p>UVa 1585 Score 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1585 - Score</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=4460">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;4460</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一段字串，只有包含O與X，計算這字串的分數。分數計算的規則為，當有子字串出現O時，依連續出現的次數而遞增分數。<br>　　比如第1筆範例測資OOXXOXXOOO，第一個出現O的子字串長度為2，分數為1 + 2 &#x3D; 3；第二個出現O的子字串長度為1，分數為1；第三個出現O的子字串長度為3，分數為1 + 2 + 3 &#x3D; 6。所以第1筆測資的輸出為 3 + 1 + 6 &#x3D; 10。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>5 OOXXOXXOOO OOXXOOXXOO OXOXOXOXOXOXOX OOOOOOOOOO OOOOXOOOOXOOOOX</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>10<br>9<br>7<br>55<br>30</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　一一檢查每個字元判斷O與X，再分別對新的分數做累加或歸零。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1585.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1585.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1586 Molar mass</title>
    <url>/2019/08/21/uva-1586-molar-mass/</url>
    <content><![CDATA[<p>UVa 1586 Molar mass 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1586 - Molar mass</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=4461">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;4461</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一段化學式字串，包含元素名與在它後面的數量，計算這化學式的質量。題目只會出現C、N、O、H 4種元素，並提供它們的g&#x2F;mol。<br>　　比如第1筆範例測資C，其質量為12.010；第2筆測資C 6個、H 6個、O 1個，分數12.01 * 6 + 1.008 * 6 + 16.00 * 1 &#x3D; 94.108</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>C<br>C6H5OH<br>NH2CH2COOH<br>C12H22O11</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>12.010<br>94.108<br>75.070<br>342.296</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　一開始一定是元素，接著判斷元素下一字元是否數字，若是數字則取數字子字串再算質量；否則只有自己1個元素。可以用C++11實作切子字串和轉數字。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1586.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1586.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1587 Box</title>
    <url>/2019/10/05/uva-1587-box/</url>
    <content><![CDATA[<p>UVa 1587 Box 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1587 - Box</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4462">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4462</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給6個長方形的2個邊長，求這6個長方形是否能組成長方體。若可組成長方體，輸出POSSIBLE，否則輸出IMPOSSIBLE。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1345 2584<br>2584 683<br>2584 1345<br>683 1345<br>683 1345<br>2584 683<br>1234 4567<br>1234 4567<br>4567 4321<br>4322 4567<br>4321 1234<br>4321 1234</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>POSSIBLE<br>IMPOSSIBLE</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>輸入的長方形邊長先轉成寬(width)與高(height)，寬度大於&#x2F;等於高度。將這6個長方形做排序，規則為長方形的寬度由大至小，若寬度一樣，再依高度由大到小。<br>　　若是一個正確的長方體，會有3的面a, b, c。以下用圖1解釋範例輸入第1筆測資的解法，上方那排是排序後的長方形，依序是2個a、2個b與2個c。檢查a與a、b與b、c與c之間的寬與高是否相同。也要檢查a、b、c之間的寬高對應是否符合長方體。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/1-1.png"></a></p>
<p>圖1</p>
<p>再看錯誤的輸入如圖2，a與a、b與b、c與c之間的寬與高雖然相同，但a、b、c之間的寬高組成規則不符，所以無法是長方體。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/2-1.png"></a></p>
<p>圖2</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1587.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1587.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1588 Kickdown</title>
    <url>/2019/10/05/uva-1588-kickdown/</url>
    <content><![CDATA[<p>UVa 1588 Kickdown 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1588 - Kickdown</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4463">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4463</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2個長條的鋸齒，求這2個咬合最短長度。鋸齒的形狀分別用2與1表示，2代表突出的節、1代表短的結，以官方說明為例，第1筆輸入測資對照如圖1。而第1筆測資輸出為10，如圖2，上方的鋸齒能咬合在下方的鋸齒內，長度是下方鋸齒長。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/25E525AE259825E6259625B9-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/25E525AE259825E6259625B9.png" alt="UVa 1588 Kickdown 圖1"></a></p>
<p>圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/25E525AE259825E6259625B92-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/25E525AE259825E6259625B92.png" alt="UVa 1588 Kickdown 圖2"></a></p>
<p>圖2</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2112112112<br>2212112<br>12121212<br>21212121<br>2211221122<br>21212</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>10<br>8<br>15</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>將2個鋸齒分別從上方鋸齒往右移與下方鋸齒往右移，若符合咬合的規則，則判斷是否要更新最小長度。咬合規則為2&lt;&#x3D;&gt;1、1&lt;&#x3D;&gt;2、1&lt;&#x3D;&gt;1。<br>　　比如有2個鋸齒分別是211與212，先從211往右移動，如圖3. 目前最小長度為4。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/3-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/3-1.png" alt="UVa 1588 Kickdown 圖3"></a></p>
<p>圖3</p>
<p>再由212往右移動，如圖4，有長度4 與 5。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/4.png" alt="圖4"></a></p>
<p>圖4</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1588.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1588.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1589 Xiangqi</title>
    <url>/2019/10/15/uva-1589-xiangqi/</url>
    <content><![CDATA[<p>UVa 1589 Xiangqi 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1589 - Xiangqi</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4464">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4464</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予象棋的目前局勢，且輪到黑方移動，求黑方的將軍是否會被checkmate。輸入的第1行有N、r、 c，分別代表紅方棋子數量、黑方將軍列、黑方將軍行，之後N行的輸入格式為X r2 c2，分別是紅方旗子名稱、紅方棋子列、紅方棋子行。<br>　　紅方棋子只有將軍、車、馬、砲，4種棋子走法都不同：</p>
<ul>
<li>將軍：移動時不可超過那2 * 2的小正方形區域，但可以直接飛到對方的將軍，中間不可以有其他棋子</li>
<li>車：能垂直、水平同一方向攻打敵方，但中間不可有其他棋子</li>
<li>馬：如題目的圖片所示，有8種走法，中間不可有棋子</li>
<li>砲：能垂直、水平同一方向攻打敵方，但中間必須跨過一個棋子</li>
</ul>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2 1 4<br>G 10 5<br>R 6 4  </p>
<p>3 1 5<br>H 4 5<br>G 10 5<br>C 7 5  </p>
<p>0 0 0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>YES<br>NO</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立10 * 9的棋子地圖，再依照那4種棋子走法模擬黑方將軍是否會被checkmate。這題要考慮的很細，有些注意要點：</p>
<ul>
<li>黑方將軍可以先確認是否打敗紅方將軍，若可以打敗紅方，將輸出NO</li>
<li>黑方將軍往4個方向移動，都可以直接吃掉紅方敵人</li>
<li>將軍、車、砲的走法相似，可以寫一個計算中間有多少棋子的共同函式</li>
</ul>
<p>考慮的點很多，難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1589.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1589.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1590 IP Networks</title>
    <url>/2019/10/19/uva-1590-ip-networks/</url>
    <content><![CDATA[<p>UVa 1590 IP Networks 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1590 - IP Networks</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4465">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4465</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予N個IP，求一個子網段能包含它們的最小IP和遮罩Mask</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>194.85.160.177<br>194.85.160.183<br>194.85.160.178</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>194.85.160.176<br>255.255.255.248</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>每個IP能表示成32-Bit，將同一位元位置做不同值的判斷，再由第32個位元往前數哪位置有變化，則可以設最小網路和遮罩。</p>
<p>以範例輸入為例，它們的32位元表示為</p>
<p>11000010.01010101.10100000.10110001</p>
<p>11000010.01010101.10100000.10110111</p>
<p>11000010.01010101.10100000.10110010</p>
<p>有變化的位元位置為右邊數來第3個，所以最小網路是</p>
<p>11000010.01010101.10100000.10110000 &#x3D; 194.85.160.176</p>
<p>遮罩是</p>
<p>11111111.11111111.11111111.11111000 &#x3D; 255.255.255.248</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1590.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1590.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1591 Data Mining</title>
    <url>/2019/11/03/uva-1591-data-mining/</url>
    <content><![CDATA[<p>UVa 1591 Data Mining 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1591 - Data Mining</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4466">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4466</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>題目有點長，給予陣列元素數量N、P陣列每個元素所需位元組Sp、Q陣列每個元素所需位元組Sq，求一個Q陣列所需最小位元組的大小K，其中K &gt;&#x3D; N * Sq，需使用題目寫的</p>
<p>Qofs’(i) &#x3D; (Pofs(i) + Pofs(i) &lt;&lt; A) &gt;&gt; B</p>
<p>公式，也要求出最小K的A與B，若有重複的解，A要最小、A同樣再找B最小。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>20 3 5<br>1024 7 1</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>119 0 0<br>1119 2 5</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>求K的值為Sq + Qofs(N - 1)。一開始不知道A與B的上限，先用log2(Sp * 2)和log2(Sq*2)當A與B的上限，但都會TLE……看了這篇<a href="https://wcr1996.com/2015/02/15/uva-1591-data-mining/">解法</a>，只要A和B只要窮舉0 ~ 31的範圍….<br>　　再依照題意K的大小限制與套那公式求出解</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1591.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1591.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1592 Database</title>
    <url>/2019/11/21/uva-1592-database/</url>
    <content><![CDATA[<p>UVa 1592 Database 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1592 - Database</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4467">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4467</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有n列資料，每列資料有m個欄位的值。m個欄位值用逗點 , 分隔組成1列資料。求這n列資料是否為PNF，PNF的定義沒有出現2個不同列r1 與 r2在2個不同欄位c1與c2，同欄位有相同的值，也就是table[r1][c1] &#x3D; table[r2][c1] 且 table[r1][c2] &#x3D; table[r2][c2]。<br>　　如果是PNF，輸出YES；如果非PNF，則輸出NO，並輸出r1、r2、c1、c2。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3 3<br>How to compete in ACM ICPC,Peter,<a href="mailto:&#x70;&#x65;&#x74;&#101;&#x72;&#64;&#110;&#101;&#x65;&#x72;&#99;&#46;&#x69;&#102;&#x6d;&#x6f;&#46;&#114;&#x75;">&#x70;&#x65;&#x74;&#101;&#x72;&#64;&#110;&#101;&#x65;&#x72;&#99;&#46;&#x69;&#102;&#x6d;&#x6f;&#46;&#114;&#x75;</a><br>How to win ACM ICPC,Michael,<a href="mailto:&#x6d;&#105;&#x63;&#x68;&#x61;&#x65;&#x6c;&#64;&#110;&#x65;&#x65;&#114;&#x63;&#x2e;&#105;&#102;&#x6d;&#x6f;&#x2e;&#x72;&#x75;">&#x6d;&#105;&#x63;&#x68;&#x61;&#x65;&#x6c;&#64;&#110;&#x65;&#x65;&#114;&#x63;&#x2e;&#105;&#102;&#x6d;&#x6f;&#x2e;&#x72;&#x75;</a><br>Notes from ACM ICPC champion,Michael,<a href="mailto:&#x6d;&#105;&#99;&#104;&#x61;&#x65;&#x6c;&#64;&#110;&#x65;&#101;&#114;&#x63;&#46;&#105;&#x66;&#x6d;&#x6f;&#x2e;&#x72;&#x75;">&#x6d;&#105;&#99;&#104;&#x61;&#x65;&#x6c;&#64;&#110;&#x65;&#101;&#114;&#x63;&#46;&#105;&#x66;&#x6d;&#x6f;&#x2e;&#x72;&#x75;</a><br>2 3<br>1,Peter,<a href="mailto:&#x70;&#101;&#116;&#x65;&#114;&#64;&#110;&#x65;&#x65;&#x72;&#99;&#x2e;&#105;&#102;&#109;&#111;&#x2e;&#114;&#x75;">&#x70;&#101;&#116;&#x65;&#114;&#64;&#110;&#x65;&#x65;&#x72;&#99;&#x2e;&#105;&#102;&#109;&#111;&#x2e;&#114;&#x75;</a><br>2,Michael,<a href="mailto:&#x6d;&#105;&#99;&#x68;&#x61;&#101;&#x6c;&#64;&#110;&#x65;&#x65;&#x72;&#99;&#46;&#x69;&#x66;&#x6d;&#x6f;&#46;&#x72;&#117;">&#x6d;&#105;&#99;&#x68;&#x61;&#101;&#x6c;&#64;&#110;&#x65;&#x65;&#x72;&#99;&#46;&#x69;&#x66;&#x6d;&#x6f;&#46;&#x72;&#117;</a></p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>NO<br>2 3<br>2 3<br>YES</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>每1列每1欄位的值可存在2維的Table，並用Map紀錄第j欄的字串出現在哪幾列。當第i筆的字串有出現在Map時，需要檢查同列且其他欄位的字串，是否他們的Map對應的列數有交集，交集可以用STL的set_intersection。<br>　　這題有個速度優化技巧，比如m如果只有1，一定是PNF，因為它定義c1 !&#x3D; c2。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1592.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1592.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1593 Alignment of Code</title>
    <url>/2019/12/22/uva-1593-alignment-of-code/</url>
    <content><![CDATA[<p>UVa 1593 Alignment of Code 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1593 - Alignment of Code</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4468">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4468</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N列的程式碼字串，每列程式碼包含空格和其他符號組合的單字，求重新排列的程式碼字串。排列的規則為，取第K行最長單字的長度Lk，同K行的單字都要靠左並補上空白，使第K行的長度都為Lk。每行單字中間用1個空格分隔，每列的最後一個單字不必補空白，直接跳行。<br>　　以範例輸入為例，第1行的單字包含start:、stop:、s:與c:，最長單字start:的長度為6，排列後的結果如範例輸出。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>start: integer; &#x2F;&#x2F; begins here<br>stop: integer; &#x2F;&#x2F; ends here<br> s: string;<br>c: char; &#x2F;&#x2F; temp</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>start: integer; &#x2F;&#x2F; begins here<br>stop: integer; &#x2F;&#x2F; ends here<br>s: string;<br>c: char; &#x2F;&#x2F; temp</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用C++的stringstream做每列單字的切割，計算每一行的最長單字的長度，最後用iomanip函式庫的left與setw靠左輸出。<br>　　<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1593.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1593.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1594 Ducci Sequence</title>
    <url>/2019/12/22/uva-1594-ducci-sequence/</url>
    <content><![CDATA[<p>UVa 1594 Ducci Sequence 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1594 - Ducci Sequence</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4469">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4469</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1組數字序列，包含N個數字，這1組序列不斷計算成新的序列，求這序列是否會重複出現或者全都是0。若有重複出現輸出LOOP、全都是0輸出ZERO。<br>計算新序列的規則：<br>假設原本序列為</p>
<p>[a1,a1, …., an] ，</p>
<p>新的序列為</p>
<p> [a1-an, a1-a2, …., an-1-an] 題目保證重複出現或全都是0的計算步驟不超過1000次。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>4<br>8 11 2 7<br>5<br>4 2 0 2 0<br>7<br>0 0 0 0 0 0 0<br>6<br>1 2 3 1 2 3</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>ZERO<br>LOOP<br>ZERO<br>LOOP</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題有些解法：</p>
<ol>
<li>暴力法：由於題目保證每個序列計算步驟不超過1000次，當迴圈超過1000次仍沒有全是0的狀況，則輸出LOOP，否則會是ZERO。</li>
<li>Hash：紀錄每次計算出的新序列，是否出現在Hash，有的話則是LOOP。</li>
<li>Floyd’s 檢測Cycle：可以把重複出現的檢測方法轉換成Floyd’s的檢測Cycle演算法，速度可以比前兩者還要快，可以參考Linked List版的設計　<a href="https://geekcodeparadise.com/2019/08/leetcode-141-linked-list-cycle/">[解題] LeetCode - 141 Linked List Cycle</a></li>
</ol>
<p>　　<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1594.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1594.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1595 Symmetry</title>
    <url>/2020/01/05/uva-1595-symmetry/</url>
    <content><![CDATA[<p>UVa 1595 Symmetry 解題報告</p>
<h3 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h3><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1595 - Symmetry</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=4470">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;4470</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N個2維的座標，座標包含X與Y值，求是否能找到一條垂直線，它能劃分左半邊與右半邊，使左半邊的座標對稱於右半邊的座標。有這一條垂直線輸出YES，否則NO。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>5<br>-2 5<br>0 0<br>6 5<br>4 0<br>2 3<br>4<br>2 3<br>0 4<br>4 0<br>0 0<br>4<br>5 14<br>6 10<br>5 10<br>6 14</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>YES<br>NO<br>YES</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ul>
<li>一開始的解法是對座標做2種排序，分別從X從小到大與X從大到小，再依X最右邊與最左邊的2個座標取X的平均值，一個一個比對。但是執行速度不快，需0.02秒。</li>
<li>參考高手暴力法．．．<a href="https://blog.csdn.net/acvay/article/details/43015507">https://blog.csdn.net/acvay/article/details/43015507</a>，只要一個一個比對就好，連排序都不用，速度是0.00秒….</li>
<li>由於要取X的平均值，要先將X都乘以2，平均才不會有奇數的問題。</li>
</ul>
<p>　　輸入有一種測資是  </p>
<p>1<br>3<br>1 1<br>1 1<br>0 1  </p>
<p>這代表會有多個點是同1個座標，所以要此測資為YES。<br>　　<br>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1595.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1595.cpp</a></p>
<h3 id="UVa-595-Symmetry"><a href="#UVa-595-Symmetry" class="headerlink" title="UVa 595 Symmetry"></a>UVa 595 Symmetry</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1596 Bug Hunt</title>
    <url>/2020/03/17/uva-1596-bug-hunt/</url>
    <content><![CDATA[<p>UVa 1596 Bug Hunt 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1596 - Bug Hunt</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=4471">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;4471</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>檢查一段程式碼是否有BUG，程式碼只包含陣列的賦值和宣告。陣列宣告是該變數名稱與它的size，且size只會是純數字；但賦值的狀況不同，等於的右方會以純數字或者一個（或多個）陣列變數，等於的左方會以一個（或多個）陣列變數。<br>　　求程式碼執行過程第一次會出錯的行數，比如超出索引值、變數尚未被賦值的那一行；假如都沒問題，則輸出0。  
　　</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>a[3]<br>a[0]&#x3D;a[1]<br>.<br>x[1]<br>x[0]&#x3D;x[0]<br>.<br>a[0]<br>a[0]&#x3D;1<br>.<br>b[2]<br>b[0]&#x3D;2<br>b[1]&#x3D;b[b[0]]<br>b[0]&#x3D;b[1]<br>.<br>g[2]<br>G[10]<br>g[0]&#x3D;0<br>g[1]&#x3D;G[0]<br>.<br>a[2147483647]<br>a[0]&#x3D;1<br>B[2]<br>B[a[0]]&#x3D;2<br>a[B[a[0]]]&#x3D;3<br>a[2147483646]&#x3D;a[2]<br>.<br>.</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>2<br>2<br>2<br>3<br>4<br>0</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　模擬題，主要由2個資料結構：</p>
<ol>
<li>map&lt;string, int&gt; variable_def : 陣列變數名稱與它的size</li>
<li>map&lt;MyVar, int&gt; variable_val : 陣列變數與索引對應的值, 而他的型別是struct</li>
</ol>
<p>struct MyVar {<br>string name;<br>int index;  </p>
<p>bool operator&lt; (const MyVar &amp;x) const {<br>return name &lt; x.name name &#x3D;&#x3D; x.name &amp;&amp; index &lt; x.index;<br>}<br>};  </p>
<p>使用operator&lt; 作為map的key compare</p>
<ul>
<li>當沒有 &#x3D; 符號，代表是宣告，將[]的數值與前面名字存到variable_def。</li>
<li>當有&#x3D;符號，代表是賦值，分左方與右方的檢查：左方只需判斷變數是否有被定義和超出索引，而右方需判斷是否為純數字或變數。</li>
<li>變數用遞迴往[]的裡面找，直到最後無[]，並回傳內部的變數與索引值是否正確。</li>
<li>最後左方與右方都正確，再存進variable_val裡。</li>
</ul>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1596.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1596.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1597 Searching the Web</title>
    <url>/2020/03/18/uva-1597-searching-the-web/</url>
    <content><![CDATA[<p>UVa 1597 Searching the Web 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1597 - Searching the Web</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=448&page=show_problem&problem=4472">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;448&amp;page&#x3D;show_problem&amp;problem&#x3D;4472</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給N篇文章，之後會有M個查詢，求每筆查詢的結果。每一篇文章會有多行的單字，也包含數字和其他符號。<br>　　查詢有4種類型：</p>
<ol>
<li>單字 ：文章有出現該單字的那一行</li>
<li>單字1 AND 單字2 ：文章裡包含單字1 且 包含單字2，則輸出有這2個單字的字行</li>
<li>單字1 OR 單字2：文章裡包含單字1 或 包含單字2，則輸出有這2個單字的字行</li>
<li>NOT 單字　：文章若不包含此單字，則輸出整篇文章</li>
</ol>
<p>　　查詢的單字都是小寫，而文章裡可能出現大寫，則查詢要能比對那些大寫，比如查詢computer，文章的Computer視為同等。<br>如果該查詢無任何結果，則輸出Sorry, I found nothing.<br>　　一個查詢內的結果若有多筆文章，每筆文章之間用———隔開。<br>　　每次查詢完都加上&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>　　全部文章的行數不超過1500行 。  
　　</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>A manufacturer, importer, or seller of<br>digital media devices may not (1) sell,<br>or offer for sale, in interstate commerce,<br>or (2) cause to be transported in, or in a<br>manner affecting, interstate commerce,<br>a digital media device unless the device<br>includes and utilizes standard security<br>technologies that adhere to the security<br>system standards.<br>**********<br>Of course, Lisa did not necessarily<br>intend to read his books. She might<br>want the computer only to write her<br>midterm. But Dan knew she came from<br>a middle-class family and could hardly<br>afford the tuition, let alone her reading<br>fees. Books might be the only way she<br>could graduate<br>**********<br>Research in analysis (i.e., the evaluation<br>of the strengths and weaknesses of<br>computer system) is essential to the<br>development of effective security, both<br>for works protected by copyright law<br>and for information in general. Such<br>research can progress only through the<br>open publication and exchange of<br>complete scientific results<br>**********<br>I am very very very happy!<br>What about you?<br>**********<br>6<br>computer<br>books AND computer<br>books OR protected<br>NOT security<br>very<br>slick</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>want the computer only to write her<br>-——–<br>computer system) is essential to the<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>intend to read his books. She might<br>want the computer only to write her<br>fees. Books might be the only way she<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>intend to read his books. She might<br>fees. Books might be the only way she<br>-——–<br>for works protected by copyright law<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>Of course, Lisa did not necessarily<br>intend to read his books. She might<br>want the computer only to write her<br>midterm. But Dan knew she came from<br>a middle-class family and could hardly<br>afford the tuition, let alone her reading<br>fees. Books might be the only way she<br>could graduate<br>-——–<br>I am very very very happy!<br>What about you?<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>I am very very very happy!<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>Sorry, I found nothing.<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h3 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h3><p>　　模擬題，這題原本用比較複雜的Map + Set，且udebug提供的測資也有過，但有WA或TLE的問題．．．後來參考這篇<a href="https://blog.csdn.net/zju2016/article/details/74746642">https://blog.csdn.net/zju2016/article/details/74746642</a>，主要使用的資料結構：</p>
<ol>
<li>map&lt;string, bool[1505]&gt; word_to_lines: 在查詢之前，計算全部文章的單字對應出現的行數，行數是全部文章一起計算</li>
</ol>
<p>接著依照4種查詢的邏輯，做每篇文章的bit flag的計算。文章有可能出現連接符號的單字，比如happy-bird，查詢bird，則這筆是屬於比對成功。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1597.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1597.cpp</a></p>
<h3 id="UVa-1597-Searching-the-Web"><a href="#UVa-1597-Searching-the-Web" class="headerlink" title="UVa 1597 Searching the Web"></a>UVa 1597 Searching the Web</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 1598 Exchange</title>
    <url>/2020/04/03/uva-1598-exchange/</url>
    <content><![CDATA[<p>UVa 1598 Exchange 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>1598 - Exchange</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=0&problem=4473">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;category&#x3D;0&amp;problem&#x3D;4473</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>一個商品競標的平台，會有買方與賣方的出價。買方會有購買商品的數量和價格、賣方也會有販賣商品的數量和價格。<br>一開始會有N筆指令，其中有3種指令</p>
<ol>
<li>SELL 販賣的數量 販賣的價格</li>
<li>BUY 購買的數量 購買的價格</li>
<li>CANCEL 第Y筆的競標取消</li>
</ol>
<p>前2個指令BUY和SELL執行後，若有任一家的買方的價格大於或等於任一家賣方的價格，此時發生交易。交易的順序是依照輸入的報價順序，若前面的買／賣方商品已買／售完，則再換下一位買／賣方，直到任一家買方的價格小於任一家賣方的價格。<br>　　進行交易時都輸出</p>
<p>TRADE 交易的數量 交易的價格</p>
<p>交易的價格是依照觸發交易的反方價格，比如是買方的指令觸發交易，則交易價格是用賣方的最低價格。 如果目前指令為CANCEL，則第Y筆的競標指令要移除。</p>
<p>　　不管有無任何交易，每個指令結束後都要輸出</p>
<p>QUOTE 買方最高價格的總數量 買方最高價格 - 賣方最低價格的總數量 賣方最低價格</p>
<p>如果當前沒有任何買方在競標，則買方最高價格的總數量和買方最高價格都輸出0；如果當前沒有任何賣方在競標，則賣方最高價格的總數量和賣方最高價格分別輸出0 和 99999</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>11<br>BUY 100 35<br>CANCEL 1<br>BUY 100 34<br>SELL 150 36<br>SELL 300 37<br>SELL 100 36<br>BUY 100 38<br>CANCEL 4<br>CANCEL 7<br>BUY 200 32<br>SELL 500 30</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>QUOTE 100 35 - 0 99999<br>QUOTE 0 0 - 0 99999<br>QUOTE 100 34 - 0 99999<br>QUOTE 100 34 - 150 36<br>QUOTE 100 34 - 150 36<br>QUOTE 100 34 - 250 36<br>TRADE 100 36<br>QUOTE 100 34 - 150 36<br>QUOTE 100 34 - 100 36<br>QUOTE 100 34 - 100 36<br>QUOTE 100 34 - 100 36<br>TRADE 100 34<br>TRADE 200 32<br>QUOTE 0 0 - 200 30</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這模擬題使用5個資料結構。</p>
<ol>
<li>priority_queue&lt;int, vector<int>, less<int>&gt; buy_price : 用Priority Queue紀錄買方的最高價格</li>
<li>priority_queue&lt;int, vector<int>, greater<int>&gt; sell_price : 用Priority Queue紀錄賣方的最低價格</li>
<li>map&lt;int, vector<Exchange>&gt; buy_price_map_size : 買方每種價格的數量列表</li>
<li>map&lt;int, vector<Exchange>&gt; sell_price_map_size : 賣方每種價格的數量列表</li>
<li>BuySell buySell[10005] : 紀錄指令是否為買&#x2F;賣方和價格</li>
</ol>
<p>struct Exchange<br>{<br>int index;<br>int s;<br>};<br>Exchange的index是指令的順序、s是數量  </p>
<p>struct BuySell<br>{<br>bool isBuy;<br>int price;<br>};<br>isBuy為是否為買&#x2F;賣方、price是這買&#x2F;賣方的價格  </p>
<p>用圖說明範例測資的運作流程. 圖1為尚未有任何指令的狀態。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/1-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/1-2.png" alt="UVa 1598 Exchange 圖1"></a></p>
<p>圖1</p>
<p>接著指令BUY 100 35，代表買方出購買數量100且價錢35，將buy_price新增35、buy_price_map_size新增價錢35對應數量100，輸出目前的競標狀態，如圖2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/2-3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/2-2.png" alt="UVa 1598 Exchange 圖2"></a></p>
<p>圖2</p>
<p>接著指令CANCEL 1，取消剛那一筆BUY 100 35的競標指令，buy_price與buy_price_map_size會被清空，輸出目前的競標狀態，如圖3。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/3-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/3-1.png" alt="UVa 1598 Exchange 圖3"></a></p>
<p>圖3</p>
<p>接著指令BUY 100 34，代表買方出購買數量100且價錢34，將buy_price新增34、buy_price_map_size新增價錢34對應數量100，輸出目前的競標狀態，如圖4。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/4-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/4-1.png" alt="UVa 1598 Exchange 圖4"></a></p>
<p>圖4</p>
<p>接著指令SELL 150 36，代表賣方出販售數量150且價錢36，將sell_price新增36、sell_price_map_size新增價錢36對應數量150，輸出目前的競標狀態，如圖5。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/5-1.png" alt="UVa 1598 Exchange 圖5"></a></p>
<p>圖5</p>
<p>接著指令SELL 300 37，代表賣方出販售數量300且價錢37，將sell_price新增37、sell_price_map_size新增價錢37對應數量300，輸出目前的競標狀態，如圖6。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/6-1.png" alt="UVa 1598 Exchange 圖6"></a></p>
<p>圖6</p>
<p>接著指令SELL 100 36，代表賣方出販售數量100且價錢36，將sell_price已經存在36的價格所以不變，而sell_price_map_size新增價錢36對應數量100，輸出目前的競標狀態，其中賣家價錢36對應的總數量為150 + 100 &#x3D; 250，如圖7。  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/7-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/7-1.png" alt="UVa 1598 圖7"></a></p>
<p>圖7</p>
<p>接著指令BUY 100 38，代表買方出購買數量100且價錢38，將buy_price新增38、buy_price_map_size新增價錢38對應數量100。<br>此時buy_price的Top 大於 sell_price的Top，進行交易，賣方index &#x3D; 3的那筆先賣給買方index &#x3D; 6，index 3將剩下數量50，而買方價錢38已都買到，移除該筆買方競標價格。<br>先輸出交易價格36元(是買方觸發交易，所以是賣方的價格)和數量100，再輸出目前的競標狀態，如圖8與圖9。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/8-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/8-1.png" alt="UVa 1598 圖8"></a></p>
<p>圖8</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/9-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/9-1.png" alt="UVa 1598 圖9"></a></p>
<p>圖9</p>
<p>接著指令CANCEL 4，取消那一筆SELL 150 36的競標指令，sell_price_map_size會移除index &#x3D; 3的item，而sell_price仍保持不變，輸出目前的競標狀態，如圖10與圖11。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/10-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/10-1.png" alt="UVa 1598 圖10"></a></p>
<p>圖10</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/11-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/11-1.png" alt="UVa 1598 圖11"></a></p>
<p>圖11</p>
<p>接著指令CANCEL 7，取消那一筆BUY 100 38的競標指令，但buy_price已不存在這筆價錢，所以沒任何異動，輸出目前的競標狀態，如圖12。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/12-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/12-1.png" alt="圖12"></a></p>
<p>圖12</p>
<p>接著指令BUY 200 32，代表買方出購買數量200且價錢32，將buy_price新增32、buy_price_map_size新增價錢32對應數量200，輸出目前的競標狀態，如圖13。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/25E5259C259613.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/25E5259C259613.png" alt="圖13"></a></p>
<p>圖13</p>
<p>接著指令SELL 500 30，代表賣方出販售數量500且價錢30，將sell_price新增30、sell_price_map_size新增價錢30對應數量500。 此時buy_price的Top 大於 sell_price的Top，進行交易，賣方index &#x3D; 10的那筆先賣給買方index &#x3D; 2，index 10將剩下數量400，而買方價錢34已都買到，移除該筆買方競標價格。 輸出交易價格34元(是賣方觸發交易，所以是買方的價格)和數量100。  buy_price的Top 仍大於 sell_price的Top，進行交易，賣方index &#x3D; 10的那筆先賣給買方index &#x3D; 9，index 10將剩下數量200，而買方價錢32已都買到，移除該筆買方競標價格。</p>
<p>輸出交易價格32元(仍是賣方觸發交易，所以是買方的價格)和數量200，再輸出目前的競標狀態，如圖14至圖16。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/14.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/14.png" alt="圖14"></a></p>
<p>圖14</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/15.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/15.png" alt="圖15"></a></p>
<p>圖15</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/04/16.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/04/16.png" alt="圖16"></a></p>
<p>圖16</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1598.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/1500-1599/1598.cpp</a></p>
<h4 id="UVa-1598-Exchange"><a href="#UVa-1598-Exchange" class="headerlink" title="UVa 1598 Exchange"></a>UVa 1598 Exchange</h4>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 201 Squares</title>
    <url>/2019/10/14/uva-201-squares/</url>
    <content><![CDATA[<p>UVa 201 Squares 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>201 - Squares</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=137">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;137</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予每個邊長為n個的正方點盤，再給m個連線，每個連線有H i j或V i j的表示，<br>其中H i j 代表點座標(row i, col j) 與 (row i , col j+1) 連線；V i j 代表點座標(row j, col i) 與 (row j+1 , col i) 連線。<br>　　求這正方點盤的連線可以形成多少個正方形。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>16<br>H 1 1<br>H 1 3<br>H 2 1<br>H 2 2<br>H 2 3<br>H 3 2<br>H 4 2<br>H 4 3<br>V 1 1<br>V 2 1<br>V 2 2<br>V 2 3<br>V 3 2<br>V 4 1<br>V 4 2<br>V 4 3<br>2<br>3<br>H 1 1<br>H 2 1<br>V 2 1</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Problem #1  </p>
<p>2 square (s) of size 1<br>1 square (s) of size 2  </p>
<p>**********************************  </p>
<p>Problem #2  </p>
<p>No completed squares can be found.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>依照題意建立點與點之間的地圖，再從(1, 1)開始尋找各種邊長是否能組成正方形。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/201.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/201.c</a></p>
<p>UVa 201 Squares</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 202 Repeating Decimals</title>
    <url>/2019/09/13/uva-202-repeating-decimals/</url>
    <content><![CDATA[<p>UVa 202 Repeating Decimals 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>202 - Repeating Decimals</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=138">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;138</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給1個除數與被除數，計算除法後的結果。結果以小數點表示，但如果有循環小數時，則用圓括號( )顯示循環的小數點；若沒有循環小數，則用(0)表示。且輸出小數循環的長度。<br>　　以題目的說明，</p>
<ul>
<li>1 &#x2F; 6 &#x3D; 0.166666… &#x3D; 0.1(6) , 循環長度為1</li>
<li>5 &#x2F; 7 &#x3D; 0.714285714285…. &#x3D; 0.(714285) , 循環長度為6</li>
<li>1 &#x2F; 250 &#x3D; 0.004 &#x3D; 0.004(0), 由於沒有循環小數點，循環長度定義為1</li>
</ul>
<p>如果有循環小數的長度超過50個小數點，則顯示前50小數點，並用…結尾</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>76 25<br>5 43<br>1 397</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>76&#x2F;25 &#x3D; 3.04(0)<br>1 &#x3D; number of digits in repeating cycle  </p>
<p>5&#x2F;43 &#x3D; 0.(116279069767441860465)<br>21 &#x3D; number of digits in repeating cycle  </p>
<p>1&#x2F;397 &#x3D; 0.(00251889168765743073047858942065491183879093198992…)<br>99 &#x3D; number of digits in repeating cycle</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>要計算是否有重複循環的小數點，用一個位置陣列紀錄每一次餘數的出現位置，當有餘數已被紀錄時，代表這個小數點是循環的。<br>　　以 5 &#x2F; 7 為例，</p>
<ul>
<li>5 &#x2F; 7 &#x3D;&gt; 5 記錄在第1個位置 &#x3D;&gt; 需進位成 50 &#x2F; 7 &#x3D;&gt; 商數是7，餘數為1</li>
<li>1 &#x2F; 7 &#x3D;&gt; 1 記錄在第2個位置 &#x3D;&gt; 需進位成 10 &#x2F; 7 &#x3D;&gt; 商數是1，餘數為3</li>
<li>3 &#x2F; 7 &#x3D;&gt; 3 記錄在第3個位置 &#x3D;&gt; 需進位成 30 &#x2F; 7 &#x3D;&gt; 商數是4，餘數為2</li>
<li>2 &#x2F; 7 &#x3D;&gt; 2 記錄在第4個位置 &#x3D;&gt; 需進位成 20 &#x2F; 7 &#x3D;&gt; 商數是2，餘數為6</li>
<li>6 &#x2F; 7 &#x3D;&gt; 6 記錄在第5個位置 &#x3D;&gt; 需進位成 60 &#x2F; 7 &#x3D;&gt; 商數是8，餘數為4</li>
<li>4 &#x2F; 7 &#x3D;&gt; 4 記錄在第6個位置 &#x3D;&gt; 需進位成 40 &#x2F; 7 &#x3D;&gt; 商數是5，餘數為5</li>
<li>5 &#x2F; 7 &#x3D;&gt; 5 已經在第1個位置，所以找到循環的小數，長度為6</li>
</ul>
<p>這題的輸出格式沒有寫得很清楚，有些注意的事項</p>
<ol>
<li>如果是能整除的結果，比如 2 &#x2F; 1 ，則要輸出為 2.(0)</li>
<li>第2行的number of digits in repeating cycle，最前面是空3格空白</li>
<li>每1筆測資要多1個跳行</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/202.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/202.c</a></p>
<p>UVa 202 Repeating Decimals</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 207 PGA Tour Prize Money</title>
    <url>/2019/11/28/uva-207-pga-tour-prize-money/</url>
    <content><![CDATA[<p>UVa 207 PGA Tour Prize Money 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>207 - PGA Tour Prize Money</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=143">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;143</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>這題細節超多，完整題目還是請看原文，這邊做些整理。</p>
<p>計算高爾夫球的獎金計算，總獎金會有1筆，並有70種分配的比例。有n位選手，每位選手有獨自的名字和4種回合的分數。如果是業餘選手，名字最後字元是米字號 * 。4種回合的分數，如果中間第N回合失去資格，值以DQ呈現。<br>　　比賽有分2階段晉級，第1階段需要第1回合和第2回合的都要有分數，取分數最小的前70名才能晉級第2階段。如果第1階段的最後1位分數有多位同分，則這多位都一起晉級。<br>　　第2階段比的是全部4回合都有分數，並依照總分由小到大排名。從總分小的開始，依照前述的獎金比例順序 乘以 總獎金 取得對應的獎金。<br>如果有多個同分的選手，則獎金比例採用平均，比如第2和第3位選手同分，則這2位選手都得到 (Percent-2nd + Percent-3rd) * 總獎金 &#x2F; 2。<br>　　職業選手和業餘選手都要顯示排名，如果職業選手有同分的狀況，排名後面要加個T字。<br>業餘選手不能得到獎金，只顯示排名。<br>　　如果有第3或第4回合DQ的選手，則要輸出在最後面且不會有獎金。</p>
<p>由於UVa提供的範例不是完整的，以下範例輸入&#x2F;輸出是採用uDebug的。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1  </p>
<p>686211.33<br>2.2000<br>1.0000<br>1.0000<br>1.9000<br>1.5000<br>1.2000<br>1.2000<br>0.9000<br>1.1000<br>2.4000<br>1.3000<br>2.0000<br>1.8000<br>1.6000<br>1.5000<br>1.9000<br>1.1000<br>0.8000<br>0.9000<br>0.9000<br>1.8000<br>2.0000<br>1.0000<br>1.0000<br>0.9000<br>2.2000<br>1.3000<br>1.1000<br>1.5000<br>1.3000<br>1.4000<br>1.5000<br>1.0000<br>1.1000<br>1.5000<br>1.3000<br>1.0000<br>1.8000<br>1.2000<br>1.4000<br>1.6000<br>1.7000<br>1.8000<br>1.5000<br>1.1000<br>1.4000<br>1.3000<br>1.5000<br>1.1000<br>1.0000<br>1.7000<br>1.8000<br>1.3000<br>1.3000<br>1.1000<br>1.1000<br>0.9000<br>1.7000<br>1.7000<br>1.7000<br>1.4000<br>1.4000<br>1.5000<br>1.6000<br>1.5000<br>1.9000<br>1.2000<br>2.1000<br>1.5000<br>2.1000<br>60<br>P 1 76 81 95 52<br>P 2 43 32 83 48<br>P 3 65 86 88 31<br>P 4* 45 31 84 49<br>P 5 12 42 DQ<br>P 6 DQ<br>P 7* 85 27 15 68<br>P 8 56 50 DQ<br>P 9 48 DQ<br>P 10 95 65 20 DQ<br>P 11* DQ<br>P 12 DQ<br>P 13 25 65 DQ<br>P 14 DQ<br>P 15 30 74 59 70<br>P 16 77 28 60 95<br>P 17 15 60 32 32<br>P 18 22 DQ<br>P 19* 70 29 16 77<br>P 20 16 65 22 86<br>P 21 91 74 81 36<br>P 22 48 DQ<br>P 23 92 22 72 76<br>P 24 82 38 26 59<br>P 25 12 21 45 42<br>P 26 80 DQ<br>P 27* 94 DQ<br>P 28 93 69 46 11<br>P 29 79 49 20 86<br>P 30 83 51 13 51<br>P 31* DQ<br>P 32 69 43 22 92<br>P 33 29 74 56 65<br>P 34 10 80 DQ<br>P 35* 76 84 78 84<br>P 36* 28 85 87 15<br>P 37* DQ<br>P 38 26 DQ<br>P 39 87 DQ<br>P 40* 12 11 91 74<br>P 41 59 92 26 50<br>P 42 17 11 45 39<br>P 43 26 65 69 46<br>P 44* 84 61 85 96<br>P 45* 36 63 86 31<br>P 46 10 97 42 35<br>P 47 35 85 22 78<br>P 48 22 88 61 36<br>P 49 75 39 64 56<br>P 50* 72 79 46 57<br>P 51 69 58 DQ<br>P 52 68 97 29 91<br>P 53* 31 97 99 78<br>P 54 57 40 90 97<br>P 55 17 17 22 DQ<br>P 56 30 90 76 30<br>P 57 81 42 88 10<br>P 58 52 26 24 68<br>P 59 42 94 66 46<br>P 60 19 90 44 67</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Player Name Place RD1 RD2 RD3 RD4 TOTAL Money Won<br>-———————————————————————-<br>P 42 1 17 11 45 39 112 $ 15096.65<br>P 25 2 12 21 45 42 120 $ 6862.11<br>P 17 3 15 60 32 32 139 $ 6862.11<br>P 58 4 52 26 24 68 170 $ 13038.02<br>P 46 5 10 97 42 35 184 $ 10293.17<br>P 40* 6 12 11 91 74 188<br>P 20 7 16 65 22 86 189 $ 8234.54<br>P 19* 8 70 29 16 77 192<br>P 7* 9 85 27 15 68 195<br>P 30 10 83 51 13 51 198 $ 8234.54<br>P 24 11 82 38 26 59 205 $ 6175.90<br>P 2 12T 43 32 83 48 206 $ 12008.70<br>P 43 12T 26 65 69 46 206 $ 12008.70<br>P 48 14 22 88 61 36 207 $ 8920.75<br>P 4* 15 45 31 84 49 209<br>P 36* 16 28 85 87 15 215<br>P 45* 17 36 63 86 31 216<br>P 28 18 93 69 46 11 219 $ 13724.23<br>P 47 19T 35 85 22 78 220 $ 11665.59<br>P 60 19T 19 90 44 67 220 $ 11665.59<br>P 57 21 81 42 88 10 221 $ 10293.17<br>P 33 22 29 74 56 65 224 $ 13038.02<br>P 32 23T 69 43 22 92 226 $ 6519.01<br>P 56 23T 30 90 76 30 226 $ 6519.01<br>P 41 25 59 92 26 50 227 $ 6175.90<br>P 15 26 30 74 59 70 233 $ 6175.90<br>P 29 27T 79 49 20 86 234 $ 13038.02<br>P 49 27T 75 39 64 56 234 $ 13038.02<br>P 59 29 42 94 66 46 248 $ 6862.11<br>P 50* 30 72 79 46 57 254<br>P 16 31 77 28 60 95 260 $ 6862.11<br>P 23 32 92 22 72 76 262 $ 6175.90<br>P 3 33 65 86 88 31 270 $ 15096.65<br>P 21 34 91 74 81 36 282 $ 8920.75<br>P 54 35 57 40 90 97 284 $ 7548.32<br>P 52 36 68 97 29 91 285 $ 10293.17<br>P 1 37 76 81 95 52 304 $ 8920.75<br>P 53* 38 31 97 99 78 305<br>P 35* 39 76 84 78 84 322<br>P 44* 40 84 61 85 96 326<br>P 55 17 17 22 DQ<br>P 10 95 65 20 DQ<br>P 5 12 42 DQ<br>P 13 25 65 DQ<br>P 34 10 80 DQ<br>P 8 56 50 DQ<br>P 51 69 58 DQ</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>原本我的寫法一直WA，後來放棄而參考<a href="https://wcr1996.com/2015/03/21/uva-207-pga-tour-prize-money/">這位高手</a>的寫法，才得知錯在有一種極端的測資，除了第1名分數最小，其他有超過69名的選手同分，我的獎金算法就錯了．．． 由於太過細節要處理</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/207.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJu</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/207.cpp">d</a><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/207.cpp">ge&#x2F;200-299&#x2F;207.cpp</a></p>
<p>UVa 207 PGA Tour Prize Money</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 213 Message Decoding</title>
    <url>/2019/10/11/uva-213-message-decoding/</url>
    <content><![CDATA[<p>UVa 213 Message Decoding 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>213 - Message Decoding</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=149">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;149</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>第1行的字串做編碼。編碼規則為變成2進位表示的字串，從0 &#x3D;&gt; 00 &#x3D;&gt; 01 &#x3D;&gt; 10 &#x3D;&gt; 000 &#x3D;&gt; …. &#x3D;&gt; 1111110。最多只會編到7個bit，也不會有全都是1的字串。<br>以範例輸入第1筆測資TNM AEIOU，T為0、N為00、M為01、空白為10、A為000….U為100。<br>　　接著給予要解碼字串，開頭前3碼是2進位的值，轉成10進位代表之後的要解碼字串的長度。遇到該長度都為1的時候則停止該長度解碼。遇到000代表該筆測資結束。<br>範例輸入第1筆測資，2進位 001 &#x3D; 10進位的1，解碼長度為1，第1個是解 0，所以輸出T；接著是1，該長度解碼結束。接著是2進位011 &#x3D; 10進位的3，解碼長度為3，第1個是000，所以輸出A；接著是111，該長度解碼結束。接著是2進位010 &#x3D; 10進位的2，解碼長度為2，第1個是00，所以輸出N；接著是10，所以輸出空白；接著是01，所以輸出M；接著是11，該長度解碼結束。直到最後有000，結束這1筆測資。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>TNM AEIOU<br>0010101100011<br>1010001001110110011<br>11000<br>$#**<br>0100000101101100011100101000</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>TAN ME<br>##*$</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>先將第1行解碼存在2維陣列，第1維是編碼長度、第2維是順序，比如範例輸入第1筆測資是maps[0][0] &#x3D; ‘T’, maps[1][0] &#x3D; ‘N’，再依據每次解碼長度做查詢。</p>
<p>程式稍微複雜，難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/213.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/213.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 220 Othello</title>
    <url>/2019/10/16/uva-220-othello/</url>
    <content><![CDATA[<p>UVa 220 Othello 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>220 - Othello</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=156">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;156</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予黑白棋的目前局勢、目前的玩家B 黑棋 或 W白棋，和幾個指令。黑白棋玩法是吃掉敵方棋子，規則為要下棋的位置的水平、垂直、斜方的某一方向延伸，在這方向之內不包含空位，直到遇到另一個同色棋子時，中間的棋子都要換掉。</p>
<p>　　指令的種類有：</p>
<ul>
<li>L：顯示目前玩家可以下棋並可吃掉對方棋子的位置，如果沒有敵方棋子被吃掉，要顯示No legal move.</li>
<li>Mrc：在第r列第c行下目前玩家的棋子，如果現在是No legal move狀態，則要換另外個玩家下在這位置。當下在此位置後，從水平、垂直、斜方等8個方向，將符合吃掉敵方棋子都換成目前玩家的棋子。</li>
<li>Q：顯示這盤棋的局勢且結束這一盤棋</li>
</ul>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>-——-<br>-——-<br>-——-<br>-–WB—<br>-–BW—<br>-——-<br>-——-<br>-——-<br>W<br>L<br>M35<br>L<br>Q<br>WWWWB—<br>WWWB—-<br>WWB—–<br>WB——<br>-——-<br>-——-<br>-——-<br>-——-<br>B<br>L<br>M25<br>L<br>Q</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>(3,5) (4,6) (5,3) (6,4)<br>Black - 1 White - 4<br>(3,4) (3,6) (5,6)<br>-——-<br>-——-<br>-—W—<br>-–WW—<br>-–BW—<br>-——-<br>-——-<br>-——-  </p>
<p>No legal move.<br>Black - 3 White - 12<br>(3,5)<br>WWWWB—<br>WWWWW—<br>WWB—–<br>WB——<br>-——-<br>-——-<br>-——-<br>-——-</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>建立8* 8的棋子地圖，再依照3種指令模擬每個功能。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/220.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/220.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 221 Urban Elevations</title>
    <url>/2019/12/08/uva-221-urban-elevations/</url>
    <content><![CDATA[<p>UVa 221 Urban Elevations 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>221 - Urban Elevations</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=157">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;157</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>1個地圖上有N個矩形建築物，每個建築物有X、Y、寬度、深度與高度，X是朝向南面的左下角座標、Ｙ是朝向西面的左下角座標。<br>　　模擬1個人從南面地上的最西方開始往東方看，列出看到建築物的順序。</p>
<p>　　如題目的示意圖圖1，左半邊是俯視圖，右半邊是從南面地上看建築物的樣貌，從最西方開始數，建築物順序分別是5 9 4 3 10 2 1 14。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/25E6259C25AA25E5259125BD25E52590258D-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/25E6259C25AA25E5259125BD25E52590258D.png" alt="UVa 221 Urban Elevations 圖1"></a></p>
<p>圖1</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>14<br>160 0 30 60 30<br>125 0 32 28 60<br>95 0 27 28 40<br>70 35 19 55 90<br>0 0 60 35 80<br>0 40 29 20 60<br>35 40 25 45 80<br>0 67 25 20 50<br>0 92 90 20 80<br>95 38 55 12 50<br>95 60 60 13 30<br>95 80 45 25 50<br>165 65 15 15 25<br>165 85 10 15 35<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>For map #1, the visible buildings are numbered as follows:<br>5 9 4 3 10 2 1 14</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>原先想採用暴力的方法，窮舉所有X的範圍 0 至 最大X，但是X有可能很大，這樣會沒效率。看了劉汝佳大師的解法，基於離散化將X的範圍縮小，縮小的方式如下述圖解。</p>
<p>　　假設建築物的排列如圖2，有3棟，從南往北分別是1 、2、3。一開始做排序，先從X最小的排，如果X有相等再從Y最小的排，所以排序後結果是1、3、2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/2.png" alt="UVa 221 Urban Elevations 圖2"></a></p>
<p>圖2</p>
<p>接著先列出所有X的組合，包含建築物最西邊與最東邊的X座標，初始順序是0、60、20、60、0、70，把它們排序且除去重複後，剩下0、20、60、70。<br>　　X相鄰區間的點，要麼會被看見、要麼不會被看見，所以只需要取區間內任一點作為檢查該建築物的可見性。<br>　　取X兩兩相鄰元素平均值，作為判斷此建築物是否能被看見的標準，如圖3，平均值MX分別是10、40、65。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/3.png" alt="UVa 221 Urban Elevations 圖3"></a></p>
<p>圖3</p>
<p>由於有對建築物做排序，第1個會被看見的一定是第1個元素，即為ID &#x3D; 1的建築物。第2個元素是ID &#x3D; 3，需要藉由MX做判斷。<br>　　MX &#x3D; 10時，由於ID &#x3D; 1的高度擋住了ID &#x3D; 3的高度，所以此區間看不見，如圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/4.png" alt="圖4"></a></p>
<p>圖4</p>
<p>MX &#x3D; 40時，由於ID &#x3D; 1與ID &#x3D; 2的高度擋住了ID &#x3D; 3的高度，所以此區間看不見，如圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/5.png" alt=" 圖5"></a></p>
<p>圖5</p>
<p>MX &#x3D; 65時，無建築物擋住了ID &#x3D; 3，所以此區間可看見，如圖6</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/12/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/12/6.png" alt="圖6"></a></p>
<p>圖6</p>
<p>因此第2個可看見的建築物為ID &#x3D; 3。最後ID &#x3D; 2的建築物從MX的判斷無法被看見，所以不包含它。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/221.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/221.cpp</a></p>
<p>UVa 221 Urban Elevations</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 227 Puzzle</title>
    <url>/2019/09/10/uva-227-puzzle/</url>
    <content><![CDATA[<p>UVa 227 Puzzle 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>227 - Puzzle</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=163">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;163</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給5 * 5大小的文字陣列，會有1個空白字元在某一位置，其餘為大寫英文字母。再輸入不等長的指令，包含A、B、L、R。這些指令使空白字元移動：</p>
<ul>
<li>A: 往上移動1格</li>
<li>B: 往下移動1格</li>
<li>L: 往左移動1格</li>
<li>R: 往右移動1格</li>
</ul>
<p>　　指令的最後一個字元為數字0，代表指令已結束，並輸出移動後的結果。如果空白位置移動過程中超出文字陣列的邊界，則要輸出This puzzle has no final configuration.</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>TRGSJ<br>XDOKI<br>M VLN<br>WPABE<br>UQHCF<br>ARRBBL0<br>ABCDE<br>FGHIJ<br>KLMNO<br>PQRS <br>TUVWX<br>AAA<br>LLLL0<br>ABCDE<br>FGHIJ<br>KLMNO<br>PQRS <br>TUVWX<br>AAAAABBRRRLL0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Puzzle #1:<br>T R G S J<br>X O K L I<br>M D V B N<br>W P A E<br>U Q H C F  </p>
<p>Puzzle #2:<br>A B C D<br>F G H I E<br>K L M N J<br>P Q R S O<br>T U V W X  </p>
<p>Puzzle #3:<br>This puzzle has no final configuration.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>此為模擬題，依照指令的輸入，不斷移動空白位置且判斷邊界條件。以下列出些注意事項：</p>
<ol>
<li>指令會有多行，而空白位置在移動過程可能會超出邊界，必須將剩下的指令給讀完。</li>
<li>若用getchar等方法，要處理跳行字元。</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/227.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/227.c</a></p>
<p>UVa 227 Puzzle</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 230 Borrowers</title>
    <url>/2020/03/16/uva-230-borrowers/</url>
    <content><![CDATA[<p>UVa 230 Borrowers 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>230 - Borrowers</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=166">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;166</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>一開始圖書館架上會有好幾本書，書先以作者名做字典排序，如果有相同名字，再以書名做字典排序。書名保證不重複。<br>　　接著有三種指令，包含</p>
<ul>
<li>BORROW 書名 : 從書架上取下該本書</li>
<li>RETURN 書名 : 將被借的書歸還(尚未放在書架)</li>
<li>SHELVE : 將目前被歸還的書籍，放回到書架上。被放回書架上要依照前者的排序顯示放回去的狀況。如果是最前面的書，則輸出</li>
</ul>
<p>Put 書名 first<br>　　 否則輸出該本書的前一本 <br>Put 當前的書名 after 前一本書名  </p>
<p>　　 假如SHELVE時沒任何書被歸還，則不用輸出。最後遇到END結束該題。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>“The Canterbury Tales” by Chaucer, G.<br>“Algorithms” by Sedgewick, R.<br>“The C Programming Language” by Kernighan, B. and Ritchie, D.<br>END<br>BORROW “Algorithms”<br>BORROW “The C Programming Language”<br>RETURN “Algorithms”<br>RETURN “The C Programming Language”<br>SHELVE<br>END</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Put “The C Programming Language” after “The Canterbury Tales”<br>Put “Algorithms” after “The C Programming Language”<br>END</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　模擬題，資料結構分別使用</p>
<ol>
<li>map&lt;string, string&gt; titleToAuthor : 書名對應作者名</li>
<li>vector<string> shelve : 書架上的書</li>
<li>vector<ReturnBook> returnBooks : 被歸還的書, 而他的型別是struct</li>
</ol>
<p>struct ReturnBook{ string title; string author; };</p>
<ol>
<li>一開始將shelve做排序，當有書被借走時，可用lower_bound 二分搜尋去找該書並把它移除。</li>
<li>當有書歸還時，都先Push至returnBooks。</li>
<li>遇到Shelve指令時，將returnBooks作排序，從第1筆開使二分搜尋找shelve對應的位置，如果是等於shelve的begin()， 代表它是最前面的書，要輸出</li>
</ol>
<p>Put 書名 first  </p>
<p>，否則二分搜尋找的那一本會是它前一本書，要輸出  </p>
<p>Put 當前的書名 after 前一本書名</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/230.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/230.cpp</a></p>
<h3 id="UVa-230-Borrowers"><a href="#UVa-230-Borrowers" class="headerlink" title="UVa 230 Borrowers"></a>UVa 230 Borrowers</h3>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 232 Crossword Answers</title>
    <url>/2019/09/11/uva-232-crossword-answers/</url>
    <content><![CDATA[<p>UVa 232 Crossword Answers 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>232 - Crossword Answers</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=168">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;168</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個 r * c 大小的文字陣列，求Across與Down的排列。<br>Across為從上方左邊往右數，遇有字母的為頭，往右直到邊界或*米字號<br>Down為從上方左邊往右數，遇有字母的為頭，往下直到邊界或*米字號<br>每個排列會有個編號，此編號是由左至右、由上而下計算。該位置若為字母（非 * 米字號）且上方或左方為邊界 or *米字號，則該位置要遞增編號。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2 2<br>AT<br>*O<br>6 7<br>AIM*DEN<br>*ME*ONE<br>UPON*TO<br>SO*ERIN<br>*SA*OR*<br>IES*DEA<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>puzzle #1:<br>Across<br>1.AT<br>3.O<br>Down<br>1.A<br>2.TO  </p>
<p>puzzle #2:<br>Across<br>1.AIM<br>4.DEN<br>7.ME<br>8.ONE<br>9.UPON<br>11.TO<br>12.SO<br>13.ERIN<br>15.SA<br>17.OR<br>18.IES<br>19.DEA<br>Down<br>1.A<br>2.IMPOSE<br>3.MEO<br>4.DO<br>5.ENTIRE<br>6.NEON<br>9.US<br>10.NE<br>14.ROD<br>16.AS<br>18.I<br>20.A</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>解析題意的編號方法，以測試資料第2筆為例，<br>6 * 7的 AIM*DEN *ME*ONE UPON*TO SO*ERIN *SA*OR* IES*DEA</p>
<p>從第1列左邊算起，AIM都在上方邊界，所以編號為1 2 3。右邊的DEN也是在上方邊界，所以編號為4 5 6。<br>　　第2列左邊算起，M的左邊為*米字號，編號為7；E的上方和左方都是字母，所以不用編號。右邊的O，它左邊為*米字號，所以編號為8。NE的上方&#x2F;左方非邊界，所以不編號。<br>　　第3列左邊算起，U的左邊為邊界，所以邊界為9；PO的上方&#x2F;右方非邊界，所以不編號。N的上方為*米字號，所以編號為10；右方的T，左邊為*米字號，所以編號為11；O的上方&#x2F;右方非邊界，所以不編號。<br>　　其他4~6列以此類推。</p>
<p>　　有了編號，接著依照Across和Down的邏輯來輸出字母。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/232.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/232.c</a></p>
<p>UVa 232 Crossword Answers</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 253 Cube painting</title>
    <url>/2019/10/19/uva-253-cube-painting/</url>
    <content><![CDATA[<p>UVa 253 Cube painting 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>253 - Cube painting</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=189">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;189</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予2個立方體的6個面的編號，面的編號順序如題目所述(圖1)，求這2個立方體的編號順序是否相等。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/6side.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/6side.png" alt="UVa 253 Cube painting 圖1"></a></p>
<p>圖1</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>rbgggrrggbgr<br>rrrbbbrrbbbr<br>rbgrbgrrrrrg</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>TRUE<br>FALSE<br>FALSE</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>模擬第1個立方體的各種面翻轉後的位置，是否能與第2個立方體的順序相同，以題目順序編號來看，先向右翻轉(2 -&gt; 4、4 -&gt; 5、5 -&gt; 3、3 -&gt; 2) 做4次比對、往上 (2 -&gt;1 、 1 -&gt; 5、 5 -&gt; 6、 6 -&gt; 2)後再往右翻4次比對、最後再側翻 ( 1 -&gt; 4、 4 -&gt; 6、 6 -&gt; 3、 3 -&gt; 1)配合前面的往右與往上翻，最差狀況需要比對4 * 4 * 2 &#x3D; 32次。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/253.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/253.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 272 TEX Quotes</title>
    <url>/2019/07/06/uva-272-tex-quotes/</url>
    <content><![CDATA[<p>UVa 272 TEX Quotes 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>272 - TEX Quotes</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=208">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;208</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>輸入為不等長的字串，輸出原始輸入的字串，但是有包含 “ 字元時，從前面數來第奇數個出現則輸出為 ``、第偶數個出現則輸出為 ‘’</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>“To be or not to be,” quoth the Bard, “that is the question”. The programming contestant replied: “I must disagree. To `C’ or not to `C’, that is The Question!”</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>``To be or not to be,’’ quoth the Bard, ``that is the question’’. The programming contestant replied: ``I must disagree. To `C’ or not to `C’, that is The Question!’’</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　使用C語言的getchar讀一個字元即輸出一個字元。也有使用gets一行一行讀的解法，但gets因為Buffer的漏洞問題，在C11以後不能使用，取而代之的是gets_s方法。<br>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/272.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/200-299/272.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 340 Master-Mind Hints</title>
    <url>/2019/07/10/uva-340-master-mind-hints/</url>
    <content><![CDATA[<p>UVa 340 Master-Mind Hints 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>340 - Master-Mind Hints</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=276">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;276</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>經典的1A2B遊戲，輸入長度為N的數字列表為答案組，之後輸入每筆一樣長度N的測試組，比對答案組與測試組之間的相同數有幾個、不同位置有幾個。比如答案組為1 2 3 4，測試組為1 3 2 4，則比對結果為2A2B，2A指的是1 與 4同位置，2B指的是2與3雖然出現在答案組，但位置不相同。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>4<br>1 3 5 5<br>1 1 2 3<br>4 3 3 5<br>6 5 5 1<br>6 1 3 5<br>1 3 5 5<br>0 0 0 0<br>10<br>1 2 2 2 4 5 6 6 6 9<br>1 2 3 4 5 6 7 8 9 1<br>1 1 2 2 3 3 4 4 5 5<br>1 2 1 3 1 5 1 6 1 9<br>1 2 2 5 5 5 6 6 6 7<br>0 0 0 0 0 0 0 0 0 0<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Game 1:<br>(1,1)<br>(2,0)<br>(1,2)<br>(1,2)<br>(4,0)<br>Game 2:<br>(2,4)<br>(3,2)<br>(5,0)<br>(7,0)</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　模擬題，先算出答對的數量A，接著算每個數字出現在答案與測試的最少個數，加總後的值減掉A即為B。這個算法意義是A與B聯集的結果 排除 A，剩下就是B。<br>　　比如答案1 2 3 4，測試4 2 1 1，A是1 (因為2的位置正確)，出現1的最小個數 &#x3D; min(1, 2) &#x3D; 1、出現2的最小個數是min(1, 1) &#x3D; 1、出現3的最小個數是min(1, 0) &#x3D; 0 ，出現4的最小個數是min(1, 1) &#x3D; 1，其他5~9都是0，所以B是(1 + 1 + 0 + 1) - 1 &#x3D; 2。<br>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/300-399/340.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/300-399/340.c</a></p>
<p>UVa 340 Master-Mind Hints</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 400 Unix ls</title>
    <url>/2019/11/19/uva-400-unix-ls/</url>
    <content><![CDATA[<p>UVa 400 Unix ls 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>400 - Unix ls</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=341">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;341</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>模擬Unix系統的指令ls，將N筆檔名印出。檔名需字典排序，並從第1行、第1列往第2列、第3列…第N列往下印，之後再從第2行印。每1列都要填滿檔名，填不滿則從小的行數開始。每1列最多60字元，每1個檔名最多60字元，如果能形成2行以上的檔名群，則非最右邊行數的字元都要占滿最長檔名的字元再加2的長度。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>10<br>tiny<br>2short4me<br>very_long_file_name<br>shorter<br>size-1<br>size2<br>size3<br>much_longer_name<br>12345678.123<br>mid_size_name<br>12<br>Weaser<br>Alfalfa<br>Stimey<br>Buckwheat<br>Porky<br>Joe<br>Darla<br>Cotton<br>Butch<br>Froggy<br>Mrs_Crabapple<br>P.D.<br>19<br>Mr._French<br>Jody<br>Buffy<br>Sissy<br>Keith<br>Danny<br>Lori<br>Chris<br>Shirley<br>Marsha<br>Jan<br>Cindy<br>Carol<br>Mike<br>Greg<br>Peter<br>Bobby<br>Alice<br>Ruben</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>-———————————————————–<br>12345678.123 size-1<br>2short4me size2<br>mid_size_name size3<br>much_longer_name tiny<br>shorter very_long_file_name<br>-———————————————————–<br>Alfalfa Cotton Joe Porky<br>Buckwheat Darla Mrs_Crabapple Stimey<br>Butch Froggy P.D. Weaser<br>-———————————————————–<br>Alice Chris Jan Marsha Ruben<br>Bobby Cindy Jody Mike Shirley<br>Buffy Danny Keith Mr._French Sissy<br>Carol Greg Lori Peter</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>邊輸入檔名邊紀錄最長的字串長度。所有檔名存完做字典排序。有了最長的長度與總檔名數量，可以計算會需要多少行數、列數<br>行數cols &#x3D; (60 - max_len) &#x2F; ( max_len + 2) + 1<br>列數rows &#x3D; n &#x2F; cols + (n % cols &#x3D;&#x3D; 0 ? 0 : 1)<br>使用雙迴圈一一列出檔名。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/400.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/400.cpp</a></p>
<p>UVa 400 Unix ls</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 401 Palindromes</title>
    <url>/2019/07/07/uva-401-palindromes/</url>
    <content><![CDATA[<p>UVa 401 Palindromes 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>401 - Palindromes</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=342">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;342</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>判斷輸入的字串為哪種回文(Palindromes)，有分為左右反過來一樣的(鏡像 Mirroed)、同字元的。題目給一張字元正反對照表，比如A的反過來是A、E的反過來是3。<br>　　依範例輸入輸出為例，</p>
<ol>
<li>ATOYOTA　符合Mirrored且字元都一樣，屬於mirrored palindrome</li>
<li>2A3MEAS　符合Mirrored但字元沒有一樣 (2 !&#x3D; S)，屬於mirrored string</li>
<li>ISAPALINILAPASI　不符合Mirrored (左邊第2個S 與 右邊第2個S）但字元都一樣，屬於regular palindrome</li>
<li>NOTAPALINDROME　都不符合Mirrored且字元也沒有一樣，屬於 not a palindrome</li>
</ol>
<p>　　每筆輸出要多一行跳行</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>NOTAPALINDROME<br>ISAPALINILAPASI<br>2A3MEAS<br>ATOYOTA</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>NOTAPALINDROME – is not a palindrome.</p>
<p>ISAPALINILAPASI – is a regular palindrome.</p>
<p>2A3MEAS – is a mirrored string.</p>
<p>ATOYOTA – is a mirrored palindrome.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　題目不包含空白，可直接用scanf(“%s”, s)讀取每筆輸入。在前述題目說明已歸納出邏輯，需判斷回文種類的兩個條件：Mirrored 與 字元相同，即可排出4種答案。由於需要比對Mirrored的規則，須將題目給的字元表做成一個對照表。我使用char table[200]作為Mapping Table，index是字元，實際上是ASCII Code。<br>　　難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/401.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/401.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 455 Periodic Strings</title>
    <url>/2019/08/23/uva-455-periodic-strings/</url>
    <content><![CDATA[<p>UVa 455 Periodic Strings 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>455 - Periodic Strings</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=396">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;396</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個字串，求週期重複子字串的最小長度。以範例測資HoHoHo，它的Ho子字串可週期重複在第1、第3、第5的位置，而這子字串長度為2。最長的子字串是HoHoHo本身，長度為6，所以輸出答案為2。<br>　　另一個題目說明的abcabcabcabc，可週期重複的子字串為abc、abcabc與abcabcabcabc三種，最小長度為abc &#x3D; 3。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1</p>
<p>HoHoHo</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>2</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><ol>
<li>題目最長的字串為80，可以暴力從最小子字串求解。</li>
<li>符合週期重複子字串的長度一定是因數，所以可以省略非因數的解，當檢查到第Len&#x2F;2的長度仍沒解時，則最小長度只會是題目本身。</li>
</ol>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/455.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/455.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 489 Hangman Judge</title>
    <url>/2019/10/07/uva-489-hangman-judge/</url>
    <content><![CDATA[<p>UVa 489 Hangman Judge 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>489 - Hangman Judge</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=430">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;430</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給2個字串，第1個字串是解答，第2個字串是猜測值。如果猜測結束前的字元全出現在解答，則獲勝，輸出You win.；如果猜測結束前猜錯7次，則失敗，輸出You lose.；沒贏也輸，則是放棄，輸出You chickened out.。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>1<br>cheese<br>chese<br>2<br>cheese<br>abcdefg<br>3<br>cheese<br>abcdefgij<br>-1</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Round 1<br>You win.<br>Round 2<br>You chickened out.<br>Round 3<br>You lose.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>模擬每次輸入的猜測，並計數猜對與猜錯的數量，只要全猜對或錯7次可結束比對，都不符合則是chickend out。</p>
<p>以範例測資第1筆，猜測結束前都中解答，如圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/1.png" alt="UVa 489 Hangman Judge 圖1"></a></p>
<p>圖1</p>
<p>以範例測資第2筆，猜測結束前沒勝利也沒失敗，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/2.png" alt="UVa 489 Hangman Judge 圖2"></a></p>
<p>圖2</p>
<p>以範例測資第3筆，猜測結束前錯7次失敗，如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/10/3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/10/3.png" alt="圖3"></a></p>
<p>圖3</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/489.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/400-499/489.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 508 Morse Mismatches</title>
    <url>/2019/10/19/uva-508-morse-mismatches/</url>
    <content><![CDATA[<p>UVa 508 Morse Mismatches 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>508 - Morse Mismatches</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=449">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;449</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給予3大種的輸入：摩斯密碼對照表、單字與摩斯密碼。求摩斯密碼解密後的單字。</p>
<ul>
<li>每個摩斯密碼對照表是1個字元 對應 ‘.’ 與 ‘-‘ 組合，以範例輸入為例，A對應的摩斯密碼是 “.-“</li>
<li>單字是由前述對照表的一至多個字元組成，再對應摩斯密碼做串接，以範例輸入為例，AN單字的摩斯密碼串接為 “.–.”</li>
<li>最後是摩斯密碼，將這些密碼轉回前述的單字。如果單字有完全匹配，則輸出那筆單字；如果有多筆完全匹配的單字，任選匹配的單字並結尾加上 ‘!’；如果只有模糊匹配，定義為從前面的前綴字有匹配但後面不相符，則輸出需要最少新增&#x2F;移除字元量的單字，並結尾加上 ‘?’</li>
<li>以範例輸入的密碼，.–…..–可以完全匹配WHAT單字；..–可以完全匹配EAT、IM，任選單字EAT再加上’!’； .–.-.—-..沒有完全匹配，而單字WROTH (.–.-.—-….)有最少移除字元量2，所以選它再加上’?’</li>
</ul>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>A .-<br>B -…<br>C -.-.<br>D -..<br>E .<br>F ..-.<br>G –.<br>H ….<br>I ..<br>J .—<br>K -.-<br>L .-..<br>M –<br>N -.<br>O —<br>P .–.<br>Q –.-<br>R .-.<br>S …<br>T -<br>U ..-<br>V …-<br>W .–<br>X -..-<br>Y -.–<br>Z –..<br>0 ——<br>1 .—–<br>2 ..—<br>3 …–<br>4 ….-<br>5 …..<br>6 -….<br>7 –…<br>8 —..<br>9 —-.<br>*<br>AN<br>EARTHQUAKE<br>EAT<br>GOD<br>HATH<br>IM<br>READY<br>TO<br>WHAT<br>WROTH<br>*<br>.–…..– …..–….<br>--.—-.. .–.-.—-..<br>.–…..– .–.<br>..-.-.-….–.-..-.–.-.<br>..– .-…–..-.–<br>-— ..–<br>*</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>WHAT<br>HATH<br>GOD<br>WROTH?<br>WHAT<br>AN<br>EARTHQUAKE<br>EAT!<br>READY<br>TO<br>EAT!</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>使用Map建立摩斯密碼字元對照表與單字表，再將每筆摩斯密碼作解密。解密過程為比對所有單字的摩斯密碼並紀錄每次比對的最小結果，其中比較特殊的比對結果是非完全／模糊的匹配，比如..–與-，這種優先順序要最小。</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/508.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/508.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 509 RAID!</title>
    <url>/2019/10/26/uva-509-raid/</url>
    <content><![CDATA[<p>UVa 509 RAID! 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>509 - RAID!</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=450">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;450</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>前面輸入4個參數分別是d個磁碟、s個bits組成1個block、每1個磁碟包含b個blocks、Parity驗證的模式E(全都0)或O(全都1)，接著會有d列的硬碟bit資訊，每1列的包含s * b個bit資訊，分別是第1個block、第2個block…..、第b個block的bit資訊。其中若有損壞的bit會用x表示。<br>　　當某1列硬碟陣列的block的bit有損壞時，可以用同一列其他硬碟的bit復原。<br>復原與驗證的方式都是用Exclusive-OR。<br>　　求這磁碟陣列是否驗證正確，不正確的狀況包含Parity模式驗證錯誤、某一列磁碟陣列的損壞的bit有2個以上。不正確輸出Disk set X is invalid.；正確則輸出data block的16進制值，若不足4個bit則再補上0。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>5 2 5<br>E<br>0001011111<br>0110111011<br>1011011111<br>1110101100<br>0010010111<br>3 2 5<br>E<br>0001111111<br>0111111011<br>xx11011111<br>3 5 1<br>O<br>11111<br>11xxx<br>x1111<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Disk set 1 is valid, contents are: 6C7A79EDFC<br>Disk set 2 is invalid.<br>Disk set 3 is valid, contents are: FFC</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>這題需要考量些細節</p>
<ul>
<li>每1列只會有1個parity，在第n列磁碟陣列出現的disk為 n % d，輸出驗證正確的data block要略過</li>
<li>清楚使用exclusive-or的邏輯</li>
<li>計算data block的位元運算</li>
</ul>
<p>這題沒想清楚造成卡太久．．．．</p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/509.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/509.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 511 Do You Know the Way to San Jose?</title>
    <url>/2020/03/20/uva-511-do-you-know-the-way-to-san-jose/</url>
    <content><![CDATA[<p>UVa 511 Do You Know the Way to San Jose? 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>511 - Do You Know the Way to San Jose?</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=452">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;452</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>以MAPS開頭，接著有N張地圖，每張地圖都有1個名字和對角座標(x1, y1)與(x2, y2)；以LOCATIONS開頭，接著有M個地點，每個地點有1個座標(x, y)；以REQUESTS開頭，最後有W個查詢，每個查詢包含1個地點和1個desired detail level。desired detail level定義是指包含此查詢地點的地圖集合，求地圖面積為第level個大。<br>　　查詢結果有4種，分別是</p>
<ol>
<li>地點不在LOCATIONS裡，輸出unknown location</li>
<li>地點不在任何地圖裡，輸出no map contains that location</li>
<li>包含此地點的地圖少於desired detail level，則輸出面積最小的那張地圖 no map at that detail level; using 地圖名</li>
<li>輸出面積第level大的地圖名 using 地圖名</li>
</ol>
<p>　　如果有出現前面3種差異性，則依新增、移除、有更新的順序輸出細節，後面的key值一字典排序；若沒任一前3種差異性，則輸出No changes。　<br>　　以範例測資第1筆，多了d和ee的key、少了b和f的key、c的值從10變成5。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>MAPS<br>BayArea -6.0 12.0 -11.0 5.0<br>SantaClara 4.0 9.0 -3.5 2.5<br>SanJoseRegion -3.0 10.0 11.0 3.0<br>CenterCoast -5.0 11.0 1.0 -8.0<br>SanMateo -5.5 4.0 -12.5 9.0<br>NCalif -13.0 -7.0 13.0 15.0<br>LOCATIONS<br>Monterey -4.0 2.0<br>SanJose -1.0 7.5<br>Fresno 7.0 0.1<br>SanFrancisco -10.0 8.6<br>SantaCruz -4.0 2.0<br>SanDiego 13.8 -19.3<br>REQUESTS<br>SanJose 3<br>SanFrancisco 2<br>Fresno 2<br>Stockton 1<br>SanDiego 2<br>SanJose 4<br>SantaCruz 3<br>END</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>SanJose at detail level 3 using SanJoseRegion<br>SanFrancisco at detail level 2 using BayArea<br>Fresno at detail level 2 no map at that detail level; using NCalif<br>Stockton at detail level 1 unknown location<br>SanDiego at detail level 2 no map contains that location<br>SanJose at detail level 4 using SantaClara<br>SantaCruz at detail level 3 no map at that detail level; using CenterCoast</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>　　模擬題，使用2種資料結構：</p>
<ol>
<li>map&lt;string, MyMap&gt; areas： 地圖名稱對應詳細資料，包含地圖名、對角座標與面積</li>
<li>map&lt;string, MyLocation&gt; locations：地點名稱對應詳細資料，包含座標位置</li>
</ol>
<p>struct MyMap{<br>double x1, y1, x2, y2;<br>double area;<br>string name;<br>};  </p>
<p>struct MyLocation{<br>double x, y;<br>};  </p>
<p>每1筆查詢先比對locations是否有該地點、再比對areas是否有地圖包含它。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/511.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/511.cpp</a></p>
<p>UVa 511 Do You Know the Way to San Jose?</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 512 Spreadsheet Tracking</title>
    <url>/2019/10/11/uva-512-spreadsheet-tracking/</url>
    <content><![CDATA[<p>UVa 512 Spreadsheet Tracking 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>512 - Spreadsheet Tracking</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=453">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;453</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>模擬2維表格的功能，包含插入行IC、插入列IR、刪除行DC、刪除列DR、交換EX等五種功能。一開始給予r與c，代表表格的維度。有N筆指令，EX的指令會有r1 c1 r2 c2 4個數字，代表要交換的兩個元素座標。插入&#x2F;刪除的指令後面有m筆行&#x2F;列數，代表要插入&#x2F;刪除的行&#x2F;列號。<br>　　比如IR 2 1 3，要插入列共2筆，分別是第1列和第3列。<br>　　經過這些功能運算後，會有查詢的功能，給予舊表格的元素位置，輸出新表格元素的位置。如果舊的元素已經被刪除，則輸出GONE。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>7 9<br>5<br>DR 2 1 5<br>DC 4 3 6 7 9<br>IC 1 3<br>IR 2 2 4<br>EX 1 2 6 5<br>4<br>4 8<br>5 5<br>7 8<br>6 5<br>0 0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Spreadsheet #1<br>Cell data in (4,8) moved to (4,6)<br>Cell data in (5,5) GONE<br>Cell data in (7,8) moved to (7,6)<br>Cell data in (6,5) moved to (1,2)</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>依照題意模擬刪除、插入、交換的功能，其中插入與刪除需另外配置空間做複製。詳細的解題過程可以參考下方影片，其中插入與刪除只有示範IR與DR，IC與DC的做法一樣而省略。</p>
<p>難度為Medium</p>
<p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/512.c">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/512.c</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 514 Rails</title>
    <url>/2019/09/07/uva-514-rails/</url>
    <content><![CDATA[<p>UVa 514 Rails 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>514 - Rails</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=455">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;category&#x3D;24&amp;page&#x3D;show_problem&amp;problem&#x3D;455</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個數字N，代表有從1、2….、N的火車要進站，火車進站後可以馬上出站，或者先等後面進來的火車出站。<br>　　給一個指定的火車出站排列，檢查這排列是否有可能出現。<br>　　以範例輸入第一筆測資，當N &#x3D; 5，出站排列 1 2 3 4 5 是可行的，所以回傳Yes；但5 4 1 2 3是不可能出現的，所以回傳No。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>5<br>1 2 3 4 5<br>5 4 1 2 3<br>0<br>6<br>6 5 4 3 2 1<br>0<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Yes<br>No  </p>
<p>Yes  </p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>火車進站與出站的動作，可以轉換成Stack的Push與Pop。而經過各種Push&#x2F;Pop的組合，是否符合指定的排列方式。 若以暴力法來計算，可以求出各種組合，但會是O(N!)的計算時間。 比較有效率的方法是，使用另一個Queue來反推Stack的正確性。當有值進入Stack時，Queue的Front與Stack的Top比對，若相等則兩邊不斷Pop，直到Stack為空或不相等。輸入的N筆都檢查過後，當Stack為空時，代表此出站排列是可行的；反之是不可能的。 以下用2個例子解釋，N &#x3D; 3，指定的出站排列分別為1 2 3 與 3 1 2。需宣告一個myQueue和myStack，myQueue為指定的出站排列，myStack為進車站的排列。 當 N &#x3D; 3，出站排列 1 2 3的初始狀況為圖1.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/1-8.png" alt="UVa 514 Rails 圖1"></a></p>
<p>圖1</p>
<p>第1筆值為 1，Push到myStack，而myQueue的Front和myStack的Top相等，於是兩邊都Pop，如圖2.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/2-6.png" alt="UVa 514 Rails 圖2"></a></p>
<p>圖2</p>
<p>第2筆值為 2，Push到myStack，而myQueue的Front和myStack的Top相等，於是兩邊都Pop， 如圖3.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/3-6.png" alt="UVa 514 Rails 圖3"></a></p>
<p>圖3</p>
<p>第3筆值為 3，Push到myStack，而myQueue的Front和myStack的Top相等，於是兩邊都Pop， 如圖4. 最後輸入myStack為空的，所以回傳Yes。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/4-6.png" alt="UVa 514 Rails 圖4"></a></p>
<p>圖4</p>
<p>換另一個輸入，當 N &#x3D; 3，出站排列 3 1 2的初始狀況，如圖5。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/5-5.png" alt="UVa 514 Rails 圖5"></a></p>
<p>圖5</p>
<p>第1筆值為 1，Push到myStack，而myQueue的Front和myStack的Top不相等，於是兩邊不需Pop，如圖6.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-6.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/6-6.png" alt="UVa 514 Rails 圖6"></a></p>
<p>圖6</p>
<p>第2筆值為 2，Push到myStack，而myQueue的Front和myStack的Top不相等，於是兩邊不需Pop，如圖7.</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-5.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/7-4.png" alt="圖7"></a></p>
<p>圖7</p>
<p>第3筆值為 3，Push到myStack，而myQueue的Front和myStack的Top相等，於是兩邊都Pop，如圖8. 最後輸入myStack不是空的，所以回傳No。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/09/8-2.png" alt="圖8"></a></p>
<p>圖8</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/514.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/514.cpp</a></p>
<p>UVa 514 Rails</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 540 Team Queue</title>
    <url>/2019/11/14/uva-540-team-queue/</url>
    <content><![CDATA[<p>UVa 540 Team Queue 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>540 - Team Queue</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=481">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;481</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有t個隊伍，每個隊伍有各自成員，成員都有獨立的編號。他們會各自去排一個大隊伍，若大隊伍裡面沒有同隊伍的人，則該員排在該大隊伍的最後面；否則可以直接插隊，排到大隊伍裡面同隊成員的最後面。<br>排大隊伍會有3種指令：</p>
<ul>
<li>ENQUEUE a：編號a的成員排進大隊伍</li>
<li>DEQUEUE：大隊伍最前面的成員出來，並輸出他的編號</li>
<li>STOP：本次測資結束</li>
</ul>
<p>輸入t &#x3D; 0，代表結束程式</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>2<br>3 101 102 103<br>3 201 202 203<br>ENQUEUE 101<br>ENQUEUE 201<br>ENQUEUE 102<br>ENQUEUE 202<br>ENQUEUE 103<br>ENQUEUE 203<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>STOP<br>2<br>5 259001 259002 259003 259004 259005<br>6 260001 260002 260003 260004 260005 260006<br>ENQUEUE 259001<br>ENQUEUE 260001<br>ENQUEUE 259002<br>ENQUEUE 259003<br>ENQUEUE 259004<br>ENQUEUE 259005<br>DEQUEUE<br>DEQUEUE<br>ENQUEUE 260002<br>ENQUEUE 260003<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>DEQUEUE<br>STOP<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Scenario #1<br>101<br>102<br>103<br>201<br>202<br>203  </p>
<p>Scenario #2<br>259001<br>259002<br>259003<br>259004<br>259005<br>260001  </p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>需使用2種Queue和1個Map：</p>
<ul>
<li>queue<int> big_team：大隊伍的隊伍編號的先後順序</li>
<li>queue<Set> teams[t]：每個隊伍成員的排隊先後順序</li>
<li>player_to_team：每個成員編號對應的隊伍編號</li>
</ul>
<p>　當ENQUEUE a時，先確認是否a的隊伍有無在大隊伍，沒有的話要把a的隊伍加進大隊伍，a也排進自己的隊伍：否則a只排自己的隊伍。<br>　　DEQUEUE時，取出大隊伍的最前面隊伍編號，再由該編號取出該隊伍的最前面成員。如果該隊伍都沒人，則此隊伍編號也從大隊伍取出。</p>
<p>　　以範例測資第1個輸入做講解，一開始Queue的狀況如圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/1-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/1.png" alt="UVa 540 Team Queue 圖1"></a></p>
<p>圖1</p>
<p>接著6次連續的ENQUEUE，如圖2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/2.png" alt="UVa 540 Team Queue 圖2"></a></p>
<p>圖2</p>
<p>接著6次連續的DEQUEUE，如圖3至圖5</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/3-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/3.png" alt="UVa 540 Team Queue 圖3"></a></p>
<p>圖3</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/4.png" alt="圖4"></a></p>
<p>圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/5.png" alt="圖5"></a></p>
<p>圖5</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/540.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/540.cpp</a></p>
<p>UVa 540 Team Queue</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 548 Tree</title>
    <url>/2020/09/18/uva-548-tree/</url>
    <content><![CDATA[<p>UVa 548 Tree 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>548 - Tree</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=0&problem=489">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;category&#x3D;0&amp;problem&#x3D;489</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>給一個樹的中序(Inorder)和後序(Postorder)，求這個樹的葉子到根的值總和是最小的路徑，並輸出那路徑的葉子值。假如有多個路徑的總和最小值相同，則輸出葉子值是最小的。</p>
<p>樹的節點最多會有10000個、最少1個。  
　　</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3 2 1 4 5 7 6 3 1 2 5 6 7 4 7 8 11 3 5 16 12 18 8 3 11 7 16 18 12 5 255 255</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>1 3 255</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>經典的樹狀資料結構問題，首先要將後序與中序的關係釐清，並建立原來的樹，即可用深度搜尋去找路徑。以下用畫圖解釋第1個範例輸入，原始的中序與後序如圖1</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/1.png"></p>
<p>圖1</p>
<p>目前後序的最右邊值，為目前的根，也就是4，對應到中序，可區分左子樹與右子樹的範圍，如圖2。接著我們往左子樹遞迴找子節點。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/2-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/2.png"></a></p>
<p>圖2</p>
<p>4節點的左子樹範圍，2的後序索引值是最大的，所以2是連著4的節點，在中序又可區分左子樹與右子樹的範圍，如圖3。</p>
<p><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/3.png" alt="UVa 548 Tree solution"></p>
<p>圖3</p>
<p>2的左子樹與右子樹再遞迴處理後是3和1，如圖4與圖5。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/4-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/4.png" alt="UVa 548 Tree solution"></a></p>
<p>圖4</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/5-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/5.png" alt="UVa 548 Tree solution"></a></p>
<p>圖5</p>
<p>4節點的右子樹範圍，7的後序索引值是最大的，所以7是連著4的節點，在中序又可區分左子樹與右子樹的範圍，如圖6。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/6-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/6.png" alt="UVa 548 Tree solution"></a></p>
<p>圖6</p>
<p>7的左子樹與右子樹再遞迴處理後是5和6，如圖7與圖8。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/7-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/7.png" alt="UVa 548 Tree solution"></a></p>
<p>圖7</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/8-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/8.png" alt="UVa 548 Tree solution"></a></p>
<p>圖8</p>
<p>最終答案是(4 + 2 + 1)的路徑總和是最小的 ,於是輸出這路徑的節點1。而程式碼使用遞迴的方式解析中序和後序，再用Linked List建立樹。<br>難度為Medium</p>
<h3 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h3><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/548.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/500-599/548.cpp</a></p>
<h2 id="UVa-548-Tree"><a href="#UVa-548-Tree" class="headerlink" title="UVa 548 Tree"></a>UVa 548 Tree</h2>]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 814 The Letter Carrier&#39;s Rounds</title>
    <url>/2019/12/03/uva-814-the-letter-carriers-rounds/</url>
    <content><![CDATA[<p>UVa 814 The Letter Carrier’s Rounds 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>814 - The Letter Carrier’s Rounds</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=755">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;755</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>模擬寄信是否能成功的題目。前面有好幾行MTA，MTA之後第1個是城市名，接著是這城市能收件者的名字。比如範例輸入第1行，London城市的接收者有Fiona Paul Heather Nevil。<br>遇到*米字號，會有1個寄信者和N個收件者，寄信與收件者的Email格式是 name@country 。之後會再遇到*米字號，會有M行的寄信訊息，遇到*米字號為結尾並輸出寄信資訊，其中包含這4種資訊：</p>
<ul>
<li>221：結束寄信</li>
<li>250：只要指定寄信者、指定收件者、完整的寄信訊息，都是250 </li>
<li>354：開始傳寄信訊息</li>
<li>550：當收件者不在MTA的規則裡，則在收件者後方加上550</li>
</ul>
<p> 　 寄信者要依照一開始MTA的收信規則，如果同一個城市都沒有正確的收件者，則那DATA寄信訊息不用輸出。<br>　　寄給各城市可能有多個，輸出是依照收件者的順序。</p>
<p>詳細的輸出格式請參考範例</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>MTA London 4 Fiona Paul Heather Nevil<br>MTA SanFrancisco 3 Mario Luigi Shariff<br>MTA Paris 3 Jacque Suzanne Maurice<br>MTA HongKong 3 Chen Jeng Hee<br>MTA MexicoCity 4 Conrado Estella Eva Raul<br>MTA Cairo 3 Hamdy Tarik Misa<br>*<br>Hamdy@Cairo Conrado@MexicoCity Shariff@SanFrancisco Lisa@MexicoCity<br>*<br>Congratulations on your efforts !!<br>--Hamdy<br>*<br>Fiona@London Chen@HongKong Natasha@Paris<br>*<br>Thanks for the report! –Fiona<br>*<br>*</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Connection between Cairo and MexicoCity<br>HELO Cairo<br>250<br>MAIL FROM:&lt;Hamdy@Cairo&gt;<br>250<br>RCPT TO:&lt;Eminem@MexicoCity&gt;<br>550<br>RCPT TO:&lt;Conrado@MexicoCity&gt;<br>250<br>RCPT TO:&lt;Lisa@MexicoCity&gt;<br>550<br>RCPT TO:&lt;Eva@MexicoCity&gt;<br>250<br>DATA<br>354<br>Congratulations on your efforts !!<br>--Hamdy<br>.<br>250<br>QUIT<br>221<br>Connection between Cairo and SanFrancisco<br>HELO Cairo<br>250<br>MAIL FROM:&lt;Hamdy@Cairo&gt;<br>250<br>RCPT TO:&lt;Shariff@SanFrancisco&gt;<br>250<br>DATA<br>354<br>Congratulations on your efforts !!<br>--Hamdy<br>.<br>250<br>QUIT<br>221<br>Connection between London and HongKong<br>HELO London<br>250<br>MAIL FROM:&lt;Fiona@London&gt;<br>250<br>RCPT TO:&lt;Chen@HongKong&gt;<br>250<br>DATA<br>354<br>Thanks for the report! –Fiona<br>.<br>250<br>QUIT<br>221<br>Connection between London and Paris<br>HELO London<br>250<br>MAIL FROM:&lt;Fiona@London&gt;<br>250<br>RCPT TO:&lt;Natasha@Paris&gt;<br>550<br>QUIT<br>221<br>Connection between London and Paris<br>HELO London<br>250<br>MAIL FROM:&lt;Paul@London&gt;<br>250<br>RCPT TO:&lt;Maurice@Paris&gt;<br>250<br>RCPT TO:&lt;Jacque@Paris&gt;<br>250<br>DATA<br>354<br>Testando essa merda pqp!<br>.<br>250<br>QUIT<br>221<br>Connection between London and MexicoCity<br>HELO London<br>250<br>MAIL FROM:&lt;Paul@London&gt;<br>250<br>RCPT TO:&lt;Eva@MexicoCity&gt;<br>250<br>DATA<br>354<br>Testando essa merda pqp!<br>.<br>250<br>QUIT<br>221<br>Connection between London and Cairo<br>HELO London<br>250<br>MAIL FROM:&lt;Paul@London&gt;<br>250<br>RCPT TO:&lt;Misa@Cairo&gt;<br>250<br>DATA<br>354<br>Testando essa merda pqp!<br>.<br>250<br>QUIT<br>221<br>Connection between London and London<br>HELO London<br>250<br>MAIL FROM:&lt;Paul@London&gt;<br>250<br>RCPT TO:&lt;Fiona@London&gt;<br>250<br>DATA<br>354<br>Testando essa merda pqp!<br>.<br>250<br>QUIT<br>221</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>有4種資料結構需要用到：</p>
<ol>
<li>map&lt;string, set<string>&gt; countryMapFullEmail：MTA規則，城市對應的收件者，Key是城市名，Value是收件者的集合，且接收者可先用name@country的格式存起來，之後比對比較快。</li>
<li>map&lt;string, vector<string>&gt; countryMapRecvName：城市與寄信者的收件者的對應，Key是城市名，Value是收件者的順序</li>
<li>vector<string> countrySeq：收件者城市的順序，需先用前一項countryMapRecvName檢查是否有此城市，沒有的話則加入此順序</li>
<li>set<string> checkRecvRepeat：檢查收件者的重複性，如果有多個重複的收件者，他只能被寄一次</li>
</ol>
<p>依照這些資料結構做模擬即可。</p>
<p>　　（murmur）一開始還用更多結構去串，結果速度跟劉汝佳大師一樣．．．後來改成他寫法比較簡短．．．</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/814.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/814.cpp</a></p>
<p>UVa 814 The Letter Carrier’s Rounds</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 815 Flooded!</title>
    <url>/2019/11/04/uva-815-flooded/</url>
    <content><![CDATA[<p>UVa 815 Flooded! 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>815 - Flooded!</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=756">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;problem&#x3D;756</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>題目一開始看不太懂，由這位blog畫的圖，才知道題意。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2019/11/20180517082335649-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2019/11/20180517082335649.png" alt="UVa 815 Flooded! 圖1"></a></p>
<p>來源：<a href="https://blog.csdn.net/ZscDst/article/details/80342588">https://blog.csdn.net/ZscDst/article/details/80342588</a></p>
<p>　　給m * n區域，每個區域的底面積是 10 * 10正方形 ，且有正數或負數的海拔高度，再給一個水量，求這水量在這區域形成的高度和淹沒區域的比例。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3 3<br>25 37 45<br>51 12 34<br>94 83 27<br>10000<br>0 0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Region 1<br>Water level is 46.67 meters.<br>66.67 percent of the region is under water.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>將每個正方形區域的海拔高度由小到大排序，再算1到N個區域形成的高度會不會小於第N+1個區域的海拔高度。水的高度 &#x3D; (水體積 + (h[0] + h[1] + … + h[N-1]) * 100) &#x2F; (100 * N)。</p>
<p>難度為Easy</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/815.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/815.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Easy</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>UVa 822 Queue and A</title>
    <url>/2020/03/24/uva-822-queue-and-a/</url>
    <content><![CDATA[<p>UVa 822 Queue and A 解題報告</p>
<h4 id="平台："><a href="#平台：" class="headerlink" title="平台："></a>平台：</h4><p>UVa Online Judge</p>
<h4 id="題號："><a href="#題號：" class="headerlink" title="題號："></a>題號：</h4><p>822 - Queue and A</p>
<h4 id="題目連結："><a href="#題目連結：" class="headerlink" title="題目連結："></a>題目連結：</h4><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=0&problem=763">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid&#x3D;8&amp;page&#x3D;show_problem&amp;category&#x3D;0&amp;problem&#x3D;763</a></p>
<h4 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h4><p>有N種客服請求，同1種請求包含獨立ID、數量、第1個請求的起始時間、每個請求要花費處理的時間、請求之間的間隔時間。<br>接著有M位客服，每位客服包含獨立ID、可處理的客服請求種類。請求種類以輸入的ID順序做處理。<br>假如同時有多位客服能處理同1種請求，則以ID最小的優先處理。<br>時間的單位都是分鐘。<br>求全部的客服請求處理完所花費的時間。</p>
<h4 id="範例輸入："><a href="#範例輸入：" class="headerlink" title="範例輸入："></a>範例輸入：</h4><p>3<br>128 20 0 5 10<br>134 25 5 6 7<br>153 30 10 4 5<br>4<br>10 2 128 134<br>11 1 134<br>12 2 128 153<br>13 1 153<br>0</p>
<h4 id="範例輸出："><a href="#範例輸出：" class="headerlink" title="範例輸出："></a>範例輸出：</h4><p>Scenario 1: All requests are serviced within 195 minutes.</p>
<h4 id="解題方法："><a href="#解題方法：" class="headerlink" title="解題方法："></a>解題方法：</h4><p>原先想的方法是從0分鐘開始，不斷累加1分鐘去算當前請求處理的進度，但覺得這會太慢．．．<br>於是看到別人的方法<a href="https://www.cnblogs.com/mofushaohua/p/7789412.html">https://www.cnblogs.com/mofushaohua/p/7789412.html</a>，這方法主要是以客服能或不能處理請求的時間點，做為下次檢查的時間戳記，且幅度較大，比起累加1還要快。詳細邏輯請看程式的註解。  </p>
<p>難度為Medium</p>
<h4 id="GITHUB位置："><a href="#GITHUB位置：" class="headerlink" title="GITHUB位置："></a>GITHUB位置：</h4><p><a href="https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/822.cpp">https://github.com/u8989332/ProblemSolving/blob/master/UVaOnlineJudge/800-899/822.cpp</a></p>
]]></content>
      <categories>
        <category>C#</category>
        <category>ACM</category>
        <category>Level-Medium</category>
        <category>程式解題</category>
        <category>ProgramSolving</category>
        <category>UVa</category>
      </categories>
  </entry>
  <entry>
    <title>Windows Server 2012 R2 64bit 安裝 Oracle 12c database</title>
    <url>/2017/01/08/windows-server-2012-r2-64bit-oracle-12c-database/</url>
    <content><![CDATA[<p>Windows Server 2012 R2 64bit 安裝 Oracle 12c database</p>
<h4 id="1-Oracle-DB簡介"><a href="#1-Oracle-DB簡介" class="headerlink" title="1.Oracle DB簡介"></a>1.Oracle DB簡介</h4><p>這很有名的Relational Model Database - Oracle DB，應該是不用做太多介紹…目前最新版本是12c，從2013年release，詳細release note請參考<a href="http://www.oracle.com/us/corporate/press/1967380">官網</a></p>
<p>接著會介紹安裝Oracle 12c DB的流程</p>
<h4 id="2-安裝Oracle12c"><a href="#2-安裝Oracle12c" class="headerlink" title="2.安裝Oracle12c"></a>2.安裝Oracle12c</h4><p>因為工作上的學習，選擇安裝環境的作業系統是Windows Server 2012 R2 64bit。首先從官網下載Oracle12c，連結：<a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html">http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html</a></p>
<p>　　選擇(12.1.0.2.0) - Enterprise Edition　&#x3D;&gt; Download Microsoft Windows x64 (64-bit)</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/DOWNLOAD2BFROM2BOFFICIAL.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/DOWNLOAD2BFROM2BOFFICIAL.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database 下載"></a></p>
<p>　　記得File 1 和 File 2 都要下載，解壓縮後兩者資料夾要合併才是完整的安裝檔。<br>下載需要登入Oracle帳號密碼，假如不想申請，可以從這<a href="http://bugmenot.com/view/oracle.com">網站</a>找一個帳密登入（小聲）。</p>
<p>　　下載且解壓縮合併後，點擊setup.exe安裝</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/click2Bsetup2Bexe.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/click2Bsetup2Bexe.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database 程式安裝檔"></a></p>
<p>　　接著進入安裝介面，一開始會問是否要用email接收security的資訊，在本篇以及後續測試我取消不使用，但企業環境的DBA還是需要，不然漏掉哪些重要資訊不就慘了。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B2.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database support"></a></p>
<p>選擇Create and configure a database來安裝整套DB</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B3.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B3.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database create"></a></p>
<p>　　本篇沒有那麼深入，所以選擇Desktop Class；若選Server class會有更多進階設定。即使安裝Desktop class之後還是可更改進階設定。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B4.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B4.png"></a></p>
<p>　　在這裡是指定安裝Oracle Home的使用者為何，可以選擇Windows已有的帳號、新增帳號、或者現在登入的帳號。Oracle建議使用DB的windows帳號和Windows administrator帳號分開，可以劃分彼此的權限。而在本篇我是用現在登入的帳號(administrator)作為Oracle DB的使用者。</p>
<p>　　如果要用新增帳號的方式，密碼千萬別用得太簡單，之前測試有使用test，安裝過程會失敗….浪費那安裝的幾分鐘。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B5-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B5-2.png"></a></p>
<p>　　安裝Oracle的路徑、版本、字元集、DB名稱、管理密碼、是否為Container DB。本篇DB的路徑與名稱使用預設的。提醒字元集要選擇AL32UTF8，如果用Windows預設的字元集，DB會只支援存放英文的資料，存入中文就變成亂碼了。為了一勞永逸，直接選AL32UTF8。<br>　　再者，管理orcl DB密碼也一樣別用太簡單，之前用test也是出問題&#x3D; &#x3D;…..，變成無法登入，又浪費了幾分鐘重新安裝。<br>　　而Container DB的觀念，可以先看本篇官網介紹：<a href="https://docs.oracle.com/database/121/CNCPT/cdbovrvw.htm#CNCPT89240">17 Introduction to the Multitenant Architecture</a>，之後有機會再講解。本篇是先啟用，後續有可能會用到。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B6-2.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B6-2.png"></a></p>
<p>　　有個總表，顯示剛剛要建立DB的設定是否正確或還要修改：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B7.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B7.png"></a></p>
<p>　　等待安裝．．．</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B8.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B8.png"></a></p>
<p>　　若過程中沒任何意外的話，最後會有DB建立完成的訊息：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B9.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B9.png"></a></p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B10.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B10.png"></a></p>
<p>　　打開Windows的Services，檢查是否有Oracle DB相關的service有安裝：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B11.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B11.png"></a></p>
<p>　　再檢查Oracle DB的目錄下，是否有連線的資訊檔tnsnames.ora，之後要連其他外部的DB，需要編輯這個檔案。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B12.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/Image2B12.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database ora file"></a></p>
<p>　　接著開啟Windows的Apps介面，會有許多Oracle的應用程式：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/windows2Bapps.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/windows2Bapps.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database programs"></a></p>
<p>　　測試Oracle DB是否能連線，點擊SQL Developer，在Connections右鍵選擇New Connection…</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/new2Bconnection.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/new2Bconnection.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database new coneection"></a></p>
<p>　　會跳出新增連線的視窗，要輸入連線名稱、帳號密碼、ROLE、SID等。Oracle預設的帳號是SYS(沒大小寫之分)，密碼則是灌Oracle時設定的管理密碼。因為SYS帳號屬於管理者，所以Role要選擇SYSDBA。在SID或SERVICE NAME輸入orcl(也沒大小寫之分)，代表要連的Oracle DB名稱。<br>　　SID和SERVICE NAME的差異，SID是instance的唯一名稱，用在該系統環境的管理；SERVICE NAME是別名，可提供客戶端連線使用。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/conneciton2Bsetting.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/conneciton2Bsetting.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database connection"></a></p>
<p>　　可以勾選Save Password ，再按下Save按鈕， 將連線資訊儲存，下次登入不用再key連線資訊。點下Connect按鈕，沒意外的話，左方列表展開會有Tables、Views等資料，代表orcl DB可正常連進去。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2017/01/connection2Bsuccess.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2017/01/connection2Bsuccess.png" alt="Windows Server 2012 R2 64bit 安裝 Oracle 12c database table"></a></p>
<h4 id="3-結論"><a href="#3-結論" class="headerlink" title="3.結論"></a>3.結論</h4><p>以前的工作都是用PL&#x2F;SQL連到DBA提供的遠端DB，做基本的CRUD運算。在目前的工作，第一次以DBA的身分玩Oracle DB，光是安裝過程中就有一堆坑．．．之後還會有開發上的介紹。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><p><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/12c/r1/Windows_DB_Install_OBE/Installing_Oracle_Db12c_Windows.html">Installing Oracle Database 12c on Windows</a></p>
<p>Windows Server 2012 R2 64bit 安裝 Oracle 12c database</p>
]]></content>
      <categories>
        <category>Database</category>
        <category>Oracle</category>
      </categories>
  </entry>
  <entry>
    <title>[WPF] Instagram Clone Layout</title>
    <url>/2021/01/12/wpf-instagram-clone-layout/</url>
    <content><![CDATA[<p>        嘗試用.NET 5開發WPF專案，模仿Instagram Web (PC瀏覽)的版面，沒有任何真正Instagram的功能。程式碼放在<a href="https://github.com/u8989332/Instagram_Layout_Clone_WPF">我的Github</a>，歡迎參觀～</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2021/01/Result.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2021/01/Result.png"></a></p>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
  </entry>
  <entry>
    <title>Zookeeper 3.4.6 安裝</title>
    <url>/2015/10/18/zookeeper-3-4-6/</url>
    <content><![CDATA[<p>Zookeeper 3.4.6 安裝</p>
<h4 id="1-Zookeeper介紹"><a href="#1-Zookeeper介紹" class="headerlink" title="1.Zookeeper介紹"></a>1.Zookeeper介紹</h4><p>Zookeeper是一種能協調分佈式節點運算的系統，當有節點loading過多或者掛掉，Zookeeper會做平衡的機制，使整體系統能保持穩定。在Hadoop的環境最常使用Zookeeper的有MapReduce、HBase等，而本篇安裝Zookeeper是為了之後安裝HBase能正常，不會有太詳細的使用方式。</p>
<h4 id="2-安裝Zookeeper"><a href="#2-安裝Zookeeper" class="headerlink" title="2.安裝Zookeeper"></a>2.安裝Zookeeper</h4><p>Zookeeper比較特別，他不用帶入Hadoop的環境參數，安裝的方式較容易。每一台機器需要安裝Zookeeper從Apache官網下載，最新穩定版本為3.6.4：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://apache.stu.edu.tw/zookeeper/stable/zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure>

<p>　　解壓縮後，進入到其conf目錄下，將zoo_sample.cfg複製成zoo.cfg：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p>　　編輯zoo.cfg，將dataDir路徑修改，且在最下方增加server列表，其餘變數不用改：</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dataDir</span>=/home/test/zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">6</span>/data #zookeeper資料會存放在此目錄</span><br><span class="line"></span><br><span class="line"><span class="comment">#最下方新增server的資料，其格式為server.A=B:C:D，A為每台機器的ID；B為每台機器的IP</span></span><br><span class="line"><span class="comment">#：C為各節點之間傳資料的port；D為Leader掛掉時做重新選舉的port</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">1</span>=<span class="number">192.168.56.101:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">2</span>=<span class="number">192.168.56.102:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">3</span>=<span class="number">192.168.56.103:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">4</span>=<span class="number">192.168.56.104:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">5</span>=<span class="number">192.168.56.105:2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure>

<p>　　在各台機器建立data資料夾，並且增加id資料：</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dataDir</span>=/home/test/zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">6</span>/data #zookeeper資料會存放在此目錄</span><br><span class="line"></span><br><span class="line"><span class="comment">#最下方新增server的資料，格式為server.A=B:C:D，其中A為每台機器的ID；B為每台機器的IP</span></span><br><span class="line"><span class="comment">#：C為各節點之間傳資料的port；D為Leader掛掉時做重新選舉的port</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">1</span>=<span class="number">192.168.56.101:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">2</span>=<span class="number">192.168.56.102:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">3</span>=<span class="number">192.168.56.103:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">4</span>=<span class="number">192.168.56.104:2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">5</span>=<span class="number">192.168.56.105:2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure>

<p>之後在每台機器新增data目錄與myid資料：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/test/zookeeper-3.4.6/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#在hadoop01的myid內容是1，其他hadoop02~hadoop05的myid內容分別為2、3、4、5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /home/test/zookeeper-3.4.6/data/myid</span><br></pre></td></tr></table></figure>

<p>　　關掉防火牆，沒關會使Zookeeper之間無法連線：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ufw stop <span class="comment">#ubuntu是用ufw，centos是iptables</span></span><br></pre></td></tr></table></figure>

<p>　　新增Zookeeper的bin路徑：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/test/zookeeper-3.4.6/bin</span><br></pre></td></tr></table></figure>

<p>　　每一台機器啟動zookeeper service：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>　　用jps查看，會多了新的服務QuorumPeerMain，代表有啟動成功，如下圖所示：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/25E52595259F25E5258B2595ZKSERVER-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/25E52595259F25E5258B2595ZKSERVER.png" alt="Zookeeper 3.4.6 服務"></a></p>
<p>　　連到每台機器，看是否各Zookeeper能傳遞&#x2F;接收資料，如下圖所示，hadoop01對hadoop02請求：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2015/10/ECHO25E825AB258B25E625B12582-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2015/10/ECHO25E825AB258B25E625B12582.png" alt="Zookeeper 3.4.6 request"></a></p>
<h4 id="3-結論"><a href="#3-結論" class="headerlink" title="3.結論"></a>3.結論</h4><p>　　Zookeeper在安裝上很單純，沒有很複雜的問題～接著下一篇會介紹安裝HBase。</p>
<h4 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h4><ol>
<li><a href="https://zookeeper.apache.org/">Zookeeper官方</a></li>
<li><a href="http://songlee24.github.io/2015/07/20/hadoop-hbase-zookeeper-distributed-mode/">Song Lee blog：Hadoop+HBase+ZooKeeper分布式集群环境搭建</a></li>
<li> <a href="http://www.cnblogs.com/dennisit/p/4141342.html">dennisit blog：初始zookeeper与集群搭建实例</a></li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Zookeeper</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (19) 建立購物車系統 - 2</title>
    <url>/2020/10/04/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-10/</url>
    <content><![CDATA[<h1 id="1-建立共通的Infrastructure"><a href="#1-建立共通的Infrastructure" class="headerlink" title="1. 建立共通的Infrastructure"></a>1. 建立共通的Infrastructure</h1><h2 id="1-1-新增InternalServerErrorObjectResult類別"><a href="#1-1-新增InternalServerErrorObjectResult類別" class="headerlink" title="1.1 新增InternalServerErrorObjectResult類別"></a>1.1 新增InternalServerErrorObjectResult類別</h2><p>在CartApi專案新增資料夾Infrastructure&#x2F;ActionResults，並新增InternalServerErrorObjectResult類別且繼承ObjectResult，此類別是用在統一回傳Status Code 500：</p>
<pre><code>    `  
</code></pre>
<p>using Microsoft.AspNetCore.Http;<br>using Microsoft.AspNetCore.Mvc;  </p>
<p>namespace CartApi.Infrastructure.ActionResults<br>{<br>    public class InternalServerErrorObjectResult : ObjectResult<br>    {<br>        public InternalServerErrorObjectResult(object error) : base(error)<br>        {<br>            StatusCode &#x3D; StatusCodes.Status500InternalServerError;<br>        }<br>    }<br>}<br>&#96;  </p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-2-新增CartDomainException類別"><a href="#1-2-新增CartDomainException類別" class="headerlink" title="1.2 新增CartDomainException類別"></a>1.2 新增CartDomainException類別</h2><p>在CartApi專案新增資料夾Infrastructure&#x2F;Exceptions，並新增CartDomainException類別且繼承Exception，當一些購物車服務有出問題，可以拋此異常：</p>
<pre><code>  `  
</code></pre>
<p>using System;  </p>
<p>namespace CartApi.Infrastructure.Exceptions<br>{<br>    public class CartDomainException : Exception<br>    {<br>        public CartDomainException()<br>        {<br>        }  </p>
<pre><code>    public CartDomainException(string message) : base(message)  
    &#123;  

    &#125;  

    public CartDomainException(string message, Exception innerException) : base(message, innerException)  
    &#123;  

    &#125;  
&#125;  
</code></pre>
<p>}<br>&#96;  </p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h2 id="1-3-新增HttpGlobalExceptionFilter類別"><a href="#1-3-新增HttpGlobalExceptionFilter類別" class="headerlink" title="1.3 新增HttpGlobalExceptionFilter類別"></a>1.3 新增HttpGlobalExceptionFilter類別</h2><p>在CartApi專案新增資料夾Infrastructure&#x2F;Filters，並新增HttpGlobalExceptionFilter類別且實作IExceptionFilter，當Controller內部有功能異常時，依此Filter客製化要回傳的HTTP內容：</p>
<pre><code>  `  
</code></pre>
<p>using CartApi.Infrastructure.ActionResults;<br>using CartApi.Infrastructure.Exceptions;<br>using Microsoft.AspNetCore.Hosting;<br>using Microsoft.AspNetCore.Mvc;<br>using Microsoft.AspNetCore.Mvc.Filters;<br>using Microsoft.Extensions.Hosting;<br>using Microsoft.Extensions.Logging;<br>using System.Net;  </p>
<p>namespace CartApi.Infrastructure.Filters<br>{<br>    public class HttpGlobalExceptionFilter : IExceptionFilter<br>    {<br>        private readonly IWebHostEnvironment env;<br>        private readonly ILogger<HttpGlobalExceptionFilter> logger;  </p>
<pre><code>    public HttpGlobalExceptionFilter(IWebHostEnvironment env, ILogger&lt;HttpGlobalExceptionFilter&gt; logger)  
    &#123;  
        this.env = env;  
        this.logger = logger;  
    &#125;  

    public void OnException(ExceptionContext context)  
    &#123;  
        logger.LogError(new EventId(context.Exception.HResult),  
            context.Exception,  
            context.Exception.Message);  

        if(context.Exception.GetType() == typeof(CartDomainException))  
        &#123;  
            var json = new JsonErrorResponse  
            &#123;  
                Messages = new[] &#123; context.Exception.Message &#125;  
            &#125;;  

            context.Result = new BadRequestObjectResult(json);  
            context.HttpContext.Response.StatusCode = (int)HttpStatusCode.BadRequest;  
        &#125;  
        else  
        &#123;  
            var json = new JsonErrorResponse  
            &#123;  
                Messages = new[] &#123; &quot;An error occured. Try it again&quot; &#125;  
            &#125;;  

            if (env.IsDevelopment())  
            &#123;  
                json.DeveloperMessage = context.Exception;  
            &#125;  

            context.Result = new InternalServerErrorObjectResult(json);  
            context.HttpContext.Response.StatusCode = (int)HttpStatusCode.InternalServerError;  
        &#125;  
        context.ExceptionHandled = true;  
    &#125;  

    private class JsonErrorResponse  
    &#123;  
        public string[] Messages &#123; get; set; &#125;  
        public object DeveloperMessage &#123; get; set; &#125;  
    &#125;  
&#125;  
</code></pre>
<p>}  </p>
<p>&#96;  </p>
<h1 id="2-修改appSettings-json"><a href="#2-修改appSettings-json" class="headerlink" title="2. 修改appSettings.json"></a>2. 修改appSettings.json</h1><p>在appSettings.json，新增Redis的連線資訊，由於本機有安裝過的Redis，於是配置它為6377 port，對應到Docker的配置仍是預設的6379 port：</p>
<ul>
<li>“ConnectionString”: “127.0.0.1:6377”,</li>
</ul>
<h1 id="3-新增CartSettings類別"><a href="#3-新增CartSettings類別" class="headerlink" title="3. 新增CartSettings類別"></a>3. 新增CartSettings類別</h1><p>在CartApi根目錄新增CartSettings.cs類別，只有一個ConnectionString屬性，是用來讀設定檔：</p>
<pre><code>  `  
</code></pre>
<p>namespace CartApi<br>{<br>    public class CartSettings<br>    {<br>        public string ConnectionString { get; set; }<br>    }<br>}  </p>
<p>&#96;  </p>
<p>-—————————————————-</p>
<p>之後再來寫Controller和註冊Startup的方法</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (18) 建立購物車系統 - 1</title>
    <url>/2020/10/03/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-11/</url>
    <content><![CDATA[<h1 id="1-建立購物車服務的Api專案"><a href="#1-建立購物車服務的Api專案" class="headerlink" title="1. 建立購物車服務的Api專案"></a>1. 建立購物車服務的Api專案</h1><p>開啟VS，在RPGShop方案的src&#x2F;Services的方案資料夾，加入新的ASP.NET Core專案，專案名稱為CartApi，選擇專案類型Api，不要用Docker和HTTPS。</p>
<h1 id="2-安裝Redis"><a href="#2-安裝Redis" class="headerlink" title="2. 安裝Redis"></a>2. 安裝Redis</h1><p>在CartApi專案右鍵&#x3D;&gt;選擇[管理NuGet套件]，安裝Redis的相關套件，包含這項：</p>
<ul>
<li>StackExchange.Redis, 版本 2.1.58</li>
</ul>
<h1 id="3-為何要用Redis"><a href="#3-為何要用Redis" class="headerlink" title="3. 為何要用Redis?"></a>3. 為何要用Redis?</h1><p>傳統購物網站大部分使用Session紀錄目前連線者的購物車內容，但缺點有幾項：</p>
<ol>
<li>預設Session在購物網站的伺服器，使用者越多則記憶體消耗越大</li>
<li>Session只能記住目前連線的資料，如果換別的電腦或瀏覽器登入，則是不一樣的資料</li>
</ol>
<p>採用Redis的話，可以將Redis架在別的伺服器，且能依照Client的Id存取資料</p>
<h1 id="4-建立購物車的模型"><a href="#4-建立購物車的模型" class="headerlink" title="4. 建立購物車的模型"></a>4. 建立購物車的模型</h1><p>新增Models資料夾並新增Cart和CartItem兩個類別，主要紀錄購物車的內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections.Generic;namespace CartApi.Models&#123;    public class Cart    &#123;        public string BuyerId &#123; get; set; &#125;        public List&lt;CartItem&gt; Items &#123; get; set; &#125;        public Cart(string cartId)        &#123;            BuyerId = cartId;            Items = new List&lt;CartItem&gt;();        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace CartApi.Models&#123;    public class CartItem    &#123;        public string Id &#123; get; set; &#125;        public string ProductId &#123; get; set; &#125;        public string ProductName &#123; get; set; &#125;        public decimal UnitPrice &#123; get; set; &#125;        public decimal OldUnitPrice &#123; get; set; &#125;        public int Quantity &#123; get; set; &#125;        public string PictureUrl &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-建立購物車的Repository"><a href="#5-建立購物車的Repository" class="headerlink" title="5. 建立購物車的Repository"></a>5. 建立購物車的Repository</h1><p>　　在Models資料夾新增ICartRepository介面和CartRepository，包含購物車內容的更新、刪除、讀取和取得所有使用者的Id列表。實作類別需注入Redis的物件，並針對Client的Id作為Redis的Key，來存取購物車的資料。</p>
<p>.</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections.Generic;using System.Threading.Tasks;namespace CartApi.Models&#123;    public interface ICartRepository    &#123;        Task&lt;Cart&gt; GetCartAsync(string cartId);        IEnumerable&lt;string&gt; GetUsers();        Task&lt;Cart&gt; UpdateCartAsync(Cart basket);        Task&lt;bool&gt; DeleteCartAsync(string id);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.Extensions.Logging;using Newtonsoft.Json;using StackExchange.Redis;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;namespace CartApi.Models&#123;    public class CartRepository : ICartRepository    &#123;        private readonly ILogger&lt;CartRepository&gt; _logger;        private readonly ConnectionMultiplexer _redis;        private readonly IDatabase _database;        public CartRepository(ILogger&lt;CartRepository&gt; logger, ConnectionMultiplexer redis)        &#123;            _logger = logger;            _redis = redis;            _database = redis.GetDatabase();        &#125;        public async Task&lt;Cart&gt; GetCartAsync(string cartId)        &#123;            var data = await _database.StringGetAsync(cartId);            if (data.IsNullOrEmpty)            &#123;                return null;            &#125;            return JsonConvert.DeserializeObject&lt;Cart&gt;(data);        &#125;        public IEnumerable&lt;string&gt; GetUsers()        &#123;            var server = GetServers();            var data = server.Keys();            return data?.Select(k =&gt; k.ToString());        &#125;        private IServer GetServers()        &#123;            var endpoint = _redis.GetEndPoints();            return _redis.GetServer(endpoint.First());        &#125;        public async Task&lt;Cart&gt; UpdateCartAsync(Cart basket)        &#123;            var created = await _database.StringSetAsync(basket.BuyerId, JsonConvert.SerializeObject(basket));            if (!created)            &#123;                _logger.LogInformation(&quot;Problem occur persisting the item&quot;);                return null;            &#125;            return await GetCartAsync(basket.BuyerId);        &#125;        public async Task&lt;bool&gt; DeleteCartAsync(string id)        &#123;            return await _database.KeyDeleteAsync(id);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (17) 建立會員系統 - 6</title>
    <url>/2020/10/02/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-12/</url>
    <content><![CDATA[<h1 id="1-建立Dockerfile"><a href="#1-建立Dockerfile" class="headerlink" title="1. 建立Dockerfile"></a>1. 建立Dockerfile</h1><p>　　在AuthApi專案右鍵&#x3D;&gt;加入&#x3D;&gt;Dokcer支援，選擇目標平台Linux，將會在根目錄新增Dockerfile檔案，但因為專案目錄設計方式，會讓VS產生錯誤的連結，所以需要再手動修改，變成下方的內容。其內容主要功能是在Docker容器內載入NET Core SDK編譯我們的程式碼，將編譯後的目錄檔案複製到Runtime環境的&#x2F;app目錄，再用NET Core Runtime執行商品列表的網頁系統。</p>
<p>　　另外AuthApi要啟用Https，使用dotnet core sdk產生HTTPS的證書和密碼，連同放到編譯後的目錄。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS buildWORKDIR /codeEXPOSE 80EXPOSE 443COPY . .RUN dotnet restoreRUN dotnet publish -o /out/ -c ReleaseRUN dotnet dev-certs https --cleanRUN dotnet dev-certs https -ep ./AuthApi.pfx  -p crypticpasswordRUN mv ./AuthApi.pfx /outFROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseCOPY --from=build /out /app/WORKDIR /appENTRYPOINT [&quot;dotnet&quot;, &quot;AuthApi.dll&quot;]</span><br></pre></td></tr></table></figure>

<h1 id="2-修改dokcer-compose-yml"><a href="#2-修改dokcer-compose-yml" class="headerlink" title="2. 修改dokcer-compose.yml"></a>2. 修改dokcer-compose.yml</h1><p>在docker-compose.yml加入AuthApi的container，另外指定HTTPS的證書和密碼，如下方的yml。主要的參數包含：</p>
<ul>
<li>build的dockerfile：Dockerfile的檔名</li>
<li>build的context：會員系統的Dockerfile所在的目錄</li>
<li>environment：這些參數將會覆蓋appSettings.json的內容，包含WebMvc的網頁Url、資料庫連線。</li>
<li>ports：將此Api的80&#x2F;443 port對應為本機的7100&#x2F;7101</li>
<li>depends_on：需要先等資料庫的容器啟動完，才輪到此Api啟動容器</li>
<li>networks：設計在frontend&#x2F;backend的網路區域</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.4&quot;networks:   frontend:   backend:   services:   webmvc:      build:         context: .srcPresentationWebMvc         dockerfile: Dockerfile      environment:         - CatalogUrl=http://catalog         - IdentityUrl=https://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7101         - CallBackUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500/      container_name: rpgwebmvc      ports:         - &quot;7500:80&quot;      networks:         - frontend      depends_on:         - catalog         - auth   catalog:      build:         context: .srcServicesCatalogApi         dockerfile: Dockerfile      image: rpgshop/catalog      environment:         - DatabaseServer=mssqlserver         - DatabaseName=CatalogDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000      container_name: rpgcatalogapi      ports:         - &quot;7000:80&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   auth:      build:         context: .srcServicesAuthApi         dockerfile: Dockerfile      image: rpgshop/auth      environment:         - MvcClient=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500         - DatabaseServer=mssqlserver         - DatabaseName=AuthDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000         - ASPNETCORE_URLS=http://+:80;https://+:443         - ASPNETCORE_Kestrel__Certificates__Default__Password=crypticpassword         - ASPNETCORE_Kestrel__Certificates__Default__Path=./AuthApi.pfx      container_name: rpgauthapi      ports:         - &quot;7100:80&quot;         - &quot;7101:443&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   mssqlserver:      image: &quot;microsoft/mssql-server-linux:latest&quot;      ports:         - &quot;1445:1433&quot;      container_name: rpgmssqlcontainer      environment:         - ACCEPT_EULA=Y         - SA_PASSWORD=JustTest!      networks:         - backend</span><br></pre></td></tr></table></figure>

<h1 id="3-用cmd執行docker-compose"><a href="#3-用cmd執行docker-compose" class="headerlink" title="3. 用cmd執行docker-compose"></a>3. 用cmd執行docker-compose</h1><p>用cmd在docker-compose.yml所在位置輸入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose builddocker-compose up</span><br></pre></td></tr></table></figure>

<p>執行完後，在瀏覽器輸入<a href="http://docker.for.win.localhost:7500/">http://docker.for.win.localhost:7500</a> ，按了右上角登入，跳轉到AuthApi的登入頁面，輸入完再跳回WebMvc的Catalog&#x2F;About頁面，如圖1至圖3。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bhome2Bpage-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bhome2Bpage.png"></a></p>
<p>圖1  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Blogin-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Blogin.png"></a></p>
<p>圖2  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bok2Blogin-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bok2Blogin.png"></a></p>
<p>圖3  </p>
<p>-————————————————————-</p>
<p>這一系列的專案將開在這Github：<a href="https://github.com/u8989332/RPGShopOnContainers">RPGShopOnContainers</a>，有需要的人可自行pull &#x2F; download～</p>
<p>下一篇將開始寫加入購物車的功能。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (16) 建立會員系統 - 5</title>
    <url>/2020/10/02/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-13/</url>
    <content><![CDATA[<h1 id="1-修改登入後的顯示"><a href="#1-修改登入後的顯示" class="headerlink" title="1. 修改登入後的顯示"></a>1. 修改登入後的顯示</h1><p>在專案WebMvc的Views&#x2F;Shaered修改_Layout.cshtml和新增_LoginPartial.cshtml，判斷是否登入而顯示名字或者Logout按鈕。</p>
<p>_Layout.cshtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;title&gt;@ViewData[&quot;Title&quot;] - WebMvc&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;~/css/site.css&quot; /&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; /&gt;    &lt;link href=&quot;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot; /&gt;    &lt;link href=&quot;https://fonts.googleapis.com/css?family=Press+Start+2P&quot;          rel=&quot;stylesheet&quot; /&gt;    &lt;link href=&quot;https://unpkg.com/nes.css@2.3.0/css/nes.min.css&quot;          rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;        &lt;div class=&quot;container-fluid&quot;&gt;            &lt;!-- Brand and toggle get grouped for better mobile display --&gt;            &lt;div class=&quot;navbar-header&quot;&gt;                &lt;button type=&quot;button&quot;                        class=&quot;navbar-toggle&quot;                        data-toggle=&quot;collapse&quot;                        data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;                    &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                &lt;/button&gt;                &lt;a asp-area=&quot;&quot; asp-controller=&quot;Catalog&quot; asp-action=&quot;Index&quot;&gt;                    &lt;strong&gt;RPG&lt;/strong&gt; Shop                &lt;/a&gt;            &lt;/div&gt;            &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;                &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;                    @await Html.PartialAsync(&quot;_LoginPartial&quot;)                &lt;/ul&gt;            &lt;/div&gt;            &lt;!-- /.navbar-collapse --&gt;        &lt;/div&gt;        &lt;!-- /.container-fluid --&gt;    &lt;/nav&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;main role=&quot;main&quot; class=&quot;pb-3&quot;&gt;            @RenderBody()        &lt;/main&gt;    &lt;/div&gt;    &lt;script src=&quot;~/lib/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;    @RenderSection(&quot;Scripts&quot;, required: false)&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>_LoginPartial.cshtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@using Microsoft.AspNetCore.Identity@if (User?.Identity?.IsAuthenticated == true)&#123;    &lt;li&gt;        @User.FindFirst(x =&gt; x.Type == &quot;preferred_username&quot;).Value    &lt;/li&gt;    &lt;li class=&quot;pull-right&quot;&gt;        &lt;form asp-area=&quot;&quot; asp-controller=&quot;Account&quot; asp-action=&quot;SignOut&quot; method=&quot;post&quot; id=&quot;logoutForm&quot;&gt;            &lt;a href=&quot;javascript:document.getElementById(&#x27;logoutForm&#x27;).submit()&quot;&gt;                Log Out            &lt;/a&gt;        &lt;/form&gt;    &lt;/li&gt;&#125;else&#123;    &lt;li&gt;        &lt;a asp-area=&quot;&quot; asp-controller=&quot;Account&quot; asp-action=&quot;SignIn&quot;&gt;            Login        &lt;/a&gt;    &lt;/li&gt;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-新增AccountController"><a href="#2-新增AccountController" class="headerlink" title="2. 新增AccountController"></a>2. 新增AccountController</h1><p>在專案WebMvc的Controllers新增AccountController，包含登入和登出的功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usingusing Microsoft.AspNetCore.Authentication;using Microsoft.AspNetCore.Authentication.Cookies;using Microsoft.AspNetCore.Authentication.OpenIdConnect;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;using System.Diagnostics;using System.Security.Claims;using System.Threading.Tasks;namespace WebMvc.Controllers&#123;    [Authorize]    public class AccountController : Controller    &#123;        public async Task&lt;IActionResult&gt; SignIn(string returnUrl)        &#123;            var user = User as ClaimsPrincipal;            var token = await HttpContext.GetTokenAsync(&quot;access_token&quot;);            var idToken = await HttpContext.GetTokenAsync(&quot;id_token&quot;);            foreach(var claim in user.Claims)            &#123;                Debug.WriteLine($&quot;Claim Type: &#123;claim.Type&#125; - Claim Value : &#123;claim.Value&#125;&quot;);            &#125;            if(token != null)            &#123;                ViewData[&quot;access_token&quot;] = token;            &#125;            if(idToken != null)            &#123;                ViewData[&quot;id_token&quot;] = idToken;            &#125;            return RedirectToAction(nameof(CatalogController.About), &quot;Catalog&quot;);        &#125;        public async Task&lt;IActionResult&gt; Signout()        &#123;            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);            await HttpContext.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme);            var homeUrl = Url.Action(nameof(CatalogController.Index), &quot;Catalog&quot;);            return new SignOutResult(OpenIdConnectDefaults.AuthenticationScheme, new AuthenticationProperties &#123; RedirectUri = homeUrl &#125;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>-————————————</p>
<p>放假的進度比較慢，預計明天能寫Docker的版本QQ</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (15) 建立會員系統 - 4</title>
    <url>/2020/09/30/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-14/</url>
    <content><![CDATA[<h1 id="1-修改WebMvc的Startup-cs"><a href="#1-修改WebMvc的Startup-cs" class="headerlink" title="1. 修改WebMvc的Startup.cs"></a>1. 修改WebMvc的Startup.cs</h1><p>在專案WebMvc的Startup.cs，加上OIDC認證機制，並針對Cookie的Samesite改成Lax。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authentication.Cookies;using Microsoft.AspNetCore.Authentication.OpenIdConnect;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using System.IdentityModel.Tokens.Jwt;using System.Net.Http;using WebMvc.Infrastructure;using WebMvc.Services;namespace WebMvc&#123;    public class Startup    &#123;        public Startup(IConfiguration configuration)        &#123;            Configuration = configuration;        &#125;        public IConfiguration Configuration &#123; get; &#125;        // This method gets called by the runtime. Use this method to add services to the container.        public void ConfigureServices(IServiceCollection services)        &#123;            services.Configure&lt;AppSettings&gt;(Configuration);            services.AddSingleton&lt;IHttpClient, CustomHttpClient&gt;();            services.AddTransient&lt;ICatalogService, CatalogService&gt;();            services.AddControllersWithViews();            JwtSecurityTokenHandler.DefaultMapInboundClaims = false;            var identityUrl = Configuration.GetValue&lt;string&gt;(&quot;IdentityUrl&quot;);            var callBackUrl = Configuration.GetValue&lt;string&gt;(&quot;CallBackUrl&quot;);            services.AddAuthentication(options =&gt;            &#123;                options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;                options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;            &#125;)            .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme)            .AddOpenIdConnect(OpenIdConnectDefaults.AuthenticationScheme, options =&gt;            &#123;                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;                options.Authority = identityUrl;                options.SignedOutRedirectUri = callBackUrl;                options.ClientId = &quot;mvc&quot;;                options.ClientSecret = &quot;secret&quot;;                options.ResponseType = &quot;code id_token&quot;;                options.SaveTokens = true;                options.GetClaimsFromUserInfoEndpoint = true;                options.RequireHttpsMetadata = false;                options.Scope.Add(&quot;openid&quot;);                options.Scope.Add(&quot;profile&quot;);                options.Scope.Add(&quot;offline_access&quot;);                options.NonceCookie.SameSite = SameSiteMode.Lax;                options.CorrelationCookie.SameSite = SameSiteMode.Lax;                options.BackchannelHttpHandler = new HttpClientHandler()                &#123;                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator                &#125;;            &#125;);        &#125;        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();            &#125;            else            &#123;                app.UseExceptionHandler(&quot;/Home/Error&quot;);            &#125;            app.UseStaticFiles();            app.UseRouting();            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllerRoute(                    name: &quot;default&quot;,                    pattern: &quot;&#123;controller=Catalog&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);            &#125;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-修改WebMvc的appSettings-json"><a href="#2-修改WebMvc的appSettings-json" class="headerlink" title="2. 修改WebMvc的appSettings.json"></a>2. 修改WebMvc的appSettings.json</h1><p>增加要連OIDC驗證伺服器的URL和自己oidc callback的URL:</p>
<p>  “IdentityUrl”: “<a href="https://localhost:44399/">https://localhost:44399</a>“,</p>
<p>  “CallBackUrl”: “<a href="http://localhost:13914/">http://localhost:13914/</a>“,</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="3-修改AuthApi的appSettings-json"><a href="#3-修改AuthApi的appSettings-json" class="headerlink" title="3. 修改AuthApi的appSettings.json"></a>3. 修改AuthApi的appSettings.json</h1><p>增加WebMvc的URL, 授權才能認得這個伺服器:</p>
<p>  “MvcClient”: “<a href="http://localhost:4708/">http://localhost:4708</a>“,</p>
<h1 id="4-新增測試的頁面"><a href="#4-新增測試的頁面" class="headerlink" title="4. 新增測試的頁面"></a>4. 新增測試的頁面</h1><p>在WebMvc的Views&#x2F;Catalog新增About.cshtml, 並在CatalogController新增一個About Action，只回傳這個About.cshtml。這頁面只顯示Claim和Token的資訊，而這只是測試用，請勿真的線上顯示…..</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc.Controllers&#123;    public class CatalogController : Controller    &#123;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// other code ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Authorize]        public IActionResult About()        &#123;            return View();        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@using Microsoft.AspNetCore.Authentication&lt;h2&gt;Access Token&lt;/h2&gt;&lt;dl&gt;    @foreach (var claim in User.Claims)    &#123;        &lt;dt&gt;@claim.Type&lt;/dt&gt;        &lt;dd&gt;@claim.Value&lt;/dd&gt;    &#125;    &lt;dt&gt;access token&lt;/dt&gt;    &lt;dd&gt;@await ViewContext.HttpContext.GetTokenAsync(&quot;access_token&quot;)&lt;/dd&gt;    &lt;dt&gt;refresh token&lt;/dt&gt;    &lt;dd&gt;@await ViewContext.HttpContext.GetTokenAsync(&quot;refresh_token&quot;)&lt;/dd&gt;&lt;/dl&gt;</span><br></pre></td></tr></table></figure>

<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="5-修改AuthApi的Startup-cs"><a href="#5-修改AuthApi的Startup-cs" class="headerlink" title="5. 修改AuthApi的Startup.cs"></a>5. 修改AuthApi的Startup.cs</h1><p>　　由於Cookie的Samesite的機制，需再調整為Lax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();                app.UseDatabaseErrorPage();            &#125;            else            &#123;                app.UseExceptionHandler(&quot;/Home/Error&quot;);                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                app.UseHsts();            &#125;            app.UseHttpsRedirection();            app.UseStaticFiles();            app.UseCookiePolicy(new CookiePolicyOptions()            &#123;                MinimumSameSitePolicy = SameSiteMode.Lax            &#125;);            app.UseRouting();            app.UseIdentityServer();            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllerRoute(                    name: &quot;default&quot;,                    pattern: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);                endpoints.MapRazorPages();            &#125;);        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="6-Debug執行程式"><a href="#6-Debug執行程式" class="headerlink" title="6. Debug執行程式"></a>6. Debug執行程式</h1><p>使用VS執行AuthApi + WebMvc + CatalogApi，在WebMvc的網站進入Catalog&#x2F;About，會先跳轉到AuthApi登入，成功的話會返回WebMvc的Catalog&#x2F;About，並顯示Claim和Token，如圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/webmvc2Blogin2Babout2Btoken-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/webmvc2Blogin2Babout2Btoken.png"></a></p>
<p>圖1</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (14) 建立會員系統 - 3</title>
    <url>/2020/09/29/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-15/</url>
    <content><![CDATA[<h1 id="1-新增Config-cs"><a href="#1-新增Config-cs" class="headerlink" title="1. 新增Config.cs"></a>1. 新增Config.cs</h1><p>在專案AuthApi的根目錄新增類別Config.cs，這裡包含所有IdentityServer4要建立的Client、Scope、Resource。</p>
<p>Client定義應用程式的授權流程以及OIDC的網址，本專案對WebMvc採用混和(Hybrid)。Scope代表資源能存取的範圍、Resource代表有哪些資源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using IdentityServer4;using IdentityServer4.Models;using Microsoft.Extensions.Configuration;using System.Collections.Generic;namespace TokenServiceApi&#123;    public class Config    &#123;        public static Dictionary&lt;string, string&gt; GetUrls(IConfiguration configuration)        &#123;            Dictionary&lt;string, string&gt; urls = new Dictionary&lt;string, string&gt;();            urls.Add(&quot;Mvc&quot;, configuration.GetValue&lt;string&gt;(&quot;MvcClient&quot;));            return urls;        &#125;        public static IEnumerable&lt;ApiScope&gt; GetApiScopes()        &#123;            return new List&lt;ApiScope&gt;            &#123;                new ApiScope(&quot;basket&quot;, &quot;basket api&quot;),                new ApiScope(&quot;order&quot;, &quot;order api&quot;),                new ApiScope(&quot;report&quot;, &quot;report api&quot;)            &#125;;        &#125;        public static IEnumerable&lt;ApiResource&gt; GetApiResources()        &#123;            return new List&lt;ApiResource&gt;            &#123;                new ApiResource(&quot;basket&quot;, &quot;Shopping Cart Api&quot;)                &#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;basket&quot;                    &#125;                &#125;,                new ApiResource(&quot;order&quot;, &quot;Ordering Api&quot;)                &#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;order&quot;                    &#125;                &#125;,                new ApiResource(&quot;report&quot;, &quot;Report Api&quot;)&#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;report&quot;                    &#125;                &#125;            &#125;;        &#125;        public static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()        &#123;            return new List&lt;IdentityResource&gt;            &#123;                new IdentityResources.OpenId(),                new IdentityResources.Profile()            &#125;;        &#125;        public static IEnumerable&lt;Client&gt; GetClients(Dictionary&lt;string, string&gt; clientUrls)        &#123;            return new List&lt;Client&gt;            &#123;                new Client                &#123;                    ClientId = &quot;mvc&quot;,                    ClientSecrets = new []&#123;new Secret(&quot;secret&quot;.Sha256())&#125;,                    AllowedGrantTypes = GrantTypes.Hybrid,                    RedirectUris = &#123;$&quot;&#123;clientUrls[&quot;Mvc&quot;]&#125;/signin-oidc&quot;&#125;,                    PostLogoutRedirectUris = &#123;$&quot;&#123;clientUrls[&quot;Mvc&quot;]&#125;/signout-callback-oidc&quot;&#125;,                    AllowAccessTokensViaBrowser = false,                    AllowOfflineAccess = true,                    RequireConsent = false,                    RequirePkce = false,                    AlwaysIncludeUserClaimsInIdToken  =true,                    AllowedScopes = new List&lt;string&gt;                    &#123;                        IdentityServerConstants.StandardScopes.OpenId,                        IdentityServerConstants.StandardScopes.Profile,                        IdentityServerConstants.StandardScopes.OfflineAccess,                        &quot;order&quot;,                        &quot;basket&quot;,                        &quot;report&quot;                    &#125;                &#125;            &#125;;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-新增ApplicationUser類別"><a href="#2-新增ApplicationUser類別" class="headerlink" title="2. 新增ApplicationUser類別"></a>2. 新增ApplicationUser類別</h1><p>　　在Models資料夾新增ApplicationUser.cs，並繼承IdentityUser，這個ApplicationUser可以自己加想要的屬性，在這我們都用空的。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="3-修改DbContext"><a href="#3-修改DbContext" class="headerlink" title="3. 修改DbContext"></a>3. 修改DbContext</h1><p>　　在Data資料夾會有ApplicationDbContext，將它改成繼承IdentityDbContext<ApplicationUser></p>
<h1 id="4-新增初始化的登入帳號的類別"><a href="#4-新增初始化的登入帳號的類別" class="headerlink" title="4. 新增初始化的登入帳號的類別"></a>4. 新增初始化的登入帳號的類別</h1><p>　　在Data資料夾新增IdentityDbInit.cs，注入ApplicationDbContext和UserManager<ApplicationUser>，每次程式啟動時會檢查Migrations，並確認是否有測試的帳號，沒有的話則新增它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using AuthApi.Models;using Microsoft.AspNetCore.Identity;using Microsoft.EntityFrameworkCore;using System.Linq;using System.Threading.Tasks;namespace AuthApi.Data&#123;    public class IdentityDbInit    &#123;        public static async Task Initialize(            ApplicationDbContext context,            UserManager&lt;ApplicationUser&gt; userManager)        &#123;            context.Database.Migrate();            if (context.Users.Any(r =&gt; r.UserName == &quot;test@test.com&quot;))            &#123;                return;            &#125;                            string user = &quot;test@test.com&quot;;            string password = &quot;P@ssword1&quot;;            await userManager.CreateAsync(new ApplicationUser &#123; UserName = user, EmailConfirmed = true &#125;, password);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-修改Program-cs"><a href="#5-修改Program-cs" class="headerlink" title="5. 修改Program.cs"></a>5. 修改Program.cs</h1><p>程式啟動都會呼叫IdentityDbInit作資料庫的Migrations和測試帳號的新增與否</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void Main(string[] args)        &#123;            var host = CreateHostBuilder(args).Build();            using (var scope = host.Services.CreateScope())            &#123;                var services = scope.ServiceProvider;                try                &#123;                    var context = services.GetRequiredService&lt;ApplicationDbContext&gt;();                    var userManager = services.GetRequiredService&lt;UserManager&lt;ApplicationUser&gt;&gt;();                    IdentityDbInit.Initialize(context, userManager).Wait();                &#125;                catch (Exception ex)                &#123;                    var logger = services.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();                    logger.LogError(ex, &quot;An error occurred while seeding the Authorization Server database.&quot;);                &#125;            &#125;            host.Run();        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-修改Startup-cs"><a href="#6-修改Startup-cs" class="headerlink" title="6. 修改Startup.cs"></a>6. 修改Startup.cs</h1><p>註冊IdentityServer4和資料庫整合的相關服務，並在Pipeline新增IdentityServer4的middleware</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using AuthApi.Data;using AuthApi.Models;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Identity;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using TokenServiceApi;namespace AuthApi&#123;    public class Startup    &#123;        public Startup(IConfiguration configuration)        &#123;            Configuration = configuration;        &#125;        public IConfiguration Configuration &#123; get; &#125;        // This method gets called by the runtime. Use this method to add services to the container.        public void ConfigureServices(IServiceCollection services)        &#123;            string server = Configuration[&quot;DatabaseServer&quot;];            string database = Configuration[&quot;DatabaseName&quot;];            string user = Configuration[&quot;DatabaseUser&quot;];            string password = Configuration[&quot;DatabasePassword&quot;];            string connectionString = string.Format(&quot;Server=&#123;0&#125;;Database=&#123;1&#125;;User=&#123;2&#125;;Password=&#123;3&#125;;&quot;, server, database, user, password);            services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt; options.UseSqlServer(connectionString));            services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()                .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()                .AddDefaultTokenProviders();            services.AddControllersWithViews();            services.AddRazorPages();            var builder = services.AddIdentityServer(options =&gt;            &#123;                options.Events.RaiseErrorEvents = true;                options.Events.RaiseInformationEvents = true;                options.Events.RaiseFailureEvents = true;                options.Events.RaiseSuccessEvents = true;                options.EmitStaticAudienceClaim = true;            &#125;)            .AddDeveloperSigningCredential()            .AddInMemoryPersistedGrants()            .AddInMemoryApiScopes(Config.GetApiScopes())            .AddInMemoryIdentityResources(Config.GetIdentityResources())            .AddInMemoryApiResources(Config.GetApiResources())            .AddInMemoryClients(Config.GetClients(Config.GetUrls(Configuration)))            .AddAspNetIdentity&lt;ApplicationUser&gt;();            services.AddControllersWithViews();            services.AddAuthentication();        &#125;        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();                app.UseDatabaseErrorPage();            &#125;            else            &#123;                app.UseExceptionHandler(&quot;/Home/Error&quot;);                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                app.UseHsts();            &#125;            app.UseHttpsRedirection();            app.UseStaticFiles();            app.UseRouting();            app.UseIdentityServer();            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllerRoute(                    name: &quot;default&quot;,                    pattern: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);                endpoints.MapRazorPages();            &#125;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-修改appSettings-json"><a href="#7-修改appSettings-json" class="headerlink" title="7. 修改appSettings.json"></a>7. 修改appSettings.json</h1><p>　　新增資料庫的連線資訊，和CatalogApi專案的方式一樣，只是資料庫名稱是AuthDb：</p>
<p>  “DatabaseServer”: “localhost,1445”,</p>
<p>  “DatabaseName”: “AuthDb”,</p>
<p>  “DatabaseUser”: “sa”,</p>
<p>  “DatabasePassword”: “JustTest!”,</p>
<h1 id="8-在專案啟用Db-Migrations"><a href="#8-在專案啟用Db-Migrations" class="headerlink" title="8. 在專案啟用Db Migrations"></a>8. 在專案啟用Db Migrations</h1><p>　　專案在初始化後已經有預設的Migrations類別，在根目錄使用cmd執行遷移：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure>

<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="9-Debug執行程式"><a href="#9-Debug執行程式" class="headerlink" title="9. Debug執行程式"></a>9. Debug執行程式</h1><p>　　使用VS執行AuthApi，在Account&#x2F;Login做登入，成功的話在diagnostics會顯示JWT相關的值，如圖1與圖2</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/login-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/login.png"></a></p>
<p>圖1  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/login2Bsuccess-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/login2Bsuccess.png"></a></p>
<p>圖2</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (13) 建立會員系統 - 2</title>
    <url>/2020/09/28/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-16/</url>
    <content><![CDATA[<h1 id="1-建立會員服務的Api專案"><a href="#1-建立會員服務的Api專案" class="headerlink" title="1. 建立會員服務的Api專案"></a>1. 建立會員服務的Api專案</h1><p>開啟VS，在RPGShop方案的src&#x2F;Services的方案資料夾，加入新的ASP.NET Core專案，專案名稱為AuthApi，選擇專案類型Web應用程式(模型-檢視-控制器)，不要用Docker，而驗證改成個別使用者帳戶，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/create2Bauthapi2Bproject-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/create2Bauthapi2Bproject.png"></a></p>
<p>圖1</p>
<p>按下建立，會產生預設的Identity Model和localdb資料庫連線，如圖2。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/authapi2Bproject2Binit-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/authapi2Bproject2Binit.png"></a></p>
<p>圖2  </p>
<h1 id="2-安裝IdentityServer4"><a href="#2-安裝IdentityServer4" class="headerlink" title="2. 安裝IdentityServer4"></a>2. 安裝IdentityServer4</h1><p>　　在AuthApi專案右鍵&#x3D;&gt;選擇[管理NuGet套件]，安裝IdentityServer4的相關套件，包含這項：</p>
<ul>
<li>IdentityServer4.AspNetIdentity , 版本 4.1.0</li>
</ul>
<h1 id="3-下載IdentityServer4的QuickStart-UI"><a href="#3-下載IdentityServer4的QuickStart-UI" class="headerlink" title="3. 下載IdentityServer4的QuickStart UI"></a>3. 下載IdentityServer4的QuickStart UI</h1><p>　　IdentityServer4官方提供完整的範例程式，這項會員系統直接採用。在<a href="https://github.com/IdentityServer/IdentityServer4">https://github.com/IdentityServer/IdentityServer4</a> Clone完整原始碼，並將samplesQuickstarts6_AspNetIdentitysrcIdentityServerAspNetIdentity的Quickstart、Views與wwwroot都複製到AuthApi的根目錄，覆蓋舊的資料夾。</p>
<p>-———————————————</p>
<p>下一篇是Identity資料庫與IdentityServer4整合, 並可登入.</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (12) 建立會員系統 - 1</title>
    <url>/2020/09/27/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-17/</url>
    <content><![CDATA[<h1 id="1-傳統Cookie認證"><a href="#1-傳統Cookie認證" class="headerlink" title="1. 傳統Cookie認證"></a>1. 傳統Cookie認證</h1><p>　　傳統網站系統的認證功能，通常是用Cookie認證。可參考這篇解說: <a href="https://ithelp.ithome.com.tw/articles/10198150">[C#][ASP.NET] Web API 開發心得 (4) - 使用 FormsAuthentication 進行 API 授權驗證</a> ，引用他的這張圖：</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/20106865ncaOHSsfOs.jpg"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/20106865ncaOHSsfOs.jpg"></a></p>
<p>　　Cookie驗證的缺點包含</p>
<ul>
<li>Cookie只限定一個Domain，但要請求的資源有時會到各種Url，變成Domain不符而無法請求</li>
<li>不同的Client(PC網頁、手機等)，資料要同步會比較困難</li>
</ul>
<h1 id="2-使用OAuth2-OIDC的認證授權"><a href="#2-使用OAuth2-OIDC的認證授權" class="headerlink" title="2. 使用OAuth2&#x2F;OIDC的認證授權"></a>2. 使用OAuth2&#x2F;OIDC的認證授權</h1><p>　　網頁的認證&#x2F;授權系統從OAuth規格訂出來，改善前述Cookie驗證的問題，到今日演變成OAuth2 與 OIDC(OpenId Connect)，像是Google&#x2F;Facebook&#x2F;Twitter等，採用OIDC的機制，使各個應用程式能實作更彈性的認證功能。</p>
<p>　　OAuth2&#x2F;OIDC有很多種認證方式，可以參考這篇的介紹<a href="https://blog.yorkxin.org/2013/09/30/oauth2-1-introduction.html">OAuth 2.0 筆記 (1) 世界觀</a>，而我們的會員系統會採用混和(Hybrid)授權機制。</p>
<h1 id="3-IdentityServer4"><a href="#3-IdentityServer4" class="headerlink" title="3. IdentityServer4"></a>3. IdentityServer4</h1><p>　　IdentityServer4是實作OIDC與OAuth2的ASP.NET Core函式庫，本會員系統會採用此套件做發開。可以參考<a href="https://identityserver4.readthedocs.io/en/latest/">IdentityServer4 官方網站</a>。</p>
<p>　　下一篇將安裝IdentityServer4與設定Scope&#x2F;Resource等。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (11) 建立商品列表的頁面 - 4</title>
    <url>/2020/09/26/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-18/</url>
    <content><![CDATA[<h1 id="1-建立Dockerfile"><a href="#1-建立Dockerfile" class="headerlink" title="1. 建立Dockerfile"></a>1. 建立Dockerfile</h1><p>在WebMvc專案右鍵&#x3D;&gt;加入&#x3D;&gt;Dokcer支援，選擇目標平台Linux，將會在根目錄新增Dockerfile檔案，但因為專案目錄設計方式，會讓VS產生錯誤的連結，所以需要再手動修改，變成下方的內容。其內容主要功能是在Docker容器內載入NET Core SDK編譯我們的程式碼，將編譯後的目錄檔案複製到Runtime環境的&#x2F;app目錄，再用NET Core Runtime執行商品列表的網頁系統。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS buildWORKDIR /codeEXPOSE 80COPY . .RUN dotnet restoreRUN dotnet publish -o /out/ -c ReleaseFROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseCOPY --from=build /out /app/WORKDIR /appENTRYPOINT [&quot;dotnet&quot;, &quot;WebMvc.dll&quot;]</span><br></pre></td></tr></table></figure>

<h1 id="2-修改dokcer-compose-yml"><a href="#2-修改dokcer-compose-yml" class="headerlink" title="2. 修改dokcer-compose.yml"></a>2. 修改dokcer-compose.yml</h1><p>在docker-compose.yml加入WebMvc的container，加上商品列表的網頁系統，如下方的yml。主要的參數包含：</p>
<ul>
<li>build的dockerfile：Dockerfile的檔名</li>
<li>build的context：商品列表網頁的Dockerfile所在的目錄</li>
<li>environment：這些參數將會覆蓋appSettings.json的內容，包含商品服務的Api Url。由於商品列表網頁與商品服務Api都是Docker內部環境，所以用<a href="http://catalog即可互通/">http://catalog即可互通</a></li>
<li>ports：將此Api的80 port對應為本機的7500</li>
<li>depends_on：需要先等商品服務Api的容器啟動完，才輪到此網頁啟動容器</li>
<li>networks：設計在frontend的網路區域</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.4&quot;networks:   frontend:   backend:   services:   webmvc:      build:         context: .srcPresentationWebMvc         dockerfile: Dockerfile      environment:         - CatalogUrl=http://catalog      container_name: rpgwebmvc      ports:         - &quot;7500:80&quot;      networks:         - frontend      depends_on:         - catalog   catalog:      build:         context: .srcServicesCatalogApi         dockerfile: Dockerfile      image: rpgshop/catalog      environment:         - DatabaseServer=mssqlserver         - DatabaseName=CatalogDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000      container_name: rpgcatalogapi      ports:         - &quot;7000:80&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   mssqlserver:      image: &quot;microsoft/mssql-server-linux:latest&quot;      ports:         - &quot;1445:1433&quot;      container_name: rpgmssqlcontainer      environment:         - ACCEPT_EULA=Y         - SA_PASSWORD=JustTest!      networks:         - backend</span><br></pre></td></tr></table></figure>

<h1 id="3-用cmd執行docker-compose"><a href="#3-用cmd執行docker-compose" class="headerlink" title="3. 用cmd執行docker-compose"></a>3. 用cmd執行docker-compose</h1><p>用cmd在docker-compose.yml所在位置輸入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose builddocker-compose up</span><br></pre></td></tr></table></figure>

<p>執行完後，在瀏覽器輸入<a href="http://docker.for.win.localhost:7500/">http://docker.for.win.localhost:7500</a> ，將看見容器化的商品列表網頁，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/docker2Bto2Bpage-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/docker2Bto2Bpage.png"></a></p>
<p>-————————————————————-</p>
<p>這一系列的專案將開在這Github：<a href="https://github.com/u8989332/RPGShopOnContainers">RPGShopOnContainers</a>，有需要的人可自行pull &#x2F; download～</p>
<p>下一篇將建立網站的會員功能。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (10) 建立商品列表的頁面 - 3</title>
    <url>/2020/09/26/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-19/</url>
    <content><![CDATA[<h1 id="1-建立ViewModel"><a href="#1-建立ViewModel" class="headerlink" title="1. 建立ViewModel"></a>1. 建立ViewModel</h1><p>在WebMvc專案新增ViewModels資料夾，這些模型專門在頁面作呈現</p>
<h2 id="1-1-新增類別-CatalogIndexViewModel"><a href="#1-1-新增類別-CatalogIndexViewModel" class="headerlink" title="1.1 新增類別: CatalogIndexViewModel"></a>1.1 新增類別: CatalogIndexViewModel</h2><p>CatalogIndexViewModel帶著商品類型列表、商品列表，還有一個分頁模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc.Rendering;using System.Collections.Generic;using WebMvc.Models;namespace WebMvc.ViewModels&#123;    public class CatalogIndexViewModel    &#123;        public IEnumerable&lt;CatalogItem&gt; CatalogItems &#123; get; set; &#125;        public IEnumerable&lt;SelectListItem&gt; Types &#123; get; set; &#125;        public int? TypesFilterApplied &#123; get; set; &#125;        public PaginationInfo PaginationInfo &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-新增類別-PaginationInfo"><a href="#1-2-新增類別-PaginationInfo" class="headerlink" title="1.2 新增類別: PaginationInfo"></a>1.2 新增類別: PaginationInfo</h2><p>PaginationInfo帶著列表的分頁資訊，包含總數量、每頁的數量、第Ｎ頁、總頁數、前一頁&#x2F;下一頁按鈕的CSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc.ViewModels&#123;    public class PaginationInfo    &#123;        public int TotalItems &#123; get; set; &#125;        public int ItemsPerPage &#123; get; set; &#125;        public int ActualPage &#123; get; set; &#125;        public int TotalPages &#123; get; set; &#125;        public string Previous &#123; get; set; &#125;        public string Next &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-新增appSettings-json參數"><a href="#2-新增appSettings-json參數" class="headerlink" title="2. 新增appSettings.json參數"></a>2. 新增appSettings.json參數</h1><p>在appSettings.json新增CatalogUrl, 因為目前還在VS開發，所以是用launchSettings.json的IIS Express設定檔：</p>
<p>“CatalogUrl”: “<a href="http://localhost/">http://localhost:13914"</a></p>
<h1 id="3-新增-修改Razor頁面"><a href="#3-新增-修改Razor頁面" class="headerlink" title="3. 新增&#x2F;修改Razor頁面"></a>3. 新增&#x2F;修改Razor頁面</h1><h2 id="3-1-修改-Layout-cshtml"><a href="#3-1-修改-Layout-cshtml" class="headerlink" title="3.1 修改_Layout.cshtml"></a>3.1 修改_Layout.cshtml</h2><p>網頁風格採用NES.css，於是Layout是主要的外觀修改，另外也搭配bootstrap 3做排版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;    &lt;title&gt;@ViewData[&quot;Title&quot;] - WebMvc&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;~/css/site.css&quot; /&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; /&gt;    &lt;link href=&quot;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot; /&gt;    &lt;link href=&quot;https://fonts.googleapis.com/css?family=Press+Start+2P&quot;          rel=&quot;stylesheet&quot; /&gt;    &lt;link href=&quot;https://unpkg.com/nes.css@2.3.0/css/nes.min.css&quot;          rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;        &lt;div class=&quot;container-fluid&quot;&gt;            &lt;!-- Brand and toggle get grouped for better mobile display --&gt;            &lt;div class=&quot;navbar-header&quot;&gt;                &lt;button type=&quot;button&quot;                        class=&quot;navbar-toggle&quot;                        data-toggle=&quot;collapse&quot;                        data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;                    &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                &lt;/button&gt;                &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;&lt;strong&gt;RPG&lt;/strong&gt; Shop&lt;/a&gt;            &lt;/div&gt;            &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;                &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Signup&lt;/a&gt;&lt;/li&gt;                &lt;/ul&gt;            &lt;/div&gt;            &lt;!-- /.navbar-collapse --&gt;        &lt;/div&gt;        &lt;!-- /.container-fluid --&gt;    &lt;/nav&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;main role=&quot;main&quot; class=&quot;pb-3&quot;&gt;            @RenderBody()        &lt;/main&gt;    &lt;/div&gt;    &lt;script src=&quot;~/lib/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;    @RenderSection(&quot;Scripts&quot;, required: false)&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-新增Views-Catalog資料夾-新增Index-cshtml"><a href="#3-2-新增Views-Catalog資料夾-新增Index-cshtml" class="headerlink" title="3.2 新增Views&#x2F;Catalog資料夾, 新增Index.cshtml"></a>3.2 新增Views&#x2F;Catalog資料夾, 新增Index.cshtml</h2><p>此頁面是商品的首頁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&#123;    ViewData[&quot;Title&quot;] = &quot;Catalog&quot;;    @model WebMvc.ViewModels.CatalogIndexViewModel&#125;&lt;form asp-action=&quot;Index&quot; asp-controller=&quot;Catalog&quot; method=&quot;post&quot;&gt;    &lt;div class=&quot;row&quot;&gt;        &lt;div class=&quot;col-md-3&quot;&gt;            &lt;section class=&quot;nes-container with-title&quot;&gt;                &lt;h3 class=&quot;title&quot;&gt;Types&lt;/h3&gt;                &lt;div id=&quot;lists&quot; class=&quot;item&quot;&gt;                    &lt;div class=&quot;nes-select&quot;&gt;                        &lt;select asp-for=&quot;@Model.TypesFilterApplied&quot; asp-items=&quot;@Model.Types&quot;&gt;&lt;/select&gt;                    &lt;/div&gt;                    &lt;button type=&quot;submit&quot; class=&quot;nes-btn is-primary&quot;&gt;Search&lt;/button&gt;                &lt;/div&gt;            &lt;/section&gt;        &lt;/div&gt;        &lt;!-- /.col --&gt;        &lt;div class=&quot;col-md-9&quot;&gt;            &lt;div class=&quot;row&quot;&gt;                @if (Model.CatalogItems.Count() &gt; 0)                &#123;                    &lt;div class=&quot;row&quot;&gt;                        @foreach (var catalogItem in Model.CatalogItems)                        &#123;                            &lt;partial name=&quot;_product&quot; model=&quot;catalogItem&quot; /&gt;                        &#125;                    &lt;/div&gt;                    &lt;partial name=&quot;_pagination&quot; model=&quot;Model.PaginationInfo&quot; /&gt;                &#125;                else                &#123;                    &lt;div class=&quot;row&quot;&gt;                        No any product.                    &lt;/div&gt;                &#125;            &lt;/div&gt;            &lt;!-- /.row --&gt;        &lt;/div&gt;        &lt;!-- /.col --&gt;    &lt;/div&gt;    &lt;!-- /.row --&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-在Views-Catalog資料夾-新增-product-cshtml"><a href="#3-3-在Views-Catalog資料夾-新增-product-cshtml" class="headerlink" title="3.3 在Views&#x2F;Catalog資料夾, 新增_product.cshtml"></a>3.3 在Views&#x2F;Catalog資料夾, 新增_product.cshtml</h2><p>每個商品的詳細內容是同樣的排版，所以用Partial的方式呈現</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@model WebMvc.Models.CatalogItem&lt;form asp-controller=&quot;Cart&quot; asp-action=&quot;AddToCart&quot;&gt;    &lt;div class=&quot;col-md-6 text-center col-sm-6 col-xs-6&quot;&gt;        &lt;section class=&quot;nes-container with-title&quot;&gt;            &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;@Model.Name&lt;/a&gt;&lt;/h3&gt;            &lt;img src=&quot;@Model.PictureUrl&quot; style=&quot;width: 100%&quot; alt=&quot;&quot; /&gt;            &lt;div class=&quot;caption&quot;&gt;&lt;/div&gt;            &lt;p&gt;Price : &lt;strong&gt;@Model.Price.ToString(&quot;N2&quot;)&lt;/strong&gt;&lt;/p&gt;            &lt;p&gt;                &lt;input type=&quot;submit&quot; href=&quot;#&quot; class=&quot;nes-btn is-success&quot; value=&quot;Add To Cart&quot; /&gt;            &lt;/p&gt;        &lt;/section&gt;    &lt;/div&gt;    &lt;input type=&quot;hidden&quot; asp-for=&quot;@Model.Description&quot; name=&quot;description&quot; /&gt;    &lt;input type=&quot;hidden&quot; asp-for=&quot;@Model.Id&quot; name=&quot;id&quot; /&gt;    &lt;input type=&quot;hidden&quot; asp-for=&quot;@Model.Name&quot; name=&quot;name&quot; /&gt;    &lt;input type=&quot;hidden&quot; asp-for=&quot;@Model.PictureUrl&quot; name=&quot;pictureUrl&quot; /&gt;    &lt;input type=&quot;hidden&quot; asp-for=&quot;@Model.Price&quot; name=&quot;price&quot; /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-在Views-Catalog資料夾-新增-pagination-cshtml"><a href="#3-4-在Views-Catalog資料夾-新增-pagination-cshtml" class="headerlink" title="3.4 在Views&#x2F;Catalog資料夾, 新增_pagination.cshtml"></a>3.4 在Views&#x2F;Catalog資料夾, 新增_pagination.cshtml</h2><p>分頁的功能另外寫成一個Partial頁面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@model WebMvc.ViewModels.PaginationInfo&lt;div class=&quot;row&quot;&gt;    &lt;span&gt;        Showing @Model.ItemsPerPage of @Model.TotalItems products - Page @(Model.ActualPage + 1) - @Model.TotalPages    &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;row&quot;&gt;    &lt;ul class=&quot;pagination alg-right-pad&quot;&gt;        &lt;li&gt;            &lt;a class=&quot;@Model.Previous&quot;               id=&quot;Previous&quot;               asp-controller=&quot;Catalog&quot;               asp-action=&quot;Index&quot;               asp-route-page=&quot;@(Model.ActualPage - 1)&quot;               asp-route-typesFilterApplied=&quot;@(ViewBag.TypesFilterApplied)&quot;               aria-label=&quot;Previous&quot;&gt;                Previous            &lt;/a&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;a class=&quot;@Model.Next&quot;               id=&quot;Next&quot;               asp-controller=&quot;Catalog&quot;               asp-action=&quot;Index&quot;               asp-route-page=&quot;@(Model.ActualPage + 1)&quot;               asp-route-typesFilterApplied=&quot;@(ViewBag.TypesFilterApplied)&quot;               aria-label=&quot;Next&quot;&gt;                Next            &lt;/a&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h1 id="4-新增CatalogController"><a href="#4-新增CatalogController" class="headerlink" title="4. 新增CatalogController"></a>4. 新增CatalogController</h1><p>在Contollers新增CatalogController，商品的資料都是從Controller為起點，並透過Service取資料，再由ViewModel組成回傳cshtml的CatalogIndexViewModel模型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc;using System;using System.Threading.Tasks;using WebMvc.Services;using WebMvc.ViewModels;namespace WebMvc.Controllers&#123;    public class CatalogController : Controller    &#123;        private const int itemsPage = 6;        private ICatalogService _catalogService;        public CatalogController(ICatalogService catalogService)        &#123;            _catalogService = catalogService;        &#125;        public async Task&lt;IActionResult&gt; Index(int? typesFilterApplied, int? page)        &#123;            var catalog = await _catalogService.GetCatalogItems(page ?? 0, itemsPage, typesFilterApplied);            var vm = new CatalogIndexViewModel()            &#123;                CatalogItems = catalog.Data,                Types = await _catalogService.GetTypes(),                TypesFilterApplied = typesFilterApplied ?? 0,                PaginationInfo = new PaginationInfo()                &#123;                    ActualPage = page ?? 0,                    ItemsPerPage = Math.Min(catalog.Data.Count, itemsPage),                    TotalItems = catalog.Count,                    TotalPages = (int)Math.Ceiling((decimal)catalog.Count / itemsPage)                &#125;            &#125;;            vm.PaginationInfo.Next = (vm.PaginationInfo.ActualPage == vm.PaginationInfo.TotalPages - 1) ? &quot;is-disabled&quot; : &quot;&quot;;            vm.PaginationInfo.Previous = (vm.PaginationInfo.ActualPage == 0) ? &quot;is-disabled&quot; : &quot;&quot;;            ViewBag.TypesFilterApplied = typesFilterApplied;            return View(vm);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-修改site-css"><a href="#5-修改site-css" class="headerlink" title="5. 修改site.css"></a>5. 修改site.css</h1><p>增加一條css，用在讓按鈕變成disable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.is-disabled &#123;    opacity: .5;    pointer-events: none;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-網頁呈現"><a href="#6-網頁呈現" class="headerlink" title="6. 網頁呈現"></a>6. 網頁呈現</h1><p>最終商品列表的頁面  </p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/09/product2Blist-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/09/product2Blist.png"></a></p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (27) 建立購物車系統 - 10</title>
    <url>/2020/10/12/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-2/</url>
    <content><![CDATA[<h1 id="1-在WebMvc專案新增購物車服務的功能"><a href="#1-在WebMvc專案新增購物車服務的功能" class="headerlink" title="1. 在WebMvc專案新增購物車服務的功能"></a>1. 在WebMvc專案新增購物車服務的功能</h1><h2 id="1-1-修改appSettings-json"><a href="#1-1-修改appSettings-json" class="headerlink" title="1.1 修改appSettings.json"></a>1.1 修改appSettings.json</h2><p>在WebMvc專案的appSettings.json增加購物車服務的Api連結：</p>
<p>  “CartUrl”: “<a href="http://localhost:1028/">http://localhost:1028</a>“,</p>
<h2 id="1-2-修改Startup-cs類別"><a href="#1-2-修改Startup-cs類別" class="headerlink" title="1.2 修改Startup.cs類別"></a>1.2 修改Startup.cs類別</h2><p>修改WebMvc專案的Startup.cs，主要是增加在OIDC的購物車Scope、註冊購物車相關服務：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authentication.Cookies;using Microsoft.AspNetCore.Authentication.OpenIdConnect;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using Newtonsoft.Json.Serialization;using System.IdentityModel.Tokens.Jwt;using System.Net.Http;using WebMvc.Infrastructure;using WebMvc.Models;using WebMvc.Services;namespace WebMvc&#123;    public class Startup    &#123;        public Startup(IConfiguration configuration)        &#123;            Configuration = configuration;        &#125;        public IConfiguration Configuration &#123; get; &#125;        // This method gets called by the runtime. Use this method to add services to the container.        public void ConfigureServices(IServiceCollection services)        &#123;            services.Configure&lt;AppSettings&gt;(Configuration);            services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();            services.AddSingleton&lt;IHttpClient, CustomHttpClient&gt;();            services.AddTransient&lt;ICatalogService, CatalogService&gt;();            services.AddTransient&lt;IAuthService&lt;ApplicationUser&gt;, AuthService&gt;();            services.AddTransient&lt;ICartService, CartService&gt;();            services.AddControllersWithViews().AddNewtonsoftJson(options =&gt;            &#123;                options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;            &#125;);            JwtSecurityTokenHandler.DefaultMapInboundClaims = false;            var identityUrl = Configuration.GetValue&lt;string&gt;(&quot;IdentityUrl&quot;);            var callBackUrl = Configuration.GetValue&lt;string&gt;(&quot;CallBackUrl&quot;);            services.AddAuthentication(options =&gt;            &#123;                options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;                options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;            &#125;)            .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme)            .AddOpenIdConnect(OpenIdConnectDefaults.AuthenticationScheme, options =&gt;            &#123;                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;                options.Authority = identityUrl;                options.SignedOutRedirectUri = callBackUrl;                options.ClientId = &quot;mvc&quot;;                options.ClientSecret = &quot;secret&quot;;                options.ResponseType = &quot;code id_token&quot;;                options.SaveTokens = true;                options.GetClaimsFromUserInfoEndpoint = true;                options.RequireHttpsMetadata = false;                options.Scope.Add(&quot;openid&quot;);                options.Scope.Add(&quot;profile&quot;);                options.Scope.Add(&quot;offline_access&quot;);                options.Scope.Add(&quot;basket&quot;);                options.NonceCookie.SameSite = SameSiteMode.Lax;                options.CorrelationCookie.SameSite = SameSiteMode.Lax;                options.BackchannelHttpHandler = new HttpClientHandler()                &#123;                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator                &#125;;            &#125;);        &#125;        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();            &#125;            else            &#123;                app.UseExceptionHandler(&quot;/Home/Error&quot;);            &#125;            app.UseStaticFiles();            app.UseRouting();            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllerRoute(                    name: &quot;default&quot;,                    pattern: &quot;&#123;controller=Catalog&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);            &#125;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-3-新增Cart和CartList的ViewComponent"><a href="#1-3-新增Cart和CartList的ViewComponent" class="headerlink" title="1.3 新增Cart和CartList的ViewComponent"></a>1.3 新增Cart和CartList的ViewComponent</h2><p>在WebMvc專案新增ViewComponents資料夾，並新增Cart.cs和CartList.cs 2個類別，都實作Microsoft.AspNetCore.Mvc.ViewComponent，之後Views的cshtml可以直接把它們當function呼叫並產生子View：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc;using System;using System.Threading.Tasks;using WebMvc.Models;using WebMvc.Services;using WebMvc.ViewModels;namespace WebMvc.ViewComponents&#123;    public class Cart : ViewComponent    &#123;        private readonly ICartService _cartService;        public Cart(ICartService cartService)        &#123;            _cartService = cartService;        &#125;        public async Task&lt;IViewComponentResult&gt; InvokeAsync(ApplicationUser user)        &#123;            var vm = new CartComponentViewModel();            try            &#123;                var cart = await _cartService.GetCartAsync(user);                vm.ItemsInCart = cart.Items.Count;                vm.TotalCost = cart.Total();                return View(vm);            &#125;            catch (Exception)            &#123;                ViewBag.IsCartInoperative = true;            &#125;            return View(vm);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc;using System;using System.Threading.Tasks;using WebMvc.Models;using WebMvc.Services;namespace WebMvc.ViewComponents&#123;    public class CartList : ViewComponent    &#123;        private readonly ICartService _cartService;        public CartList(ICartService cartService)        &#123;            _cartService = cartService;        &#125;        public async Task&lt;IViewComponentResult&gt; InvokeAsync(ApplicationUser user)        &#123;            var vm = new Models.CartModels.Cart();            try            &#123;                vm = await _cartService.GetCartAsync(user);                return View(vm);            &#125;            catch (Exception)            &#123;                ViewBag.IsCartInoperative = true;                TempData[&quot;CartInoperativeMsg&quot;] = &quot;Cart Service is inoperative, please retry later.&quot;;            &#125;            return View(vm);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.4 新增CartComponentViewModel類別在WebMvc專案的ViewModels新增CartComponentViewModel.cs，是Cart ViewComponent要回傳的View：namespace WebMvc.ViewModels&#123;    public class CartComponentViewModel    &#123;        public int ItemsInCart &#123; get; set; &#125;        public decimal TotalCost &#123; get; set; &#125;        public string Disabled =&gt; (ItemsInCart == 0) ? &quot;is-disabled&quot; : &quot;&quot;;    &#125;&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (9) 建立商品列表的頁面 - 2</title>
    <url>/2020/09/24/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-20/</url>
    <content><![CDATA[<h1 id="1-建立Model"><a href="#1-建立Model" class="headerlink" title="1. 建立Model"></a>1. 建立Model</h1><p>　　這些Model是從Web API取得Json後，再反序列化的目標。而這些Model建立在Models資料夾。</p>
<h2 id="1-1-新增類別-CatalogItem"><a href="#1-1-新增類別-CatalogItem" class="headerlink" title="1.1 新增類別: CatalogItem"></a>1.1 新增類別: CatalogItem</h2><p>每個商品的資料細節定義在此類別</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc.Models&#123;    public class CatalogItem    &#123;        public string Id &#123; get; set; &#125;        public string Name &#123; get; set; &#125;        public string Description &#123; get; set; &#125;        public decimal Price &#123; get; set; &#125;        public string PictureUrl &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-新增類別-Catalog"><a href="#1-2-新增類別-Catalog" class="headerlink" title="1.2 新增類別: Catalog"></a>1.2 新增類別: Catalog</h2><p>我們取商品列表是有分頁的功能，而Catalog包含分頁的資訊和CatalogItem列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections.Generic;namespace WebMvc.Models&#123;    public class Catalog    &#123;        public int PageIndex &#123; get; set; &#125;        public int PageSize &#123; get; set; &#125;        public int Count &#123; get; set; &#125;        public List&lt;CatalogItem&gt; Data &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-建立Catalog的服務"><a href="#2-建立Catalog的服務" class="headerlink" title="2. 建立Catalog的服務"></a>2. 建立Catalog的服務</h1><p>　　從Controller要對資料CRUD，都是透過服務（Service），於是在WebMvc新增Services資料夾。</p>
<h2 id="2-1-新增介面-ICatalogService"><a href="#2-1-新增介面-ICatalogService" class="headerlink" title="2.1 新增介面: ICatalogService"></a>2.1 新增介面: ICatalogService</h2><p>　　包含取得商品類別列表與商品列表的2個方法</p>
<p>  &#96;using Microsoft.AspNetCore.Mvc.Rendering;<br>using System.Collections.Generic;<br>using System.Threading.Tasks;<br>using WebMvc.Models;  </p>
<p>namespace WebMvc.Services<br>{<br>    public interface ICatalogService<br>    {<br>        Task<Catalog> GetCatalogItems(int pageIndex, int pageSize, int? type);<br>        Task&lt;IEnumerable<SelectListItem>&gt; GetTypes();<br>    }<br>}&#96; </p>
<h2 id="2-2-新增CatalogSerivce類別並實作ICatalogService"><a href="#2-2-新增CatalogSerivce類別並實作ICatalogService" class="headerlink" title="2.2 新增CatalogSerivce類別並實作ICatalogService"></a>2.2 新增CatalogSerivce類別並實作ICatalogService</h2><p>　　建立CatalogService，並注入前述自定義的IHttpClient、設定檔的IOptionsSnapshot<AppSettings>。從設定檔的CatalogUrl取得商品服務的Url，再組成api的route，依照前述ApiPaths做Http查詢。返回的結果是Json字串，需用Newtonsoft.Json做反序列化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc.Rendering;using Microsoft.Extensions.Logging;using Microsoft.Extensions.Options;using Newtonsoft.Json;using Newtonsoft.Json.Linq;using System.Collections.Generic;using System.Threading.Tasks;using WebMvc.Infrastructure;using WebMvc.Models;namespace WebMvc.Services&#123;    public class CatalogService : ICatalogService    &#123;        private readonly IOptionsSnapshot&lt;AppSettings&gt; _settings;        private readonly IHttpClient _apiClient;        private readonly ILogger&lt;CatalogService&gt; _logger;        private readonly string _remoteServiceBaseUrl;        public CatalogService(            IOptionsSnapshot&lt;AppSettings&gt; settings,            IHttpClient httpClient,            ILogger&lt;CatalogService&gt; logger)        &#123;            _settings = settings;            _apiClient = httpClient;            _logger = logger;            _remoteServiceBaseUrl = $&quot;&#123;_settings.Value.CatalogUrl&#125;/api/catalog/&quot;;        &#125;        public async Task&lt;Catalog&gt; GetCatalogItems(int pageIndex, int pageSize, int? type)        &#123;            var allcatalogItemsUri = ApiPaths.Catalog.GetAllCatalogItems(                _remoteServiceBaseUrl,                pageIndex,                pageSize,                type);            var dataString = await _apiClient.GetStringAsync(allcatalogItemsUri);            var response = JsonConvert.DeserializeObject&lt;Catalog&gt;(dataString);            return response;        &#125;        public async Task&lt;IEnumerable&lt;SelectListItem&gt;&gt; GetTypes()        &#123;            var getTypesUri = ApiPaths.Catalog.GetAllTypes(_remoteServiceBaseUrl);            var dataString = await _apiClient.GetStringAsync(getTypesUri);            var items = new List&lt;SelectListItem&gt;            &#123;                new SelectListItem()                &#123;                    Value = null,                    Text = &quot;All&quot;,                    Selected = true                &#125;            &#125;;            var types = JArray.Parse(dataString);            foreach (var brand in types.Children&lt;JObject&gt;())            &#123;                items.Add(new SelectListItem()                &#123;                    Value = brand.Value&lt;string&gt;(&quot;id&quot;),                    Text = brand.Value&lt;string&gt;(&quot;type&quot;)                &#125;);            &#125;            return items;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-建立AppSettings類別"><a href="#3-建立AppSettings類別" class="headerlink" title="3. 建立AppSettings類別"></a>3. 建立AppSettings類別</h1><p>　　在專案根目錄建立AppSettings.cs類別，並將設定檔的值對應到此類別的屬性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc&#123;    public class AppSettings    &#123;        public string CatalogUrl &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-修改Startup-cs"><a href="#4-修改Startup-cs" class="headerlink" title="4. 修改Startup.cs"></a>4. 修改Startup.cs</h1><p>　　需要註冊自定義的服務和設定檔，並將預設Route指到CatalogController</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)&#123;services.Configure&lt;AppSettings&gt;(Configuration);services.AddSingleton&lt;IHttpClient, CustomHttpClient&gt;();services.AddTransient&lt;ICatalogService, CatalogService&gt;();// other code...&#125;public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123;// other code...app.UseEndpoints(endpoints =&gt;&#123;endpoints.MapControllerRoute(name: &quot;default&quot;,pattern: &quot;&#123;controller=Catalog&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);&#125;);&#125;</span><br></pre></td></tr></table></figure>

<p>-—————————————–</p>
<p>目前網頁排版還有些問題, 正在努力修改….</p>
<p>明天得PO上來阿~~~</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (26) 建立購物車系統 - 9</title>
    <url>/2020/10/11/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-3/</url>
    <content><![CDATA[<h1 id="1-在WebMvc專案新增購物車服務的功能"><a href="#1-在WebMvc專案新增購物車服務的功能" class="headerlink" title="1. 在WebMvc專案新增購物車服務的功能"></a>1. 在WebMvc專案新增購物車服務的功能</h1><h2 id="1-1-新增購物車的服務類別"><a href="#1-1-新增購物車的服務類別" class="headerlink" title="1.1 新增購物車的服務類別"></a>1.1 新增購物車的服務類別</h2><p>在WebMvc專案的Services新增CartService，並實作ICartService，主要是實作與購物車服務Api的串接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authentication;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Logging;using Microsoft.Extensions.Options;using Newtonsoft.Json;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using WebMvc.Infrastructure;using WebMvc.Models;using WebMvc.Models.CartModels;namespace WebMvc.Services&#123;    public class CartService : ICartService    &#123;        private readonly IOptionsSnapshot&lt;AppSettings&gt; _settings;        private readonly IHttpClient _apiClient;        private readonly string _remoteServiceBaseUrl;        private readonly IHttpContextAccessor _httpContextAccessor;        private readonly ILogger&lt;CartService&gt; _logger;        public CartService(            IOptionsSnapshot&lt;AppSettings&gt; settings,            IHttpClient httpClient,            ILogger&lt;CartService&gt; logger,            IHttpContextAccessor httpContextAccessor)        &#123;            _settings = settings;            _remoteServiceBaseUrl = $&quot;&#123;_settings.Value.CartUrl&#125;/api/v1/cart&quot;;            _httpContextAccessor = httpContextAccessor;            _apiClient = httpClient;            _logger = logger;        &#125;        public async Task AddItemToCartAsync(ApplicationUser user, CartItem product)        &#123;            var cart = await GetCartAsync(user);            _logger.LogDebug(&quot;user name&quot; + user.Id);            if (cart == null)            &#123;                cart = new Cart()                &#123;                    BuyerId = user.Id,                    Items = new List&lt;CartItem&gt;()                &#125;;            &#125;            var cartItem = cart.Items                .Where(p =&gt; p.ProductId == product.ProductId)                .FirstOrDefault();            if (cartItem == null)            &#123;                cart.Items.Add(product);            &#125;            else            &#123;                cartItem.Quantity += 1;            &#125;            await UpdateCartAsync(cart);        &#125;        public async Task ClearCartAsync(ApplicationUser user)        &#123;            var token = await GetUserTokenAsync();            var cleanCartUri = ApiPaths.Cart.CleanCart(_remoteServiceBaseUrl, user.Id);            _logger.LogDebug(&quot;Clean cart uri : &quot; + cleanCartUri);            var response = await _apiClient.DeleteAsync(cleanCartUri);            _logger.LogDebug(&quot;cart cleaned&quot;);        &#125;        public async Task&lt;Cart&gt; GetCartAsync(ApplicationUser user)        &#123;            var token = await GetUserTokenAsync();            _logger.LogInformation(&quot;we are in get cart and user id &quot; + user.Id);            _logger.LogInformation(_remoteServiceBaseUrl);            var getCartUri = ApiPaths.Cart.GetCart(_remoteServiceBaseUrl, user.Id);            _logger.LogInformation(getCartUri);            var dataString = await _apiClient.GetStringAsync(getCartUri, token);            _logger.LogInformation(dataString);            var response = JsonConvert.DeserializeObject&lt;Cart&gt;(dataString.ToString()) ??                new Cart()                &#123;                    BuyerId = user.Id                &#125;;            return response;        &#125;        public async Task&lt;Cart&gt; SetQuantitiesAsync(ApplicationUser user, Dictionary&lt;string, int&gt; quantities)        &#123;            var cart = await GetCartAsync(user);            cart.Items.ForEach(x =&gt;            &#123;                if (quantities.TryGetValue(x.Id, out var quantity))                &#123;                    x.Quantity = quantity;                &#125;            &#125;);            return cart;        &#125;        public async Task&lt;Cart&gt; UpdateCartAsync(Cart cart)        &#123;            var token = await GetUserTokenAsync();            _logger.LogDebug(&quot;Service url: &quot; + _remoteServiceBaseUrl);            var updateCartUri = ApiPaths.Cart.UpdateCart(_remoteServiceBaseUrl);            _logger.LogDebug(&quot;Update cart url: &quot; + updateCartUri);            var response = await _apiClient.PostAsync(updateCartUri, cart, token);            response.EnsureSuccessStatusCode();            return cart;        &#125;        private async Task&lt;string&gt; GetUserTokenAsync()        &#123;            var context = _httpContextAccessor.HttpContext;            return await context.GetTokenAsync(&quot;access_token&quot;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-修改ApiPaths類別"><a href="#1-2-修改ApiPaths類別" class="headerlink" title="1.2 修改ApiPaths類別"></a>1.2 修改ApiPaths類別</h2><p>在WebMvc專案的Infrastructure修改ApiPaths.cs，增加購物車Api的Pattern：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc.Infrastructure&#123;    public static class ApiPaths    &#123;        public static class Cart        &#123;            public static string GetCart(string baseUri, string cartId)            &#123;                return $&quot;&#123;baseUri&#125;/&#123;cartId&#125;&quot;;            &#125;            public static string UpdateCart(string baseUri)            &#123;                return baseUri;            &#125;            public static string CleanCart(string baseUri, string cartId)            &#123;                return $&quot;&#123;baseUri&#125;/&#123;cartId&#125;&quot;;            &#125;        &#125;        public static class Catalog        &#123;            public static string GetAllCatalogItems(string baseUri, int pageIndex, int pageSize, int? type)            &#123;                string typeQueryString = &quot;&quot;;                if (type.HasValue)                &#123;                    typeQueryString = type.Value.ToString();                &#125;                return $&quot;&#123;baseUri&#125;items?catalogTypeId=&#123;typeQueryString&#125;&amp;pageIndex=&#123;pageIndex&#125;&amp;pageSize=&#123;pageSize&#125;&quot;;            &#125;            public static string GetAllTypes(string baseUri)            &#123;                return $&quot;&#123;baseUri&#125;catalogTypes&quot;;            &#125;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-3-修改IHttpClient和CustomHttpClient"><a href="#1-3-修改IHttpClient和CustomHttpClient" class="headerlink" title="1.3 修改IHttpClient和CustomHttpClient"></a>1.3 修改IHttpClient和CustomHttpClient</h2><p>在WebMvc專案的Infrastructure修改IHttpClient介面和CustomHttpClient類別，增加了JWT的token參數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Net.Http;using System.Threading.Tasks;namespace WebMvc.Infrastructure&#123;    public interface IHttpClient    &#123;        Task&lt;string&gt; GetStringAsync(string uri, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;);        Task&lt;HttpResponseMessage&gt; PostAsync&lt;T&gt;(string uri, T item, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;);        Task&lt;HttpResponseMessage&gt; DeleteAsync(string uri, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;);        Task&lt;HttpResponseMessage&gt; PutAsync&lt;T&gt;(string uri, T item, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.Extensions.Logging;using Newtonsoft.Json;using System;using System.Net.Http;using System.Net.Http.Headers;using System.Threading.Tasks;namespace WebMvc.Infrastructure&#123;    public class CustomHttpClient : IHttpClient    &#123;        private HttpClient _client;        private ILogger&lt;CustomHttpClient&gt; _logger;        public CustomHttpClient( ILogger&lt;CustomHttpClient&gt; logger)        &#123;            _client = new HttpClient();            _logger = logger;        &#125;        public async Task&lt;HttpResponseMessage&gt; DeleteAsync(string uri, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;)        &#123;            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);            if (authorizationToken != null)            &#123;                requestMessage.Headers.Authorization = new AuthenticationHeaderValue(authorizationMethod, authorizationToken);            &#125;            return await _client.SendAsync(requestMessage);        &#125;        public async Task&lt;string&gt; GetStringAsync(string uri, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;)        &#123;            var requestMessage = new HttpRequestMessage(HttpMethod.Get, uri);            if (authorizationToken != null)            &#123;                requestMessage.Headers.Authorization = new AuthenticationHeaderValue(authorizationMethod, authorizationToken);            &#125;            var response = await _client.SendAsync(requestMessage);            return await response.Content.ReadAsStringAsync();        &#125;        public async Task&lt;HttpResponseMessage&gt; PostAsync&lt;T&gt;(string uri, T item, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;)        &#123;            return await DoPostPutAsync(HttpMethod.Post, uri, item, authorizationToken, authorizationMethod);        &#125;        public async Task&lt;HttpResponseMessage&gt; PutAsync&lt;T&gt;(string uri, T item, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;)        &#123;            return await DoPostPutAsync(HttpMethod.Put, uri, item, authorizationToken, authorizationMethod);        &#125;        private async Task&lt;HttpResponseMessage&gt; DoPostPutAsync&lt;T&gt;(HttpMethod method, string uri, T item, string authorizationToken = null, string authorizationMethod = &quot;Bearer&quot;)        &#123;            if (method != HttpMethod.Post &amp;&amp; method != HttpMethod.Put)            &#123;                throw new ArgumentException(&quot;Value must be either post or put.&quot;, nameof(method));            &#125;            var requestMessage = new HttpRequestMessage(method, uri)            &#123;                Content = new StringContent(JsonConvert.SerializeObject(item), System.Text.Encoding.UTF8, &quot;application/json&quot;)            &#125;;            if (authorizationToken != null)            &#123;                requestMessage.Headers.Authorization = new AuthenticationHeaderValue(authorizationMethod, authorizationToken);            &#125;            var response = await _client.SendAsync(requestMessage);            if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)            &#123;                throw new HttpRequestException();            &#125;            return response;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (25) 建立購物車系統 - 8</title>
    <url>/2020/10/10/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-4/</url>
    <content><![CDATA[<h1 id="1-在WebMvc專案新增購物車服務的功能"><a href="#1-在WebMvc專案新增購物車服務的功能" class="headerlink" title="1. 在WebMvc專案新增購物車服務的功能"></a>1. 在WebMvc專案新增購物車服務的功能</h1><h2 id="1-1-新增購物車的類別"><a href="#1-1-新增購物車的類別" class="headerlink" title="1.1 新增購物車的類別"></a>1.1 新增購物車的類別</h2><p>在WebMvc的Models資料夾新增CartModels，再新增Cart.cs和CartItem.cs，代表透過Service傳遞的購物車資料模型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;using System.Collections.Generic;using System.Linq;namespace WebMvc.Models.CartModels&#123;    public class Cart    &#123;        public List&lt;CartItem&gt; Items &#123; get; set; &#125; = new List&lt;CartItem&gt;();        public string BuyerId &#123; get; set; &#125;        public decimal Total()        &#123;            return Math.Round(Items.Sum(x =&gt; x.UnitPrice * x.Quantity), 2);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace WebMvc.Models.CartModels&#123;    public class CartItem    &#123;        public string Id &#123; get; set; &#125;        public string ProductId &#123; get; set; &#125;        public string ProductName &#123; get; set; &#125;        public decimal UnitPrice &#123; get; set; &#125;        public decimal OldUnitPrice &#123; get; set; &#125;        public int Quantity &#123; get; set; &#125;        public string PictureUrl &#123; get; set; &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-新增權限相關的服務類別"><a href="#1-2-新增權限相關的服務類別" class="headerlink" title="1.2 新增權限相關的服務類別"></a>1.2 新增權限相關的服務類別</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>在WebMvc的Services資料夾新增IAuthService介面和實作的AuthService，主要是將Identity的User解析出Claims並回傳相關的欄位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Security.Principal;namespace WebMvc.Services&#123;    public interface IAuthService&lt;T&gt;    &#123;        T Get(IPrincipal principal);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;using System.Linq;using System.Security.Claims;using System.Security.Principal;using WebMvc.Models;namespace WebMvc.Services&#123;    public class AuthService : IAuthService&lt;ApplicationUser&gt;    &#123;        public ApplicationUser Get(IPrincipal principal)        &#123;            if (principal is ClaimsPrincipal claims)            &#123;                var user = new ApplicationUser()                &#123;                    Email = claims.Claims.FirstOrDefault(x =&gt; x.Type == &quot;preferred_username&quot;)?.Value ?? &quot;&quot;,                    Id = claims.Claims.FirstOrDefault(x =&gt; x.Type == &quot;sub&quot;)?.Value ?? &quot;&quot;                &#125;;                return user;            &#125;            throw new ArgumentException(message: &quot;the principal must be a claimsprincipal&quot;, paramName: nameof(principal));        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h2 id="1-3-新增權限的認證類別"><a href="#1-3-新增權限的認證類別" class="headerlink" title="1.3 新增權限的認證類別"></a>1.3 新增權限的認證類別</h2><p>在WebMvc專案的Models新增ApplicationUser.cs，並繼承Microsoft.AspNetCore.Identity的IdentityUser</p>
<h2 id="1-4-新增購物車的服務介面"><a href="#1-4-新增購物車的服務介面" class="headerlink" title="1.4 新增購物車的服務介面"></a>1.4 新增購物車的服務介面</h2><p>在WebMvc專案的Services新增ICartService，所有購物車相關的功能會透過此服務：</p>
<h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><p>using System.Collections.Generic;<br>using System.Threading.Tasks;<br>using WebMvc.Models;<br>using WebMvc.Models.CartModels;  </p>
<p>namespace WebMvc.Services<br>{<br>    public interface ICartService<br>    {<br>        Task<Cart> GetCartAsync(ApplicationUser user);<br>        Task AddItemToCartAsync(ApplicationUser user, CartItem product);<br>        Task<Cart> UpdateCartAsync(Cart cart);<br>        Task<Cart> SetQuantitiesAsync(ApplicationUser user, Dictionary&lt;string, int&gt; quantities);<br>        Task ClearCartAsync(ApplicationUser user);<br>    }<br>}  </p>
<h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (24) 建立購物車系統 - 7</title>
    <url>/2020/10/09/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-5/</url>
    <content><![CDATA[<h1 id="1-修改CartApi的appSettings-json"><a href="#1-修改CartApi的appSettings-json" class="headerlink" title="1. 修改CartApi的appSettings.json"></a>1. 修改CartApi的appSettings.json</h1><p>前面一篇文章，Startup.cs有從設定檔讀取IdentityUrl，也就是AuthApi的URL連結，因此需要再appSettings.json加入:</p>
<p>  “IdentityUrl”: “<a href="https://localhost:44399/">https://localhost:44399</a>“,</p>
<h1 id="2-修改AuthApi的Config-cs類別"><a href="#2-修改AuthApi的Config-cs類別" class="headerlink" title="2. 修改AuthApi的Config.cs類別"></a>2. 修改AuthApi的Config.cs類別</h1><p>在AuthApi的Config.cs新增對CartApi的IdentityServer4的Client，只採用Implicit驗證方式，而需要另外從設定檔讀取CartApi的Url作為OIDC相關的功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using IdentityServer4;using IdentityServer4.Models;using Microsoft.Extensions.Configuration;using System.Collections.Generic;namespace TokenServiceApi&#123;    public class Config    &#123;        public static Dictionary&lt;string, string&gt; GetUrls(IConfiguration configuration)        &#123;            Dictionary&lt;string, string&gt; urls = new Dictionary&lt;string, string&gt;();            urls.Add(&quot;Mvc&quot;, configuration.GetValue&lt;string&gt;(&quot;MvcClient&quot;));            urls.Add(&quot;BasketApi&quot;, configuration.GetValue&lt;string&gt;(&quot;BasketApiClient&quot;));            return urls;        &#125;        public static IEnumerable&lt;ApiScope&gt; GetApiScopes()        &#123;            return new List&lt;ApiScope&gt;            &#123;                new ApiScope(&quot;basket&quot;, &quot;basket api&quot;),                new ApiScope(&quot;order&quot;, &quot;order api&quot;),                new ApiScope(&quot;report&quot;, &quot;report api&quot;)            &#125;;        &#125;        public static IEnumerable&lt;ApiResource&gt; GetApiResources()        &#123;            return new List&lt;ApiResource&gt;            &#123;                new ApiResource(&quot;basket&quot;, &quot;Shopping Cart Api&quot;)                &#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;basket&quot;                    &#125;                &#125;,                new ApiResource(&quot;order&quot;, &quot;Ordering Api&quot;)                &#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;order&quot;                    &#125;                &#125;,                new ApiResource(&quot;report&quot;, &quot;Report Api&quot;)&#123;                    Scopes = new List&lt;string&gt;                    &#123;                        &quot;report&quot;                    &#125;                &#125;            &#125;;        &#125;        public static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()        &#123;            return new List&lt;IdentityResource&gt;            &#123;                new IdentityResources.OpenId(),                new IdentityResources.Profile()            &#125;;        &#125;        public static IEnumerable&lt;Client&gt; GetClients(Dictionary&lt;string, string&gt; clientUrls)        &#123;            return new List&lt;Client&gt;            &#123;                new Client                &#123;                    ClientId = &quot;mvc&quot;,                    ClientSecrets = new []&#123;new Secret(&quot;secret&quot;.Sha256())&#125;,                    AllowedGrantTypes = GrantTypes.Hybrid,                    RedirectUris = &#123;$&quot;&#123;clientUrls[&quot;Mvc&quot;]&#125;/signin-oidc&quot;&#125;,                    PostLogoutRedirectUris = &#123;$&quot;&#123;clientUrls[&quot;Mvc&quot;]&#125;/signout-callback-oidc&quot;&#125;,                    AllowAccessTokensViaBrowser = false,                    AllowOfflineAccess = true,                    RequireConsent = false,                    RequirePkce = false,                    AlwaysIncludeUserClaimsInIdToken  =true,                    AllowedScopes = new List&lt;string&gt;                    &#123;                        IdentityServerConstants.StandardScopes.OpenId,                        IdentityServerConstants.StandardScopes.Profile,                        IdentityServerConstants.StandardScopes.OfflineAccess,                        &quot;order&quot;,                        &quot;basket&quot;,                        &quot;report&quot;                    &#125;                &#125;,                new Client                &#123;                    ClientId = &quot;basketswaggerui&quot;,                    ClientName = &quot;Basket Swagger UI&quot;,                    AllowedGrantTypes = GrantTypes.Implicit,                    AllowAccessTokensViaBrowser = true,                    RedirectUris = &#123;$&quot;&#123;clientUrls[&quot;BasketApi&quot;]&#125;/swagger/oauth2-redirect.html&quot; &#125;,                    PostLogoutRedirectUris = &#123;$&quot;&#123;clientUrls[&quot;BasketApi&quot;]&#125;/swagger/&quot;&#125;,                    AllowedCorsOrigins = &#123;$&quot;&#123;clientUrls[&quot;BasketApi&quot;]&#125;&quot;&#125;,                    AllowedScopes = new List&lt;string&gt;                    &#123;                        &quot;basket&quot;                    &#125;                &#125;            &#125;;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-修改AuthApi的appSettings-json"><a href="#3-修改AuthApi的appSettings-json" class="headerlink" title="3. 修改AuthApi的appSettings.json"></a>3. 修改AuthApi的appSettings.json</h1><p>在AuthApi的appSettings.json加入購物車的服務連結: </p>
<p>  “BasketApiClient”: “<a href="http://localhost:1028/">http://localhost:1028</a>“,</p>
<h1 id="4-用cmd執行docker-compose"><a href="#4-用cmd執行docker-compose" class="headerlink" title="4. 用cmd執行docker-compose"></a>4. 用cmd執行docker-compose</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>先執行MSSQL資料庫和Redis，所以用cmd在docker-compose.yml所在位置輸入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up cart.data mssqlserver</span><br></pre></td></tr></table></figure>

<h1 id="5-執行VS-Debug"><a href="#5-執行VS-Debug" class="headerlink" title="5. 執行VS Debug"></a>5. 執行VS Debug</h1><p>在VS執行AuthApi和CartApi，將會看見CartApi的頁面右上角多了Authorize按鈕，假如不先按它，直接按任何GET&#x2F;POST&#x2F;DELETE的方法，會被回傳401 Unauthorized的回應，如圖1</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/not2Bauthorize2Bto2Buse2Bcartapi-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/not2Bauthorize2Bto2Buse2Bcartapi.png"></a></p>
<p>圖1  </p>
<p>    按下Authorize，並勾選Basket Scope，跳轉到AuthApi的登入頁面，登入後又回到CartApi，變成已授權的狀態，於是可以用GET&#x2F;POST&#x2F;DELETE的功能。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Swagger</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (23) 建立購物車系統 - 6</title>
    <url>/2020/10/08/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-6/</url>
    <content><![CDATA[<h1 id="1-修改Startup-cs"><a href="#1-修改Startup-cs" class="headerlink" title="1. 修改Startup.cs"></a>1. 修改Startup.cs</h1><p>　　購物車服務Api需要被保護，也就是之前的會員服務的驗證與授權，才能被正確呼叫。而Startup原本加入的Swagger也需要有認證機制，於是也加入OIDC設定。需要啟用Cors，讓外部能呼叫此CartApi。需要另外安裝這兩種套件：</p>
<p>Microsoft.AspNetCore.Authentication.JwtBearer</p>
<p>System.IdentityModel.Tokens.Jwt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using CartApi.Infrastructure.Filters;using CartApi.Models;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using Microsoft.Extensions.Options;using StackExchange.Redis;using System;using System.Collections.Generic;using System.IdentityModel.Tokens.Jwt;using System.Net.Http;namespace CartApi&#123;    public class Startup    &#123;        public Startup(IConfiguration configuration)        &#123;            Configuration = configuration;        &#125;        public IConfiguration Configuration &#123; get; &#125;        // This method gets called by the runtime. Use this method to add services to the container.        public void ConfigureServices(IServiceCollection services)        &#123;            services.AddControllers(options =&gt;            &#123;                options.Filters.Add(typeof(HttpGlobalExceptionFilter));            &#125;).AddNewtonsoftJson(options =&gt; &#123;                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;            &#125;);            ConfigureAuthService(services);            services.Configure&lt;CartSettings&gt;(Configuration);            services.AddSingleton&lt;ConnectionMultiplexer&gt;(sp =&gt;            &#123;                var settings = sp.GetRequiredService&lt;IOptions&lt;CartSettings&gt;&gt;().Value;                var configuration = ConfigurationOptions.Parse(settings.ConnectionString, true);                configuration.ResolveDns = true;                configuration.AbortOnConnectFail = false;                return ConnectionMultiplexer.Connect(configuration);            &#125;);            services.AddTransient&lt;ICartRepository, CartRepository&gt;();            services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();            services.AddSwaggerGen(options =&gt; &#123;                options.SwaggerDoc(&quot;v1&quot;, new Microsoft.OpenApi.Models.OpenApiInfo                &#123;                    Version = &quot;v1&quot;,                    Title = &quot;Cart HTTP API&quot;,                    Description = &quot;The Cart Service HTTP API&quot;                &#125;);                options.AddSecurityDefinition(&quot;oauth2&quot;, new Microsoft.OpenApi.Models.OpenApiSecurityScheme                &#123;                    Type = Microsoft.OpenApi.Models.SecuritySchemeType.OAuth2,                    Flows = new Microsoft.OpenApi.Models.OpenApiOAuthFlows                    &#123;                        Implicit = new Microsoft.OpenApi.Models.OpenApiOAuthFlow                        &#123;                            AuthorizationUrl = new Uri($&quot;&#123;Configuration.GetValue&lt;string&gt;(&quot;IdentityUrl&quot;)&#125;/connect/authorize&quot;),                            TokenUrl = new Uri($&quot;&#123;Configuration.GetValue&lt;string&gt;(&quot;IdentityUrl&quot;)&#125;/connect/token&quot;),                            Scopes = new Dictionary&lt;string, string&gt;()                            &#123;                                &#123; &quot;basket&quot;, &quot;Basket Api&quot; &#125;                            &#125;                        &#125;                    &#125;                &#125;);                options.OperationFilter&lt;AuthorizationCheckOperationFilter&gt;();            &#125;);            services.AddCors(builder =&gt;            &#123;                builder.DefaultPolicyName = &quot;CorsPolicy&quot;;                builder.AddPolicy(&quot;CorsPolicy&quot;, options =&gt; &#123;                    options.AllowAnyOrigin()                        .AllowAnyMethod()                        .AllowAnyHeader();                &#125;);            &#125;);        &#125;        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        &#123;            if (env.IsDevelopment())            &#123;                app.UseDeveloperExceptionPage();            &#125;            app.UseSwagger()             .UseSwaggerUI(c =&gt;             &#123;                 c.SwaggerEndpoint(                     $&quot;/swagger/v1/swagger.json&quot;,                     &quot;Cart.API V1&quot;);                 c.OAuthClientId(&quot;basketswaggerui&quot;);                 c.OAuthAppName(&quot;Basket Swagger UI&quot;);             &#125;);            app.UseRouting();            app.UseCors(&quot;CorsPolicy&quot;);            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =&gt;            &#123;                endpoints.MapControllers();            &#125;);        &#125;        private void ConfigureAuthService(IServiceCollection services)        &#123;            JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();            var identityUrl = Configuration.GetValue&lt;string&gt;(&quot;IdentityUrl&quot;);            services.AddAuthentication(options =&gt;            &#123;                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;            &#125;).AddJwtBearer(options =&gt;            &#123;                options.Authority = identityUrl;                options.RequireHttpsMetadata = false;                options.Audience = &quot;basket&quot;;                options.BackchannelHttpHandler = new HttpClientHandler()                &#123;                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator                &#125;;            &#125;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-新增AuthorizationCheckOperationFilter類別"><a href="#2-新增AuthorizationCheckOperationFilter類別" class="headerlink" title="2. 新增AuthorizationCheckOperationFilter類別"></a>2. 新增AuthorizationCheckOperationFilter類別</h1><p>在CartApi的Infrastructure&#x2F;filters新增AuthorizationCheckOperationFilter類別，並實作IOperationFilter，用來判斷在Swagger使用授權的Controller要對應OIDC功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authorization;using Microsoft.OpenApi.Models;using Swashbuckle.AspNetCore.SwaggerGen;using System.Collections.Generic;using System.Linq;namespace CartApi.Infrastructure.Filters&#123;    public class AuthorizationCheckOperationFilter : IOperationFilter    &#123;        public void Apply(OpenApiOperation operation, OperationFilterContext context)        &#123;            var hasAuthorize =                  context.MethodInfo.DeclaringType.GetCustomAttributes(true).OfType&lt;AuthorizeAttribute&gt;().Any()                   context.MethodInfo.GetCustomAttributes(true).OfType&lt;AuthorizeAttribute&gt;().Any();            if (hasAuthorize)            &#123;                operation.Responses.TryAdd(&quot;401&quot;, new OpenApiResponse &#123; Description = &quot;Unauthorized&quot; &#125;);                operation.Responses.TryAdd(&quot;403&quot;, new OpenApiResponse &#123; Description = &quot;Forbidden&quot; &#125;);                operation.Security = new List&lt;OpenApiSecurityRequirement&gt;();                operation.Security.Add(new OpenApiSecurityRequirement                &#123;                    [                        new OpenApiSecurityScheme                        &#123;                            Reference = new OpenApiReference &#123; Type = ReferenceType.SecurityScheme, Id = &quot;oauth2&quot; &#125;                        &#125;                    ] = new[] &#123; &quot;basket&quot; &#125;                &#125;);            &#125;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-修改CartController"><a href="#3-修改CartController" class="headerlink" title="3. 修改CartController"></a>3. 修改CartController</h1><p>在CartController加上[Authorize]的屬性，代表這控制器的方法都要被保護。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (22) 建立購物車系統 - 5</title>
    <url>/2020/10/07/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-7/</url>
    <content><![CDATA[<h1 id="1-建立Dockerfile"><a href="#1-建立Dockerfile" class="headerlink" title="1. 建立Dockerfile"></a>1. 建立Dockerfile</h1><p>　　在CartApi專案右鍵&#x3D;&gt;加入&#x3D;&gt;Dokcer支援，選擇目標平台Linux，將會在根目錄新增Dockerfile檔案，需要再手動修改，變成下方的內容。其內容主要功能是在Docker容器內載入NET Core SDK編譯我們的程式碼，將編譯後的目錄檔案複製到Runtime環境的&#x2F;app目錄，再用NET Core Runtime執行購物車服務。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS buildWORKDIR /codeEXPOSE 80COPY . .RUN dotnet restoreRUN dotnet publish -o /out/ -c ReleaseFROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseCOPY --from=build /out /app/WORKDIR /appENTRYPOINT [&quot;dotnet&quot;, &quot;CartApi.dll&quot;]</span><br></pre></td></tr></table></figure>

<h1 id="2-修改dokcer-compose-yml"><a href="#2-修改dokcer-compose-yml" class="headerlink" title="2. 修改dokcer-compose.yml"></a>2. 修改dokcer-compose.yml</h1><p>在docker-compose.yml加入CartApi的container，如下方的yml。主要的參數包含：</p>
<ul>
<li>build的dockerfile：Dockerfile的檔名</li>
<li>build的context：購物車系統的Dockerfile所在的目錄</li>
<li>environment：這些參數將會覆蓋appSettings.json的內容，包含Redis的連線資訊。</li>
<li>ports：將此Api的80 port對應為本機的7400</li>
<li>depends_on：需要先等redis的容器啟動完，才輪到此Api啟動容器</li>
<li>networks：設計在frontend&#x2F;backend的網路區域</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.4&quot;networks:   frontend:   backend:   services:   webmvc:      build:         context: .srcPresentationWebMvc         dockerfile: Dockerfile      environment:         - CatalogUrl=http://catalog         - IdentityUrl=https://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7101         - CallBackUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500/      container_name: rpgwebmvc      ports:         - &quot;7500:80&quot;      networks:         - frontend      depends_on:         - catalog         - auth   catalog:      build:         context: .srcServicesCatalogApi         dockerfile: Dockerfile      image: rpgshop/catalog      environment:         - DatabaseServer=mssqlserver         - DatabaseName=CatalogDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000      container_name: rpgcatalogapi      ports:         - &quot;7000:80&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   auth:      build:         context: .srcServicesAuthApi         dockerfile: Dockerfile      image: rpgshop/auth      environment:         - MvcClient=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500         - DatabaseServer=mssqlserver         - DatabaseName=AuthDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000         - ASPNETCORE_URLS=http://+:80;https://+:443         - ASPNETCORE_Kestrel__Certificates__Default__Password=crypticpassword         - ASPNETCORE_Kestrel__Certificates__Default__Path=./AuthApi.pfx      container_name: rpgauthapi      ports:         - &quot;7100:80&quot;         - &quot;7101:443&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   cart:      build:         context: .srcServicesCartApi         dockerfile: Dockerfile      image: rpgshop/cart      environment:         - ConnectionString=cart.data      container_name: rpgcartapi      ports:         - &quot;7400:80&quot;      networks:         - backend         - frontend      depends_on:         - cart.data   mssqlserver:      image: &quot;microsoft/mssql-server-linux:latest&quot;      ports:         - &quot;1445:1433&quot;      container_name: rpgmssqlcontainer      environment:         - ACCEPT_EULA=Y         - SA_PASSWORD=JustTest!      networks:         - backend   cart.data:      image: redis      ports:         - &quot;6377:6379&quot;      networks:         - backend</span><br></pre></td></tr></table></figure>

<h1 id="3-用cmd執行docker-compose"><a href="#3-用cmd執行docker-compose" class="headerlink" title="3. 用cmd執行docker-compose"></a>3. 用cmd執行docker-compose</h1><p>目前只先執行購物車服務，所以用cmd在docker-compose.yml所在位置輸入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose builddocker-compose up cart.data cart</span><br></pre></td></tr></table></figure>

<p>執行完後，在瀏覽器輸入<a href="http://docker.for.win.localhost:7400/swagger">http://docker.for.win.localhost:7400/swagger</a> ，顯示Swagger對API的功能，如圖1。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bcart2Bapi-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/docker2Bcart2Bapi.png"></a></p>
<p>圖1</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (21) 建立購物車系統 - 4</title>
    <url>/2020/10/06/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-8/</url>
    <content><![CDATA[<h1 id="1-安裝Swagger"><a href="#1-安裝Swagger" class="headerlink" title="1. 安裝Swagger"></a>1. 安裝Swagger</h1><p>在CartApi專案右鍵[管理NuGet套件]，安裝Swagger相關的套件：：</p>
<p>Swashbuckle.AspNetCore.SwaggerGen , 版本 5.6.1</p>
<p>Swashbuckle.AspNetCore.SwaggerUI , 版本 5.6.1</p>
<h1 id="2-在Startup-cs註冊與使用Swagger"><a href="#2-在Startup-cs註冊與使用Swagger" class="headerlink" title="2. 在Startup.cs註冊與使用Swagger"></a>2. 在Startup.cs註冊與使用Swagger</h1><h2 id="2-1-ConfigureServices的服務註冊"><a href="#2-1-ConfigureServices的服務註冊" class="headerlink" title="2.1 ConfigureServices的服務註冊"></a>2.1 ConfigureServices的服務註冊</h2><p>需使用SwaggerGen註冊Swagger的功能，並加上對此Api專案的描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)&#123;// other code...services.AddSwaggerGen(options =&gt; &#123;                options.SwaggerDoc(&quot;v1&quot;, new Microsoft.OpenApi.Models.OpenApiInfo                &#123;                    Version = &quot;v1&quot;,                    Title = &quot;Cart HTTP API&quot;,                    Description = &quot;The Cart Service HTTP API&quot;                &#125;);            &#125;);&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Configure加上Swagger的Middleware"><a href="#2-2-Configure加上Swagger的Middleware" class="headerlink" title="2.2 Configure加上Swagger的Middleware"></a>2.2 Configure加上Swagger的Middleware</h2><p>在Pipeline加上Swagger的Middleware，放在app.UseRouting之前，指定它的json endpoint與名稱。</p>
<p>  &#96;<br>public void Configure(IApplicationBuilder app, IWebHostEnvironment env)<br>{<br>&#x2F;&#x2F; other code…  </p>
<p>app.UseSwagger()<br>             .UseSwaggerUI(c &#x3D;&gt;<br>             {<br>                 c.SwaggerEndpoint(<br>                     $”&#x2F;swagger&#x2F;v1&#x2F;swagger.json”,<br>                     “Cart.API V1”);<br>             });  </p>
<p>app.UseRouting();  </p>
<p>&#x2F;&#x2F; other code…<br>}&#96;</p>
<h1 id="3-修改launchSettings-json"><a href="#3-修改launchSettings-json" class="headerlink" title="3. 修改launchSettings.json"></a>3. 修改launchSettings.json</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>從VS執行程式的參數會依照launchSettings.json，包含URL與其他環境變數。而原先預設在IIS Express的launchUrl是weatherforecast，將它改成swagger，這樣VS啟用IIS的設定會用swagger：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;  &quot;$schema&quot;: &quot;http://json.schemastore.org/launchsettings.json&quot;,  &quot;iisSettings&quot;: &#123;    &quot;windowsAuthentication&quot;: false,    &quot;anonymousAuthentication&quot;: true,    &quot;iisExpress&quot;: &#123;      &quot;applicationUrl&quot;: &quot;http://localhost:1028&quot;,      &quot;sslPort&quot;: 0    &#125;  &#125;,  &quot;profiles&quot;: &#123;    &quot;IIS Express&quot;: &#123;      &quot;commandName&quot;: &quot;IISExpress&quot;,      &quot;launchBrowser&quot;: true,      &quot;launchUrl&quot;: &quot;swagger&quot;,      &quot;environmentVariables&quot;: &#123;        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;      &#125;    &#125;,    &quot;CartApi&quot;: &#123;      &quot;commandName&quot;: &quot;Project&quot;,      &quot;launchBrowser&quot;: true,      &quot;applicationUrl&quot;: &quot;http://localhost:5000&quot;,      &quot;environmentVariables&quot;: &#123;        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;      &#125;    &#125;  &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-移除預設專案的範例"><a href="#4-移除預設專案的範例" class="headerlink" title="4. 移除預設專案的範例"></a>4. 移除預設專案的範例</h1><p>原先建立CartApi專案時，會有WeatherForecast的Controller與Model，將這些都移除。</p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="5-修改docker-compose-yml"><a href="#5-修改docker-compose-yml" class="headerlink" title="5. 修改docker-compose.yml"></a>5. 修改docker-compose.yml</h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><p>在docker-compose.yml新增redis的container，service的名字為cart.data，內部6379 port對應本機的 6377 port：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.4&quot;networks:   frontend:   backend:   services:   webmvc:      build:         context: .srcPresentationWebMvc         dockerfile: Dockerfile      environment:         - CatalogUrl=http://catalog         - IdentityUrl=https://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7101         - CallBackUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500/      container_name: rpgwebmvc      ports:         - &quot;7500:80&quot;      networks:         - frontend      depends_on:         - catalog         - auth   catalog:      build:         context: .srcServicesCatalogApi         dockerfile: Dockerfile      image: rpgshop/catalog      environment:         - DatabaseServer=mssqlserver         - DatabaseName=CatalogDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000      container_name: rpgcatalogapi      ports:         - &quot;7000:80&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   auth:      build:         context: .srcServicesAuthApi         dockerfile: Dockerfile      image: rpgshop/auth      environment:         - MvcClient=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7500         - DatabaseServer=mssqlserver         - DatabaseName=AuthDb         - DatabaseUser=sa         - DatabasePassword=JustTest!         - ExternalCatalogBaseUrl=http://$&#123;RPGSHOP_EXTERNAL_DNS_NAME_OR_IP&#125;:7000         - ASPNETCORE_URLS=http://+:80;https://+:443         - ASPNETCORE_Kestrel__Certificates__Default__Password=crypticpassword         - ASPNETCORE_Kestrel__Certificates__Default__Path=./AuthApi.pfx      container_name: rpgauthapi      ports:         - &quot;7100:80&quot;         - &quot;7101:443&quot;      networks:         - backend         - frontend      depends_on:         - mssqlserver   mssqlserver:      image: &quot;microsoft/mssql-server-linux:latest&quot;      ports:         - &quot;1445:1433&quot;      container_name: rpgmssqlcontainer      environment:         - ACCEPT_EULA=Y         - SA_PASSWORD=JustTest!      networks:         - backend   cart.data:      image: redis      ports:         - &quot;6377:6379&quot;      networks:         - backend</span><br></pre></td></tr></table></figure>

<h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h1 id="6-執行docker-compose啟用redis"><a href="#6-執行docker-compose啟用redis" class="headerlink" title="6. 執行docker-compose啟用redis"></a>6. 執行docker-compose啟用redis</h1><p>　　目前只需要執行redis，所以在docker-compose.yml的目錄使用cmd執行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up cart.data</span><br></pre></td></tr></table></figure>

<h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><h1 id="7-VS執行"><a href="#7-VS執行" class="headerlink" title="7. VS執行"></a>7. VS執行</h1><p>將CartApi設為預設專案並開啟Debug，看到畫面是Swagger的介面，包含我們所寫的Controller的Action，如圖1。每個API都能點擊，並按下Try it out的按鈕，輸入參數做實際的API運作。</p>
<p><a href="http://geekcodeparadise.com/wp-content/uploads/2020/10/cart2Bapi2Bswagger-1.png"><img src="http://geekcodeparadise.com/wp-content/uploads/2020/10/cart2Bapi2Bswagger.png"></a></p>
<p>圖1</p>
<p>比如點Http Post的&#x2F;api&#x2F;Cart，新增一筆Buyer Id對應的購物車商品列表，再用Http Get的&#x2F;api&#x2F;Cart&#x2F;{id}取得該Buyer Id的資料，再用Http Delete的&#x2F;api&#x2F;Cart&#x2F;{id}刪除該物件。</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
        <category>Swagger</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (20) 建立購物車系統 - 3</title>
    <url>/2020/10/05/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-9/</url>
    <content><![CDATA[<h1 id="1-新增CartController"><a href="#1-新增CartController" class="headerlink" title="1. 新增CartController"></a>1. 新增CartController</h1><p>在CartApi專案的資料夾Controllers，新增CartController類別且繼承ControllerBase，此類別是購物車系統的Http Api，之後要讓WebMvc呼叫。Action包含對購物車的更新、取得與刪除，需依靠注入的CartRepository物件。</p>
<pre><code>    `  
</code></pre>
<p>using CartApi.Models;<br>using Microsoft.AspNetCore.Mvc;<br>using Microsoft.Extensions.Logging;<br>using System.Net;<br>using System.Threading.Tasks;  </p>
<p>namespace CartApi.Controllers<br>{<br>    [ApiController]<br>    [Route(“api&#x2F;[controller]”)]<br>    public class CartController : ControllerBase<br>    {<br>        private readonly ILogger<CartController> _logger;<br>        private readonly ICartRepository _repository;  </p>
<pre><code>    public CartController(ILogger&lt;CartController&gt; logger, ICartRepository repository)  
    &#123;  
        _logger = logger;  
        _repository = repository;  
    &#125;  

    [HttpGet(&quot;&#123;id&#125;&quot;)]  
    [ProducesResponseType(typeof(Cart), (int)HttpStatusCode.OK)]  
    public async Task&lt;IActionResult&gt; Get(string id)  
    &#123;  
        var basket = await _repository.GetCartAsync(id);  
        return Ok(basket);  
    &#125;  

    [HttpPost]  
    [ProducesResponseType(typeof(Cart), (int)HttpStatusCode.OK)]  
    public async Task&lt;IActionResult&gt; Post([FromBody] Cart value)  
    &#123;  
        var basket = await _repository.UpdateCartAsync(value);  
        return Ok(basket);  
    &#125;  

    [HttpDelete(&quot;&#123;id&#125;&quot;)]  
    public void Delete(string id)  
    &#123;  
        _repository.DeleteCartAsync(id);  
    &#125;  
&#125;  
</code></pre>
<p>}  </p>
<p>&#96;  </p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="2-修改Startup-cs"><a href="#2-修改Startup-cs" class="headerlink" title="2. 修改Startup.cs"></a>2. 修改Startup.cs</h1><p>在Startup.cs，註冊所需的Redis、Repository服務。在AddControllers需要在Filters增加之前寫的HttpGlobalExceptionFilter功能，並且要安裝Microsoft.AspNetCore.Mvc.NewtonsoftJson，才能用AddNewtonsoftJson的功能，使Json不檢查自我參考的迴圈問題。Redis ConnectionMultiplexer註冊的是單例模式，不用每次都新增連線物件。</p>
<pre><code>  `  
</code></pre>
<p>public void ConfigureServices(IServiceCollection services)<br>        {<br>            services.AddControllers(options &#x3D;&gt;<br>            {<br>                options.Filters.Add(typeof(HttpGlobalExceptionFilter));<br>            }).AddNewtonsoftJson(options &#x3D;&gt; {<br>                options.SerializerSettings.ReferenceLoopHandling &#x3D; Newtonsoft.Json.ReferenceLoopHandling.Ignore;<br>            });  </p>
<pre><code>        services.Configure&lt;CartSettings&gt;(Configuration);  

        services.AddSingleton&lt;ConnectionMultiplexer&gt;(sp =&gt;  
        &#123;  
            var settings = sp.GetRequiredService&lt;IOptions&lt;CartSettings&gt;&gt;().Value;  
            var configuration = ConfigurationOptions.Parse(settings.ConnectionString, true);  

            configuration.ResolveDns = true;  
            configuration.AbortOnConnectFail = false;  

            return ConnectionMultiplexer.Connect(configuration);  
        &#125;);  

        services.AddTransient&lt;ICartRepository, CartRepository&gt;();  
        services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();  
    &#125;  
</code></pre>
<p>&#96;  </p>
<p>-—————————————————-</p>
<p>之後再來寫Docker啟用Redis和使用Swagger測試CartController</p>
]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>一袋.NET要扛幾樓？打造容器化的ASP.NET Core網站！系列文章 - (28) 建立購物車系統 - 11</title>
    <url>/2020/10/14/%E4%B8%80%E8%A2%8B-net%E8%A6%81%E6%89%9B%E5%B9%BE%E6%A8%93%EF%BC%9F%E6%89%93%E9%80%A0%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84asp-net-core%E7%B6%B2%E7%AB%99%EF%BC%81%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="1-在WebMvc專案新增購物車服務的功能"><a href="#1-在WebMvc專案新增購物車服務的功能" class="headerlink" title="1. 在WebMvc專案新增購物車服務的功能"></a>1. 在WebMvc專案新增購物車服務的功能</h1><h2 id="1-1-修改-LoginPartial-cshtml"><a href="#1-1-修改-LoginPartial-cshtml" class="headerlink" title="1.1 修改_LoginPartial.cshtml"></a>1.1 修改_LoginPartial.cshtml</h2><p>在網站登入後，要增加購物車Cart ViewComponent，需修改_LoginPartial.cshtml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@using WebMvc.Services@inject IAuthService&lt;ApplicationUser&gt; UserManager@if (User?.Identity?.IsAuthenticated == true)&#123;    &lt;li&gt;        @User.FindFirst(x =&gt; x.Type == &quot;preferred_username&quot;).Value    &lt;/li&gt;    &lt;li&gt;        @await Component.InvokeAsync(&quot;Cart&quot;, new &#123; user = UserManager.Get(User) &#125;)    &lt;/li&gt;    &lt;li class=&quot;pull-right&quot;&gt;        &lt;form asp-area=&quot;&quot; asp-controller=&quot;Account&quot; asp-action=&quot;SignOut&quot; method=&quot;post&quot; id=&quot;logoutForm&quot;&gt;            &lt;a href=&quot;javascript:document.getElementById(&#x27;logoutForm&#x27;).submit()&quot;&gt;                Log Out            &lt;/a&gt;        &lt;/form&gt;    &lt;/li&gt;&#125;else&#123;    &lt;li&gt;        &lt;a asp-area=&quot;&quot; asp-controller=&quot;Account&quot; asp-action=&quot;SignIn&quot;&gt;            Login        &lt;/a&gt;    &lt;/li&gt;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-新增ViewComponent-Cart的頁面"><a href="#1-2-新增ViewComponent-Cart的頁面" class="headerlink" title="1.2 新增ViewComponent Cart的頁面"></a>1.2 新增ViewComponent Cart的頁面</h2><p>在Views&#x2F;Shared的目錄，新增Components目錄，再新增Cart目錄，最後加上Default.cshtml，也就是之前繼承ViewComponent的Cart.cs會回傳的頁面，主要是顯示購物車的數量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@model WebMvc.ViewModels.CartComponentViewModel@&#123;     ViewData[&quot;Title&quot;] = &quot;My Cart&quot;;&#125;&lt;a class=&quot;@Model.Disabled&quot; asp-area=&quot;&quot; asp-controller=&quot;Cart&quot; asp-action=&quot;Index&quot;&gt;    @if (ViewBag.IsCartInoperative == true)    &#123;        &lt;p class=&quot;fa fa-2x fa-shopping-cart&quot;&gt;X&lt;/p&gt;    &#125;    else    &#123;        &lt;p class=&quot;fa fa-2x fa-shopping-cart&quot;&gt;@Model.ItemsInCart&lt;/p&gt;    &#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET Core</category>
      </categories>
  </entry>
  <entry>
    <title>[減肥日誌] Shaun T的 Focus T25 14周的成果</title>
    <url>/2020/09/13/%E6%B8%9B%E8%82%A5%E6%97%A5%E8%AA%8C-shaun-t%E7%9A%84-focus-t25-14%E5%91%A8%E7%9A%84%E6%88%90%E6%9E%9C/</url>
    <content><![CDATA[<p>上次的7周的文章: <a href="https://geekcodeparadise.com/2020/07/%e6%b8%9b%e8%82%a5%e6%97%a5%e8%aa%8c-shaun-t%e7%9a%84-focus-t25-7%e5%91%a8%e7%9a%84%e6%88%90%e6%9e%9c/">[減肥日誌] Shaun T的 Focus T25 7周的成果&#x2F;</a></p>
<p>又經過了7周，共14周的<a href="https://amzn.to/3FTPzZI">Focus T25訓練課程</a>如期完成，練到Gamma等級的課程真的是超級操．．．一堆的波比跳、舉啞鈴沒在間接休息，我最後頂多能跟上80%的進度吧….</p>
<p>身材的變化，身高體重沒變，而腰圍瘦成39吋！經過14周能從43 -&gt; 39，還蠻滿意的，牛仔褲的Size終於能穿更小號的XD</p>
<p>但這過程代價很大，尤其是腰部，從開始跳Gamma課程就開始每天痛，放假日才能放鬆恢復。所以建議有腰傷的人要注意使用這款訓練教材，也許能把波比跳的動作換成其他的。</p>
<p>這周一先調適身體、舒緩腰部，只做一周的啞鈴重訓，之後開始跳疲勞程度比Focus T25還高的Insanity ! 這款課程在Google搜尋 Insanity 知乎，有很多中國人的心得文，幾乎很有成效，但唯一缺點就時間比較久，每天的課程約40分鐘，比Focus T25多15分鐘，所以要盡早下班來拚看看。</p>
<p>Insanity的課程是9周，預計下次的減肥日誌是滿4周的成果，看能不能瘦到36吋腰圍，體重能下降是更好啦XD</p>
]]></content>
      <categories>
        <category>減肥日誌</category>
      </categories>
  </entry>
  <entry>
    <title>[減肥日誌] Shaun T的 Focus T25 7周的成果</title>
    <url>/2020/07/26/%E6%B8%9B%E8%82%A5%E6%97%A5%E8%AA%8C-shaun-t%E7%9A%84-focus-t25-7%E5%91%A8%E7%9A%84%E6%88%90%E6%9E%9C/</url>
    <content><![CDATA[<p>在辦公室長期坐著工作，體重成長超快，長的胖實在不好看，於是選擇有刷脂教練之神的<a href="https://amzn.to/3FTPzZI">Shaun T：Focus T25有氧運動</a>來試試，首先看看官網精美的廣告</p>
<p><a href="https://www.youtube.com/watch?v=k0xmCS8kjow&ab%5C_channel=JohnRiversFitness">https://www.youtube.com/watch?v=k0xmCS8kjow&amp;ab\_channel=JohnRiversFitness</a></p>
<p>太神奇啦，每位採訪者經過50天就能至少瘦20磅(大約9公斤)，看了還不心動！？只要每天專注地運動25分鐘，就能達到這效果！？</p>
<p>於是乎開始照它的課表跳，有分三大種：Alpha(5周), Beta(5周)和Gamma(4周)，初學者建議先從Alpha開始，Beta和Gamma是給有運動基礎的人，別輕易越級打怪．．．</p>
<p>從2020&#x2F;6&#x2F;8開始做Alpha，身體數值 180cm&#x2F;95kg&#x2F;42吋，夠胖吧QQ…. 2020&#x2F;7&#x2F;13換成Beta，到今天2020&#x2F;7&#x2F;26，經過7周的結果，身體數值 180cm&#x2F;94.5kg&#x2F;40吋，最驚訝的是腰圍瘦蠻多的，而且自認為體態比之前好看。體重沒什麼下降，就當作是變成肌肉的重量來安慰（？）</p>
<p>這成果沒有像廣告這麼明顯，除非他們50天全都是跳Gamma等級，還覺得比較有可能達成。另外我的飲食也有改變，平日早餐正常吃，中餐只吃雞胸肉料理、沒有白飯，晚餐只有麥片之類的流質飲品，假日正常吃。</p>
<p>［減肥］不只要看體重，還要量專業的Inbody數值會比較準確，比如肌肉重、體脂率，有時間再會量體脂現在多少，去年2019&#x2F;4月在某間奶昔健身房被推銷，給我免費量體脂計有33%….很誇張的高！</p>
<p>這篇主要是紀錄49天和廣告的比較，當然會持續地跳，還剩3周的Beta和4周的Gamma，希望再7周後，身體數值有更好的改變～</p>
]]></content>
      <categories>
        <category>減肥日誌</category>
      </categories>
  </entry>
  <entry>
    <title>[減肥日誌] Shaun T的 Insanity 2周 + Focus T25 4周的成果</title>
    <url>/2020/11/29/%E6%B8%9B%E8%82%A5%E6%97%A5%E8%AA%8C-shaun-t%E7%9A%84-insanity-2%E5%91%A8-focus-t25-4%E5%91%A8%E7%9A%84%E6%88%90%E6%9E%9C/</url>
    <content><![CDATA[<p>上次做Insantiy的4周的文章: <a href="https://geekcodeparadise.com/2020/10/18/%e6%b8%9b%e8%82%a5%e6%97%a5%e8%aa%8c-shaun-t%e7%9a%84-insanity-4%e5%91%a8%e7%9a%84%e6%88%90%e6%9e%9c/">https://geekcodeparadise.com/2020/10/18/%e6%b8%9b%e8%82%a5%e6%97%a5%e8%aa%8c-shaun-t%e7%9a%84-insanity-4%e5%91%a8%e7%9a%84%e6%88%90%e6%9e%9c/</a></p>
<p>從2020&#x2F;10&#x2F;19，開始<a href="https://amzn.to/42Exybx">實施Shaun T的Insanity後半部訓練課程</a>，其中第1周是會喘的拉伸動作，其目的是讓身體能適應第2個月的Insanity。</p>
<p>第2周是名稱以Max開頭的訓練課程，每個都快1小時，那個疲累程度真的是喘到Ｏ北，每天做完都有一種人已經快升天的感覺．．．每一種動作都很愛跳，跳，跳乎伊勇～跳，跳，跳甲要起瘋～～～(By LA BOYZ的跳)</p>
<p>原本第3周一樣跳Insanity，結果預料之中的疾病：膝蓋痠痛　開始發作，直覺是不能再繼續跳Insanity，於是改回跳Focus T25的Gamma，畢竟Gamma的跳動作比較少，很多動作是搭配啞鈴重訓，讓膝蓋的痛舒緩很多～且原本課表是跳周1至周5，我改成周6也跳。</p>
<p>到今天共6周的身材變化，體重變成91.3公斤，腰圍仍是38.5吋，而最令人心動十分的成果是，體脂率降到26% !!!!!從去年的33% -&gt; 26%，離男性正常的15%~25%很接近了!!從今年6月到現在共24周的付出沒有白費，實在可喜可賀。</p>
<p>體重和腰圍維持差不多的數值已3周，正在考慮換Insanity Max 30，它的時間一樣短且強度比Focus T25高，也許能讓身體數值有更好的成果，期待下次的減肥成果文吧～</p>
]]></content>
      <categories>
        <category>減肥日誌</category>
      </categories>
  </entry>
  <entry>
    <title>[減肥日誌] Shaun T的 Insanity 4周的成果</title>
    <url>/2020/10/18/%E6%B8%9B%E8%82%A5%E6%97%A5%E8%AA%8C-shaun-t%E7%9A%84-insanity-4%E5%91%A8%E7%9A%84%E6%88%90%E6%9E%9C/</url>
    <content><![CDATA[<p>上次做Focus T25的14周的文章: <a href="https://geekcodeparadise.com/2020/09/13/%e6%b8%9b%e8%82%a5%e6%97%a5%e8%aa%8c-shaun-t%e7%9a%84-focus-t25-14%e5%91%a8%e7%9a%84%e6%88%90%e6%9e%9c/">https://geekcodeparadise.com/2020/09/13/%e6%b8%9b%e8%82%a5%e6%97%a5%e8%aa%8c-shaun-t%e7%9a%84-focus-t25-14%e5%91%a8%e7%9a%84%e6%88%90%e6%9e%9c/</a></p>
<p>從2020&#x2F;9&#x2F;21，開始實施<a href="https://amzn.to/42Exybx">Shaun T的Insanity訓練課程</a>，來看看這課程的精美廣告</p>
<p>課程主打60天(9周)的運動效果，也是幾乎每個學員身材變壯、變瘦，令人心動十分。這個課程比Focus T25還有名，有刷脂神器的稱號，<a href="https://amzn.to/42Exybx">在Amazon上有4千多的評論</a>，蠻值得參考。</p>
<p>Insanity的訓練方式和Focus T25差很多，他約有10分鐘的激烈熱身、8分鐘動態伸展、20分鐘真正的HIIT動作，最後5分鐘收操，光是前面的激烈熱身就讓人滿頭汗。後面的HIIT動作，目前沒有一次完整做完，太操了……很多需要伏地挺身接著平板踢腿又要站起來又趴下去繼續做，後面腿都會軟掉XD</p>
<p>還好前面有經過Focus T25的14周訓練，讓我建立基礎的體能，否則可能做完第一周的Insanity，肌肉就痛到休養好幾天。</p>
<p>到今天共4周的身材變化，體重變成92公斤，腰圍瘦成38.5吋！又再次的進步！感到體能變最多的是，開合跳的速度可以超快，這應該是有史以來我跳最快的開合跳XD 但有隱憂的是膝蓋會不舒服QQ，有1~2次膝蓋不舒服就做得很差，所以要用這課程的人，需評估好身體狀況。</p>
<p>上次目標是36吋腰圍，但還太早了，還有5周且又更強的課程等著去完成，希望下次發文又是進步的成果～</p>
]]></content>
      <categories>
        <category>減肥日誌</category>
      </categories>
  </entry>
  <entry>
    <title>[讀書筆記] Professional JavaScript for Web Developers - 第1章 JavaScript簡介</title>
    <url>/2020/05/10/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-professional-javascript-for-web-developers-%E7%AC%AC1%E7%AB%A0-javascript%E7%B0%A1%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="1-1-JavaScript簡史"><a href="#1-1-JavaScript簡史" class="headerlink" title="1.1 JavaScript簡史"></a>1.1 JavaScript簡史</h2><ul>
<li>European Computer Manufacturers Association (ECMA)專門制定JS</li>
<li>ECMA-262為ECMAScript (發音 ek-ma-script)</li>
<li>ISO將ECMAScript採納為ISO&#x2F;IEC-16262, 瀏覽器開發商以此為標準實作JS的功能</li>
</ul>
<h2 id="1-2-JavaScript實作"><a href="#1-2-JavaScript實作" class="headerlink" title="1.2 JavaScript實作"></a>1.2 JavaScript實作</h2><ul>
<li>JS包含三大元素</li>
</ul>
<ol>
<li>核心 (ECMAScript)</li>
<li>Document Object Model (DOM)</li>
<li>Browser Object Model (BOM)</li>
</ol>
<ul>
<li>ECMAScript本身和瀏覽器無直接關係</li>
<li>瀏覽器只是Host environment, 可以執行ECMAScript的平台, 可以和DOM交互作用</li>
<li>其他Host environment包含Node.js、過時的Adobe Flash</li>
<li>ECMAScript定7大種功能</li>
</ul>
<ol>
<li>Syntax</li>
<li>Types</li>
<li>Statements</li>
<li>Keywords</li>
<li>Reversed words</li>
<li>Operators</li>
<li>Global objects</li>
</ol>
<h3 id="1-2-1-ECMAScript"><a href="#1-2-1-ECMAScript" class="headerlink" title="1.2.1 ECMAScript"></a>1.2.1 ECMAScript</h3><h4 id="1-2-1-1-ECMAScript的版本"><a href="#1-2-1-1-ECMAScript的版本" class="headerlink" title="1.2.1.1 ECMAScript的版本"></a>1.2.1.1 ECMAScript的版本</h4><ul>
<li>ECMAScript 3.1: 2009發布的第5版修改(ES5), 包含JSON解析與序列化、method的繼承等</li>
<li>ECMAScript 6: 2015第6版修改, 也稱為ES6、ES2015</li>
<li>ECMAScript 7: 2016第7版修改, 也稱為ES7、ES2016</li>
<li>ECMAScript 8: 2017第8版修改, 也稱為ES8、ES2017</li>
</ul>
<h4 id="1-2-1-2-ECMAScript的兼容性"><a href="#1-2-1-2-ECMAScript的兼容性" class="headerlink" title="1.2.1.2 ECMAScript的兼容性"></a>1.2.1.2 ECMAScript的兼容性</h4><ul>
<li>必須支援ECMAScript規範的types, values, objects, properties, functions, program syntax, program semantics</li>
<li>必須支援 Unicode字元集</li>
<li>可擴展額外的types, values, objects, properties, function</li>
<li>支援沒在ECMAScript定義的正規表達式語法</li>
</ul>
<h4 id="1-2-1-3-瀏覽器對ECMAScript的支援"><a href="#1-2-1-3-瀏覽器對ECMAScript的支援" class="headerlink" title="1.2.1.3 瀏覽器對ECMAScript的支援"></a>1.2.1.3 瀏覽器對ECMAScript的支援</h4><ul>
<li><p>IE 8不完整支援ES3 (才ES3!?), IE 9也不完整支援ES5 (!?), 直到IE 10以後版本才完整支援ES5, IE真是前端工程師的惡夢</p>
</li>
<li><p>Edge 12+有支援ES6</p>
</li>
<li><p>其他瀏覽器只要有更新, 別太擔心ES的版本啦~</p>
</li>
</ul>
<p> </p>
<h3 id="1-2-2-Document-Object-Model"><a href="#1-2-2-Document-Object-Model" class="headerlink" title="1.2.2 Document Object Model"></a>1.2.2 Document Object Model</h3><ul>
<li>對於XML&#x2F;HTML文件的API</li>
<li>每一層節點都可以剖析成樹狀圖</li>
<li>W3C規劃DOM的功能</li>
<li>最早DOM1核心是以XML做Mapping, 後來延伸HTML的DOM</li>
<li>不只是JS才有DOM, 其他程式語言也有實作</li>
<li>DOM2新增多個功能的Interfaces</li>
</ul>
<ol>
<li><p>DOM View:文件變化(比如CSS套用)前&#x2F;後的對照</p>
</li>
<li><p>DOM Events: 事件處理</p>
</li>
<li><p>DOM Style: 應用CSS</p>
</li>
<li><p>DOM Traversal and Range: 操作文件樹</p>
</li>
</ol>
<ul>
<li><p>DOM3新增 文件的新增、載入(DOM Load &amp; Save)、文件的驗證 (DOM Validation)</p>
</li>
<li><p>其他的DOM標準像是支援SVG、MathML數學標記、SMIL(Synchronized Multimedia Integration Language)</p>
</li>
<li><p>DOM1~3也是有區分瀏覽器版本的支援(!!??)</p>
</li>
</ul>
<h3 id="1-2-3-Browser-Object-Model"><a href="#1-2-3-Browser-Object-Model" class="headerlink" title="1.2.3 Browser Object Model"></a>1.2.3 Browser Object Model</h3><ul>
<li><p>BOM可以操作瀏覽器顯示頁面內文以外的東西</p>
</li>
<li><p>最早的BOM沒有規範</p>
</li>
<li><p>HTML5發布, 才將BOM寫入規範</p>
</li>
<li><p>常見擴展的功能</p>
</li>
</ul>
<ol>
<li><p>彈出新視窗</p>
</li>
<li><p>移動、縮放、關閉</p>
</li>
<li><p>瀏覽器詳細資訊的navigator物件</p>
</li>
<li><p>瀏覽器載入頁面的詳細資訊location物件</p>
</li>
<li><p>使用者視窗解析度screen物件</p>
</li>
<li><p>對cookie的支援</p>
</li>
<li><p>XMLHttpRequest和IE獨特的ActiveXObject物件</p>
</li>
</ol>
<h2 id="1-3-JavaScript版本"><a href="#1-3-JavaScript版本" class="headerlink" title="1.3 JavaScript版本"></a>1.3 JavaScript版本</h2><ul>
<li><p>只有Mozilla (前身Netscape)才有沿用JS的版本, 但也只有到1.8.5</p>
</li>
<li><p>歷史版本簡介: <a href="https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript">https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript</a></p>
</li>
<li><p>現在大宗瀏覽器都以ECMAScript版本為主</p>
</li>
</ul>
<h2 id="2-與書本內容無關的個人心得"><a href="#2-與書本內容無關的個人心得" class="headerlink" title="2. 與書本內容無關的個人心得"></a>2. 與書本內容無關的個人心得</h2><p>      這陣子在考慮軟體開發的職涯，雖然寫了5年ASP.NET，但對於[JavaScript]仍不是熟悉，可能是太依賴jQuery或SPA框架而導致原生JS知識較生疏，於是勉勵自己要把JS的經典書讀完加做筆記，希望之後開發Web系統更加完善。</p>
<h2 id="3-參考資料"><a href="#3-參考資料" class="headerlink" title="3. 參考資料"></a>3. 參考資料</h2><ol>
<li>Professional JavaScript for Web Developers 4th Edition, Chapter 1 : What Is Javascript? , Matt Frisbie.</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>[讀書筆記] Professional JavaScript for Web Developers - 第2章 在HTML中使用JavaScript</title>
    <url>/2020/05/12/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-professional-javascript-for-web-developers-%E7%AC%AC2%E7%AB%A0-%E5%9C%A8html%E4%B8%AD%E4%BD%BF%E7%94%A8javascript/</url>
    <content><![CDATA[<h2 id="1-1-Element"><a href="#1-1-Element" class="headerlink" title="1.1  Element"></a>1.1 <script> Element</h2><ul>
<li>最早是Netscape實作, 後來HTML才加入它為規範之一</li>
<li>有8種屬性</li>
</ul>
<p>1. async: 可選, 代表立即下載該腳本, 但不影響頁面其他的動作(ex: 載入其他的腳本), 只能用在外部腳本.<br>2. charset: 可選, 指定src所指的字元集, 但現在很少使用<br>3. crossorigin: 可選, 設定request的CORS, 預設CORS不使用. 如果是 crossorigin="anonymous", 不會帶入credential標記; 如果是 crissirugub="use-credentials", 將設credential標記, request帶著credentials. </p>
<p>在MDN有一段很詳細的解釋:</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin</a></p>
<p>實驗: </p>
<p>在開一個本機端建立一個html, <script>代一個jQuery的cdn連結:</p>
<p><strong>anonymous</strong>: CORS requests for this element will have the credentials flag set to 'same-origin'. </p>
<p>在Chrome DevTool可看見 Request header多帶了 Origin參數</p>
<p><strong>use-credentials</strong>: CORS requests for this element will have the credentials flag set to 'include'. </p>
<p>在Chrome DevTool的console會有error : </p>
<p>Access to script at '<a href="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>' from origin '<a href="https://cdpn.io/">https://cdpn.io</a>' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.  </p>
<p>也代表Client和Server都要有同Domain.</p>
<p>4. defer: 可選, 可延遲到頁面被完全解析與載入後再執行此腳本, 只能用在外部腳本.</p>
<p>5. integrity: 可選, 驗證Subresource Integrity (SRI)(比如 CDN的資源)的簽名和此屬性有無相符. 沒有相符則此script不會執行.</p>
<p>假如有個CDN腳本連結: <script src="<a href="https://example.com/example-framework.js">https://example.com/example-framework.js</a>"</p>
<p>        integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"></script></p>
<p>可知道是用sha384做hash而得到oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K&#x2F;uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC的base64字串, 則瀏覽器會對文檔做同樣sha384 hash且輸出base64, 檢查是否和CDN提供的一樣.</p>
<p>6. language: 不推薦使用, 指定腳本的語言, 比如”JavaScript”, 但現代瀏覽器不會看此屬性.</p>
<p>7. src: 可選, 指定要執行程式碼的外部檔案.</p>
<p>8. type: 可選, 指的是內文類型(也就是MIME類型), 用來取代language屬性. 早期都是”text&#x2F;javascript”. 現代也能用”module”值, 代表是ES6模組, 只能用在import&#x2F;export.</p>
<ul>
<li><script>的使用方式有2種: 在頁面嵌入外部js檔案和在<script>裡寫JS程式碼 (Inline)</li>
<li><script>是從上而下執行</li>
<li>當<script>內部執行完之前, 頁面其他內容不會載入/顯示</li>
<li>別任意出現</script>字串, 比如下方sayScript, 將被瀏覽器直譯為結束<script></li>
</ul>
<script>  
function sayScript() {  
console.log("</script>");  
<p>}<br></script>    </p>
<ul>
<li>所以要改成跳脫符號 來解決 :  console.log(“</script>“);</li>
<li>若要載入外部JS檔案, 則必須用src屬性.</li>
<li>XHTML的<script src="..."></script>結尾可簡化 : &lt;script src&#x3D;”example.js &#x2F;&gt;   , 一般HTML頁面不行.</li>
<li>瀏覽器不會檢查<script src="...">的副檔名.</li>
<li>在已經有src的<script>裡還加Inline JS語法, 仍只會執行載入外部檔案的功能.</li>
<li>除了async和defer的屬性, <script>的執行順序都是從上而下依次進行.</li>
</ul>
<h3 id="1-1-1-Tag-Placement"><a href="#1-1-1-Tag-Placement" class="headerlink" title="1.1.1 Tag Placement"></a>1.1.1 Tag Placement</h3><ul>
<li>早期都把<script src="...">放在<head>  .</li>
<li>但現在JS數量/功能越多, 變成先執行大量JS而頁面body還沒執行, 將會是一段時間都空白.</li>
<li>現代Web建議把<script>放在</body>結尾之前, 讓頁面先呈現東西.</li>
</ul>
<h3 id="1-1-2-Deferred-Scripts"><a href="#1-1-2-Deferred-Scripts" class="headerlink" title="1.1.2 Deferred Scripts"></a>1.1.2 Deferred Scripts</h3><ul>
<li>HTML 4.01導入defer屬性, 使外部JS檔案可以先下載, 但會在DOM完成後、DOMContentLoaded事件之前的中間時間做執行檔案的程式碼</li>
<li>使用defer的順序跟後續執行的順序照理一樣, 但並不總是這樣.</li>
<li>基於HTML5規範, defer用在Inline code不會起作用</li>
<li>在XHTML裡, 要用defer的寫法為 <script defer="defer"></script></li>
</ul>
<h3 id="1-1-3-Asynchronous-Scripts"><a href="#1-1-3-Asynchronous-Scripts" class="headerlink" title="1.1.3 Asynchronous Scripts"></a>1.1.3 Asynchronous Scripts</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul>
<li>HTML5定義async屬性, 只能用在外部JS檔案, 功能是不讓頁面等待檔案的下載和執行.</li>
<li>和defer不同, 執行的順序不保證. 因此多個async的檔案之間不要有相依性.</li>
<li>async的腳本別在載入時期做DOM的修改</li>
<li>async腳本一定在頁面load之前執行, 但可能在DOMContentLoaded前或後執行.</li>
<li>在XHTML裡, 要用async的寫法為 <script async="async"><script></li>
</ul>
<h3 id="1-1-4-Dynamic-Script-Loading"><a href="#1-1-4-Dynamic-Script-Loading" class="headerlink" title="1.1.4 Dynamic Script Loading"></a>1.1.4 Dynamic Script Loading</h3><ul>
<li><script>元素可以透過JS動態建立
</li>
<li><p>行為預設和async一樣</p>
</li>
<li><p>範例寫法</p>
</li>
</ul>
<p>let script = document.createElement('script');<br>script.src = 'MyCode.js';<br>document.head.appendChild(script);    </p>
<ul>
<li>並不是所有瀏覽器都支援async, 可以改成script.async = false;</li>
</ul>
<h3 id="1-1-5-Changes-In-XHTML"><a href="#1-1-5-Changes-In-XHTML" class="headerlink" title="1.1.5 Changes In XHTML"></a>1.1.5 Changes In XHTML</h3><ul>
<li><p>Extensible HyperText Markup Language (XHTML) 是將HTML以XML方式來解析.</p>
</li>
<li><p>特殊案例, 比如有一段inline code 執行 if (a < b) , 由於< 是XML的element開頭, 會導致解析錯誤</p>
</li>
<li><p>解法1: 將< 或 >替換成HTML符號 &lt;  &gt;</p>
</li>
<li><p>解法2: 使用<![CDATA[ ...code .... ]]> </p>
</li>
<li><p>但有些瀏覽器仍不支援XHTML, 要再把使用<![CDATA[的功能註解</p>
</li>
<li><p>XHTML的MIME是 application/xhtml+xml</p>
</li>
</ul>
<h2 id="1-2-Inline-code-VS-External-File"><a href="#1-2-Inline-code-VS-External-File" class="headerlink" title="1.2 Inline code VS External File"></a>1.2 Inline code VS External File</h2><ul>
<li>盡可能使用外部檔案, 好處有</li>
</ul>
<ol>
<li><p>可維護性</p>
</li>
<li><p>可緩存</p>
</li>
<li><p>Future-proof(適應未來): HTML和XHTML都能用外部檔案, 避免有inline的code有的要註解、有的要加特殊語法</p>
</li>
</ol>
<ul>
<li>支援 SPDY/HTTP2的瀏覽器, 可以對外部檔案做cache, 提供別的頁面重複使用.比如A頁面請求 a.js, b.js, B頁面請求b.js, c.js, 當A頁面載入後會cache a.js, b.js, 而開B頁面時會因為有cache b.js而直接用, 節省請求頻寬.</li>
</ul>
<h2 id="1-3-Document-Modes"><a href="#1-3-Document-Modes" class="headerlink" title="1.3 Document Modes"></a>1.3 Document Modes</h2><ul>
<li>IE 5.5導入文件模式, 是依照doctype的切換來實作.</li>
<li>有quirks mode和standards mode, quirks mode會讓IE執行IE5的的行為(且包含一些非標準的功能)、standards mode讓IE執行比較標準.</li>
<li>模式的差異會影響CSS、JS.</li>
<li>IE後來又推出 almost standards mode (!!??), 主要會影響圖片的呈現.</li>
<li>如果檔案開頭沒任何doctype, 則瀏覽器預設開啟quirks mode.</li>
<li>MDN有個連結, 提供很完整的doctype對應的模式  <a href="https://hsivonen.fi/doctype/">https://hsivonen.fi/doctype/</a> , 而現行瀏覽器最常用的 standards mode <!DOCTYPE html> 是 HTML5.</li>
</ul>
<p> </p>
<h2 id="1-4-Element"><a href="#1-4-Element" class="headerlink" title="1.4  Element"></a>1.4 <noscript> Element</h2><ul>
<li>當瀏覽器不能使用JS時, 在<noscript>裡的非JS內容會被呈現.</li>
<li>不能使用的條件</li>
</ul>
<ol>
<li><p>瀏覽器不支援JS</p>
</li>
<li><p>瀏覽器支援JS但設定檔將它失效</p>
</li>
</ol>
<ul>
<li>如果瀏覽器正常能使用JS, 則<noscript>的內容不會呈現</li>
</ul>
<h2 id="2-參考資料"><a href="#2-參考資料" class="headerlink" title="2. 參考資料"></a>2. 參考資料</h2><ol>
<li>Professional JavaScript for Web Developers 4th Edition, Chapter 2 : Javascript In HTML, Matt Frisbie.</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>[讀書筆記] Professional JavaScript for Web Developers - 第3章 基本概念</title>
    <url>/2020/05/23/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-professional-javascript-for-web-developers-%E7%AC%AC3%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="1-1-Syntax"><a href="#1-1-Syntax" class="headerlink" title="1.1 Syntax"></a>1.1 Syntax</h2><h3 id="1-1-1-Case-Sensitivity"><a href="#1-1-1-Case-Sensitivity" class="headerlink" title="1.1.1 Case-Sensitivity"></a>1.1.1 Case-Sensitivity</h3><h3 id="1-1-2-Identifiers"><a href="#1-1-2-Identifiers" class="headerlink" title="1.1.2 Identifiers"></a>1.1.2 Identifiers</h3><ul>
<li>變數、函式、屬性、函式參數的名稱, 都是identifier</li>
<li>命名規則: 第1個字元只能是字母、底線 _ 或 錢字符號 $ ; 第二個字元以後可以是字母、底線 _ 、 錢字符號 $ 或 數字</li>
<li>字母可以是擴展的ASCII或Unicode特殊的字母Â、 â之類的，但不推薦</li>
<li>採用camelCaseNaming</li>
<li>不能把keywords, reserved word當identifier</li>
</ul>
<h3 id="1-1-3-Comments"><a href="#1-1-3-Comments" class="headerlink" title="1.1.3 Comments"></a>1.1.3 Comments</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul>
<li>單行註解  &#x2F;&#x2F; comment</li>
<li>多行註解</li>
</ul>
<p> </p>
<p>     &#x2F;*</p>
<p>      * comments</p>
<p>     *&#x2F;</p>
<h3 id="1-1-4-Strict-Mode"><a href="#1-1-4-Strict-Mode" class="headerlink" title="1.1.4 Strict Mode"></a>1.1.4 Strict Mode</h3><ul>
<li><p>ES5導入strict mode, 以不同的方式解析、執行JS, 且也對ES3的部分寫法拋出異常</p>
</li>
<li><p>使用方式, 在腳本最上方寫</p>
</li>
</ul>
<p>  </p>
<p>       “use strict”;</p>
<ul>
<li>也能在function內寫 “use strict”; , 影響的只會限於function內部</li>
</ul>
<h3 id="1-1-5-Statements"><a href="#1-1-5-Statements" class="headerlink" title="1.1.5 Statements"></a>1.1.5 Statements</h3><ul>
<li>statement都以分號 ; 結尾 , 可以不加;結尾, 但不推薦</li>
<li>有用分號;結尾對於JS的解析性能較好</li>
<li>有用if , for的code block, 建議都用 {} 包住, 不要省略</li>
</ul>
<h2 id="1-2-Keywords-and-Reserved-words"><a href="#1-2-Keywords-and-Reserved-words" class="headerlink" title="1.2 Keywords and Reserved words"></a>1.2 Keywords and Reserved words</h2><ul>
<li><p>keywords有控制流程、特殊運算等功能, 不能拿來當identitifer命名</p>
</li>
<li><p>ES6的keywords<br>break do in typeof case else instanceof var catch export new void class extends return while const finally super with continue for switch yield debugger function this default if throw delete import try    </p>
</li>
<li><p>future reserved words不能被設為identifier, 但現行沒提供功能, 未來有可能會使用, 於是先預訂這些詞.</p>
</li>
<li><p>總是reserved : enum</p>
</li>
<li><p>在strict mode是reserved:  implements  interface  let  package  private  protected  public  static</p>
</li>
<li><p>在module模式的reserved: await</p>
</li>
</ul>
<h2 id="1-3-Variables"><a href="#1-3-Variables" class="headerlink" title="1.3 Variables"></a>1.3 Variables</h2><ul>
<li>ES5以前只有var用來宣告變數</li>
<li>ES6訂定const 和 let</li>
</ul>
<p> </p>
<h3 id="1-3-1-var-keyword"><a href="#1-3-1-var-keyword" class="headerlink" title="1.3.1 var keyword"></a>1.3.1 var keyword</h3><ul>
<li>var的變數能賦予任何資料型別的值, 且能用其他資料型別的值覆蓋, 不建議這麼做.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var msg = 1; // 值是數字1msg = &quot;5566&quot;;  // 值變成字串&quot;5566&quot;, 但不建議這麼做                    </span><br></pre></td></tr></table></figure>

<ul>
<li>只有宣告但沒賦值, 它的值會是undefined</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var msg; // undefined</span><br></pre></td></tr></table></figure>

<h4 id="1-3-1-1-var-Declaration-Scope"><a href="#1-3-1-1-var-Declaration-Scope" class="headerlink" title="1.3.1.1 var Declaration Scope"></a>1.3.1.1 var Declaration Scope</h4><ul>
<li>var是function scope</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sayHi() &#123;     var msg = 1;  &#125;sayHi(); console.log(msg); // 會有error</span><br></pre></td></tr></table></figure>

<ul>
<li>可以忽略var關鍵字, 變成global variable, 但不建議這麼做</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sayHi() &#123;     msg = 1;  &#125;sayHi(); console.log(msg); // 輸出1, 之後其他都能存取msg變數</span><br></pre></td></tr></table></figure>

<ul>
<li>var可一次宣告多的變數, 用逗點 , 串接</li>
</ul>
<h4 id="1-3-1-2-var-Declaration-Hoisting"><a href="#1-3-1-2-var-Declaration-Hoisting" class="headerlink" title="1.3.1.2 var Declaration Hoisting"></a>1.3.1.2 var Declaration Hoisting</h4><ul>
<li>var在”宣告”的時候會發生hoisting(懸吊), 將var的宣告拉到scope的最上方</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sayHi() &#123;     console.log(msg);    var msg = &quot;hi&quot;;&#125;sayHi(); // 輸出undefined/* JS會將上方寫法轉為等同功能的下方 */function sayHi() &#123;    var msg;    console.log(msg);    msg = &quot;hi&quot;;&#125;sayHi(); // 輸出undefined</span><br></pre></td></tr></table></figure>

<ul>
<li>var宣告同一種變數名稱指定不同的值, 也是一樣hoisting</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sayHi() &#123;    var msg = &quot;123&quot;;   var msg = &quot;456&quot;;   var msg = &quot;789&quot;;   console.log(msg);&#125;sayHi(); // 輸出789</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-let-Declarations"><a href="#1-3-2-let-Declarations" class="headerlink" title="1.3.2 let Declarations"></a>1.3.2 let Declarations</h3><ul>
<li>let和var很像, 但主要差異在於let是block scope</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (true)&#123;   var msg = &#x27;hello&#x27;;   console.log(msg); // 輸出hello&#125;console.log(msg); //輸出helloif (true)&#123;   let height = 100;   console.log(height); // 輸出100&#125;console.log(height); //產生錯誤: Uncaught ReferenceError: height is not defined</span><br></pre></td></tr></table></figure>

<ul>
<li>let無法重複宣告, 也無法蓋掉var的宣告</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x;let x; //產生錯誤: Uncaught SyntaxError: Identifier &#x27;x&#x27; has already been declaredvar y;let y; //產生錯誤: Uncaught SyntaxError: Identifier &#x27;y&#x27; has already been declared</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-1-Temporal-Dead-Zone"><a href="#1-3-2-1-Temporal-Dead-Zone" class="headerlink" title="1.3.2.1 Temporal Dead Zone"></a>1.3.2.1 Temporal Dead Zone</h4><ul>
<li>let沒有hoisting的特性, 如果學var會產生錯誤 ReferenceError: ‘xxx’ is not defined</li>
</ul>
<p>    </p>
<h4 id="1-3-2-2-Global-Declarations"><a href="#1-3-2-2-Global-Declarations" class="headerlink" title="1.3.2.2 Global Declarations"></a>1.3.2.2 Global Declarations</h4><ul>
<li>let的變數不會到global context, 比如不會附加到window物件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = &#x27;1&#x27;;console.log(window.x); // 輸出1let y = &#x27;2&#x27;;console.log(window.y); // 輸出undefined</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-3-Conditional-Declaration"><a href="#1-3-2-3-Conditional-Declaration" class="headerlink" title="1.3.2.3 Conditional Declaration"></a>1.3.2.3 Conditional Declaration</h4><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul>
<li>用try&#x2F;catch或typeof等判斷變數是否有被宣告, 在block code用let仍只是block scope</li>
<li>建議都別用let在conditional declaration</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (typeof msg !== &#x27;undefined&#x27;) &#123;    let msg; // 只是block scope的變數&#125;msg = &#x27;hello&#x27;; // msg變成global variable</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-4-let-declaration-in-for-loops"><a href="#1-3-2-4-let-declaration-in-for-loops" class="headerlink" title="1.3.2.4 let declaration in for loops"></a>1.3.2.4 let declaration in for loops</h4><ul>
<li>用var當for迴圈的宣告索引, for外面仍可使用那個索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0;i &lt; 10;++i) &#123;   // do anything&#125;console.log(i); // 輸出10</span><br></pre></td></tr></table></figure>

<ul>
<li>用let當for迴圈的宣告索引, for外面不能存取那個索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (let i = 0;i &lt; 10;++i) &#123;   // do anything&#125;console.log(i); // 產生錯誤 Uncaught ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>

<ul>
<li>在for迴圈用setTimeout對var索引做輸出時, 因為var都是同一個物件, 所以setTimeout後來的執行都是最後更新的索引值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0;i &lt; 10;++i) &#123;   setTimeout(() =&gt; console.log(i), 0);&#125;// 輸出 10,10,10,10,10,10,10,10,10,10</span><br></pre></td></tr></table></figure>

<ul>
<li>在for迴圈用setTimeout對let索引做輸出時, let在每次的迴圈都產生新的索引物件, 所以setTimeout執行都存取當下的索引物件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (let i = 0;i &lt; 10;++i) &#123;   setTimeout(() =&gt; console.log(i), 0);&#125;// 輸出 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-const-Declarations"><a href="#1-3-3-const-Declarations" class="headerlink" title="1.3.3 const Declarations"></a>1.3.3 const Declarations</h3><ul>
<li>用const宣告和let大部分功能一樣, 但必須對const的變數賦值, 且它的值就不能再改變</li>
<li>不能用const在for迴圈的改變索引值，但可以用在一開始的賦值</li>
<li>const用在object, 是可以改裡面的key&#x2F;value.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const x = 5;x = 100; // 產生錯誤 Uncaught TypeError: Assignment to constant variable.const y = &#123;&#125;; // 宣告objecty.name = &quot;John&quot;;console.log(y.name); // 輸出Johnfor (const k = 0; k &lt; 10;++k)&#123;    console.log(k); // 在++k這一段會產生錯誤 Uncaught TypeError: Assignment to constant variable.&#125;let i = 0;for (const j = 100; i &lt; 5;++i) &#123;    console.log(j);&#125;// j 只在初始化賦值, 沒有用++j做改值, 是合法的.// 輸出 100, 100, 100. 100. 100for (const key in &#123;x:5, y:6&#125;)&#123;    console.log(key);&#125;// 輸出x, yfor (const value of [7,8,9]) &#123;    console.log(value);&#125;// 輸出 7, 8, 9</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-宣告風格和最佳實踐"><a href="#1-3-3-宣告風格和最佳實踐" class="headerlink" title="1.3.3 宣告風格和最佳實踐"></a>1.3.3 宣告風格和最佳實踐</h3><ul>
<li>別用var, 以免scope等問題</li>
<li>使用const優於let, 除非是必須改值的功能, 否則用const可免於被其他功能改值而產生錯誤</li>
</ul>
<h2 id="1-4-Data-Types"><a href="#1-4-Data-Types" class="headerlink" title="1.4 Data Types"></a>1.4 Data Types</h2><ul>
<li>6種基本的data type(稱為 Primitive types), 另1種是複雜的data type : object, 共7種.</li>
<li>object是無順序的key&#x2F;value集合, 裡面的值可以包含上述的7種data type</li>
<li>6種primitive types, 其中Symbol是ES6才加入</li>
</ul>
<ol>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Symbol</li>
</ol>
<h3 id="1-4-1-typeof-operator"><a href="#1-4-1-typeof-operator" class="headerlink" title="1.4.1 typeof operator"></a>1.4.1 typeof operator</h3><ul>
<li>用來檢測某變數的data type</li>
<li>用typeof可能的值</li>
</ul>
<ol>
<li><p>“undefined”</p>
</li>
<li><p>“boolean”</p>
</li>
<li><p>“string”</p>
</li>
<li><p>“number”</p>
</li>
<li><p>“object”</p>
</li>
<li><p>“function”</p>
</li>
<li><p>“symbol”</p>
</li>
</ol>
<ul>
<li>typeof null , 會得到”object”, 因為null是空object的reference</li>
</ul>
<h3 id="1-4-2-Undefined-Type"><a href="#1-4-2-Undefined-Type" class="headerlink" title="1.4.2 Undefined Type"></a>1.4.2 Undefined Type</h3><ul>
<li><p>Undefined type只有一個值, 就是undefined.</p>
</li>
<li><p>變數被var&#x2F;let宣告但沒初始化, 則它的預設值為undefined, 不會是null</p>
</li>
<li><p>當變數沒被宣告, 用console.log等函式會找不到變數而產生錯誤; 但用typeof 會得到 “undefined”</p>
</li>
<li><p>以結果來說, 被宣告而沒初始化 和 沒有宣告, 都是無法操作的東西, 所以typeof得到”undefined”是合理的</p>
</li>
<li><p>建議被宣告的變數都要初始化, 別讓typeof判斷undefined而無法知道它是沒被宣告還是沒被初始化</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let msg;console.log(msg); // 輸出 undefinedconsole.log(index); // 產生錯誤 Uncaught ReferenceError: index is not definedtypeof msg; // 輸出 &quot;undefined&quot;typeof index; // 輸出 &quot;undefined&quot;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-Null-Type"><a href="#1-4-3-Null-Type" class="headerlink" title="1.4.3 Null Type"></a>1.4.3 Null Type</h3><ul>
<li><p>Null type只有一個值, 就是null.</p>
</li>
<li><p>typeof null的值為 “object”</p>
</li>
<li><p>用null初始化變數, 可用來區分undefined</p>
</li>
<li><p>undefined是null的衍生物, 用&#x3D;&#x3D;比對可得到true</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(undefined == null); // 輸出trueconsole.log(undefined === null); // 輸出false</span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-Boolean-Type"><a href="#1-4-4-Boolean-Type" class="headerlink" title="1.4.4 Boolean Type"></a>1.4.4 Boolean Type</h3><ul>
<li>Boolean只有2種值: true 和 false</li>
<li>true 不等於 1 , false 不等於 0</li>
<li>可以用 Boolean()函式將值轉換成boolean, 其轉換對照如下</li>
</ul>
<p> Data type </p>
<p>哪些值轉換成true </p>
<p>哪些值轉換成false </p>
<p> Boolean</p>
<p> true</p>
<p> false </p>
<p> String</p>
<p> 任何非空字串 </p>
<p> 空字串 “”</p>
<p> Number</p>
<p> 任何非0(也包含無限大)</p>
<p> 0 和 NaN </p>
<p> Object</p>
<p> 任何物件</p>
<p> null </p>
<p> Undefined </p>
<p> 沒有值可為true </p>
<p> undefined</p>
<ul>
<li>像是if等控制條件的()的裡面判斷, 自動用Boolean()的轉換</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = &#x27;hello&#x27;;     if(x)&#123;        console.log(x); // 這行會執行, 輸出 hello     &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-5-Number-Type"><a href="#1-4-5-Number-Type" class="headerlink" title="1.4.5 Number Type"></a>1.4.5 Number Type</h3><ul>
<li>包含整數和浮點數(雙精度)</li>
<li>一般整數是10進位, 也能寫成8進位(用0開頭)、16進位(用0x或0X開頭)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let intNum = 5566;           let octalNum1 = 050; // 等於10進位的40     let octalNum2 = 059; // 不符合8進位, 所以會是10進位的59     let octalNum3 = 09; // 不符合8進位, 所以會是10進位的9          let hexNum1 = 0xB; // 等於10進位的11     let hexNum2 = 0X1C; // 等於10進位的28</span><br></pre></td></tr></table></figure>

<h4 id="1-4-5-1-Floating-Point-Values"><a href="#1-4-5-1-Floating-Point-Values" class="headerlink" title="1.4.5.1 Floating-Point Values"></a>1.4.5.1 Floating-Point Values</h4><ul>
<li><p>數字後方有一個小數點 . , 後面再串非0的數字, 則會是浮點數</p>
</li>
<li><p>只有小數點後方再接非0數字, 也是浮點數, 不建議這樣表示</p>
</li>
<li><p>數字後方有一個小數點 . , 後面再串空的或全都是0, 則會是整數</p>
</li>
<li><p>可以用 e 科學符號</p>
</li>
<li><p>浮點數精準度最高到17位小數</p>
</li>
<li><p>經典浮點數精準度問題: 0.1 + 0.2 &#x3D; 0.30000000000000004    </p>
</li>
<li><p>建議有些判斷不要用在浮點數</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let floatNum1 = 1.2; // 浮點數 1.2     let floatNum2 = 0.2; // 浮點數 0.2     let floatNum3 = .2; // 浮點數 0.2          let floatNum4 = 6.; // 等於整數的 6     let floatNum5 = 7.0; // 等於整數的 7     let floatNum6 = 1.234e3; // 等於整數 1234     let floatNum7 = 1.234e-3; // 等於浮點數 0.001234     let sums = 0.1 + 0.2; // sums 等於 0.30000000000000004     let sums2 = 0.1 + 0.7; // sums2 等於 0.7999999999999999</span><br></pre></td></tr></table></figure>

<h4 id="1-4-5-2-Range-Of-Values"><a href="#1-4-5-2-Range-Of-Values" class="headerlink" title="1.4.5.2 Range Of Values"></a>1.4.5.2 Range Of Values</h4><ul>
<li>在正數當中, JS能表示的最大值是Number.MAX_VALUE &#x3D; 1.7976931348623157e+308 ; 最小值是 Number.MIN_VALUE &#x3D; 5e-324</li>
<li>如果數值計算過程超過JS的數值範圍, 將變成特殊值 Infinity, 如果是負數為 -Infinity</li>
<li>任何Infinity無法再做計算</li>
<li>可以用isFinite()檢測數字是否為Infinity</li>
<li>可以用Number.NEGATIVE_INFINITY和Number.POSITIVE_INFINITY取得負和正的Infinity值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(isFinite(5566)) // 輸出 true     console.log(isFinite(Number.MAX_VALUE + Number.MAX_VALUE)); // 輸出 false</span><br></pre></td></tr></table></figure>

<h4 id="1-4-5-3-NaN"><a href="#1-4-5-3-NaN" class="headerlink" title="1.4.5.3 NaN"></a>1.4.5.3 NaN</h4><ul>
<li><p>意思是Not a number</p>
</li>
<li><p>其他程式語言是數字計算的結果無法正當回傳則是拋exception, 而JS是回傳NaN</p>
</li>
<li><p>NaN任何的操作都是NaN, 做任何比對也是NaN(包括自己)</p>
</li>
<li><p>只能用isNaN()函式判斷是否為NaN</p>
</li>
<li><p>isNaN()會將參數嘗試轉換, 是否能變成數字而再判斷.</p>
</li>
<li><p>isNaN()也能用在object, 會先對object的valueOf判斷能否使用, 不能的話再用toString()</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(isNaN(NaN == NaN)); // 輸出 false     console.log(isNaN(NaN)); // 輸出 true     console.log(isNaN(5566)); // 輸出 false     console.log(isNaN(&quot;7788&quot;)); // 轉成數字 7788, 輸出 false     console.log(isNaN(&quot;orange&quot;)); // 無法轉成數字, 輸出 true     console.log(isNaN(true)); // 轉成數字 1, 輸出 false</span><br></pre></td></tr></table></figure>

<h4 id="1-4-5-3-Number-Conversions"><a href="#1-4-5-3-Number-Conversions" class="headerlink" title="1.4.5.3 Number Conversions"></a>1.4.5.3 Number Conversions</h4><ul>
<li>有3種轉換成數字的函式: Number(), parseInt(), parseFloat()</li>
<li>Number()可用在任何資料型別, 而parseInt和parseFloat只能用在字串</li>
<li>Number()判斷邏輯複雜:</li>
</ul>
<ol>
<li><p>如果是boolean, true&#x2F;false分別轉換成1和0</p>
</li>
<li><p>如果是數字, 回傳一樣的數字</p>
</li>
<li><p>如果是null, 轉換成0</p>
</li>
<li><p>如果是undefined, 轉換成NaN</p>
</li>
<li><p>如果是字串, 又有更細的判斷</p>
</li>
</ol>
<p>      (1) 字串裡只有整數, 且會移除leading zero, 則轉換成整數</p>
<p>      (2) 字串裡只有浮點數, 且會移除leading zero, 則轉換成浮點數</p>
<p>      (3) 字串裡只有整數且前面帶有0xf開頭, 則轉換成10進位的整數</p>
<p>      (4) 空字串則轉換成0</p>
<p>      (5) 非前4項的字串, 則是NaN</p>
<p>   6. 如果是object, 先確認valueOf()的值依前面5項的判斷. 如果結果是NaN則再用toString()並套用字串的判斷.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Number(true)); // 輸出 1     console.log(Number(false)); // 輸出 0     console.log(Number(5566)); // 輸出 5566     console.log(Number(12.345)); // 輸出 12.345     console.log(Number(null)); // 輸出 0     console.log(Number(undefined)); // 輸出 NaN     console.log(Number(&quot;Taiwan&quot;)); // 輸出 NaN     console.log(Number(&quot;true&quot;)); // 輸出 NaN     console.log(Number(&quot;987&quot;)); // 輸出 987     console.log(Number(&quot;000666&quot;)); // 輸出 666     console.log(Number(&quot;0.14&quot;)); // 輸出 0.14     console.log(Number(&quot;00001.88&quot;)); // 輸出 1.88     console.log(Number(&quot;5.0000&quot;)); // 輸出 5     console.log(Number(&quot;&quot;)); // 輸出 0</span><br></pre></td></tr></table></figure>

<ul>
<li>parseInt()在轉換整數時較常用</li>
<li>parseInt()從前面字元開始會確認有無數字字元, 如果一開始為非數字, 則輸出NaN;否則一開始遇到數字字元, 會直到結尾或非數字字元</li>
<li>parseInt()支援0x開頭的16進位</li>
<li>parseInt()在現代的JS, 遇到0開頭的8進位字串, 會解析成10進位</li>
<li>建議用parseInt()轉換別的進位時, 要指定第2個參數, 代表N進位 </li>
<li>即使是要轉10進位, 也建議用parseInt(num, 10)明確指定轉成10</li>
<li>parseInt()遇到空字串回傳NaN</li>
<li></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(parseInt(&quot;&quot;)); // 輸出 NaN     console.log(parseInt(&quot;0000x22&quot;)); // 輸出 0     console.log(parseInt(&quot;017&quot;)); // 現代JS會解析成10進位的17, 而不是8進位轉10進位的15     console.log(parseInt(&quot;0x16&quot;)); // 16進位表示, 輸出 22     console.log(parseInt(&quot;00000011&quot;)); // 輸出 11     console.log(parseInt(&quot;5566&quot;)); // 輸出 5566     console.log(parseInt(&quot;tomato1234&quot;)); // 輸出 NaN     console.log(parseInt(&quot;789banana&quot;)); // 輸出 789     console.log(parseInt(&quot;god654yo&quot;)); // 輸出 NaN     console.log(parseInt(&quot;017&quot;, 8)); // 輸出 15     console.log(parseInt(&quot;88&quot;, 8)); // 不合理的8進位表示, 輸出 NaN     console.log(parseInt(&quot;AA&quot;, 16)); // 輸出 170     console.log(parseInt(&quot;0x1A&quot;, 16)); // 輸出 26       </span><br></pre></td></tr></table></figure>

<ul>
<li>parseFloat()在轉換浮點數時較常用</li>
<li>parseFloat()只能解析10進位的表示, 遇到0x之類的無效, 而開頭有leading zero都會被移除</li>
<li>parseFloat()從前面字元開始會確認有無數字字元或小數點, 如果一開始為非數字且不是小數點, 則輸出NaN;有遇到小數點時, 將判斷是否為浮點數, 若遇到有第2個小數點, 第2個小數點以後都忽略</li>
<li>parseFloat()遇到空字串回傳NaN</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(parseFloat(&quot;&quot;)); // 輸出 NaN     console.log(parseFloat(&quot;0000x22&quot;)); // 輸出 0     console.log(parseFloat(&quot;017&quot;)); // 輸出 17     console.log(parseFloat(&quot;16.1&quot;)); // 輸出 16.1     console.log(parseFloat(&quot;16.0&quot;)); // 輸出 16     console.log(parseFloat(&quot;16.9.9&quot;)); // 輸出 16.9     console.log(parseFloat(&quot;AA&quot;)); // 輸出 NaN     console.log(parseFloat(&quot;1234abcd&quot;)); // 輸出 1234     console.log(parseFloat(&quot;abcd1234&quot;)); // 輸出 NaN       </span><br></pre></td></tr></table></figure>

<h3 id="1-4-6-String-Type"><a href="#1-4-6-String-Type" class="headerlink" title="1.4.6 String Type"></a>1.4.6 String Type</h3><ul>
<li>字串由0或多個16-bit Unicode字元組成</li>
<li>可以用雙引號 “  或 單引號 ‘ 或 重音符 ` 括起來表示字串</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;hello&#x27;); // 輸出 &quot;hello&quot;     console.log(&quot;world&quot;); // 輸出 &quot;world&quot;     console.log(`hey guy`); // 輸出 &quot;hey guy&quot;       </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-1-Character-Literals"><a href="#1-4-6-1-Character-Literals" class="headerlink" title="1.4.6.1 Character Literals"></a>1.4.6.1 Character Literals</h4><ul>
<li>字串裡的特殊符號, 比如跳行 n ,  t Tab , xnn 16進位代表一個字元 n是0<del>F組成, unnnn 表示Unicode的字元 n也是0</del>F組成. </li>
<li>可以用.length屬性得到字串長度</li>
<li>如果有用特殊符號, 它的長度是被轉譯後的長度</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;Hi man&#x27;.length); // 輸出 6     console.log(&#x27;u0045&#x27;.length); // 輸出 1     console.log(&quot;x41&quot;.length); // 輸出 1       </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-2-The-Nature-of-Strings"><a href="#1-4-6-2-The-Nature-of-Strings" class="headerlink" title="1.4.6.2 The Nature of Strings"></a>1.4.6.2 The Nature of Strings</h4><ul>
<li>字串是不可變的(Immutable), 也就是建立字串後就不可再改變</li>
<li>如果要改變某字串變數的值, 都是先銷毀舊的字串值再覆蓋新的.</li>
</ul>
<h4 id="1-4-6-3-Convert-to-a-String"><a href="#1-4-6-3-Convert-to-a-String" class="headerlink" title="1.4.6.3 Convert to a String"></a>1.4.6.3 Convert to a String</h4><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><ul>
<li>可使用toString()轉成字串, 字串會和值本身的意思一樣</li>
<li>null&#x2F;undefined沒有toString()</li>
<li>如果數字用toString(), 可以代參數, 轉成想要的進位數</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = 16;     console.log(x.toString()); // 輸出 &quot;16&quot;     console.log(x.toString(2)); // 輸出 &quot;10000&quot;     console.log(x.toString(8)); // 輸出 &quot;20&quot;     console.log(x.toString(16)); // 輸出 &quot;10&quot;     </span><br></pre></td></tr></table></figure>

<h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><ul>
<li>另外轉成字串的函式為 String(), 如果值本身可以用toString(), 則用toString()的結果, 否則像是null&#x2F;undefined, 則輸出 “null” 和 “undefined”</li>
<li>快速轉字串的寫法, 串接空字串 “”:  myVariable + “”</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(String(true)); // 輸出 &quot;true&quot;     console.log(String(null)); // 輸出 &quot;null&quot;     console.log(String(undefined)); // 輸出 &quot;undefined&quot;     console.log(undefined + &quot;&quot;); // 輸出 &quot;undefined&quot;     </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-4-Template-Literals"><a href="#1-4-6-4-Template-Literals" class="headerlink" title="1.4.6.4 Template Literals"></a>1.4.6.4 Template Literals</h4><ul>
<li>ES6使用樣板字串, 可以不用自己寫跳行符號而達到跳行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let msg = `     hi     this     is     a     book!     `;     </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-5-Interpolation"><a href="#1-4-6-5-Interpolation" class="headerlink" title="1.4.6.5 Interpolation"></a>1.4.6.5 Interpolation</h4><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><ul>
<li>在重音符 ` 括的字串裡用${ expression }, 可將expression轉成字串</li>
</ul>
<p> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 100;     let num2 = 200;     let sum1 = num1 + &#x27; * &#x27; + num2 + &#x27; = &#x27; + (num1 * num2);     // 等同用$&#123;&#125;的寫法     let sum2 = `$&#123; num1 &#125; * $&#123; num2 &#125; = $&#123; num1 * num2 &#125;`;     console.log(sum1 == sum2); // 輸出 true     </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-6-Template-Literal-Tag-Function"><a href="#1-4-6-6-Template-Literal-Tag-Function" class="headerlink" title="1.4.6.6 Template Literal Tag Function"></a>1.4.6.6 Template Literal Tag Function</h4><ul>
<li>在template literal, 可以把整個字串傳進function做拆分, 區分沒有${}符號的字串陣列和每個${}裡的expression</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let name = &#x27;John&#x27;;     let age = 18;     let height = 180;     function tagFunction(str, exp1, exp2, exp3)&#123;         console.log(str);         console.log(exp1);         console.log(exp2);         console.log(exp3);                  return &#x27;spliting completed&#x27;;     &#125;     let result = tagFunction`My name is $&#123; name &#125;, the age is $&#123; age &#125; and the height is $&#123; height &#125;.`;     // 分別輸出     // [&quot;My name is &quot;, &quot;, the age is &quot;, &quot; and the height is &quot;, &quot;.&quot;]     // John     // 18     // 180     console.log(result); // 輸出 &#x27;spliting completed&#x27;          /*       也能支援 spread operator     */     function tagFunction2(str, ...exps)&#123;         console.log(str);         for(const exp of exps)&#123;            console.log(exp);         &#125;                  return &#x27;spliting completed&#x27;;     &#125;          </span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-7-Raw-Strings"><a href="#1-4-6-7-Raw-Strings" class="headerlink" title="1.4.6.7 Raw Strings"></a>1.4.6.7 Raw Strings</h4><ul>
<li>可以用 String.raw tag function, 將Template literals輸出在內部的原始符號, 比如有n等, 輸出的字串也會有’n’</li>
<li>用tag function切過的字串陣列, 有個raw屬性, 也是String.raw的結果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(`$&#123; 1 + 2 &#125; and n and u0041`);      // 輸出     // 3 and      //  and A          console.log(String.raw`$&#123; 1 + 2 &#125; and n and u0041`);     // 輸出     // 3 and n and u0041          function tagFunction(str, ...exps)&#123;         for(const rawStr of str.raw)&#123;            console.log(rawStr);         &#125;     &#125;          tagFunction`Hi, $&#123;1&#125; today is n $&#123;2&#125; u0048u004Fu0054.`;     // 分別輸出     // Hi,      //  today is n      //  u0048u004Fu0054.</span><br></pre></td></tr></table></figure>

<h3 id="1-4-7-Symbol-Type"><a href="#1-4-7-Symbol-Type" class="headerlink" title="1.4.7 Symbol Type"></a>1.4.7 Symbol Type</h3><ul>
<li>ES6導入此Type, 有唯一和不可變的性質. 此性質是為了讓object有唯一識別的屬性, 可取代用string的key</li>
<li>使用Symbol()和Symbol(keyStr), 都是獨立的.</li>
<li>用console輸出有帶keyStr的symbol, 會有那筆keyStr</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sym1 = Symbol();     console.log(typeof sym1); // 輸出 &quot;symbol&quot;     let sym2 = Symbol();     console.log(sym1 == sym2); // 輸出false          let sym3 = Symbol(&#x27;test&#x27;);     console.log(sym3); // 輸出 Symbol(test)     let sym4 = Symbol(&#x27;test&#x27;);     console.log(sym3 == sym4); // 輸出false</span><br></pre></td></tr></table></figure>

<h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><ul>
<li>Symbol是不可以用new的, 避免直接被封裝為object</li>
<li>但可以用Object(someSymbol)封裝成object</li>
</ul>
<h4 id="1-4-7-1-Global-Symbol-Registry"><a href="#1-4-7-1-Global-Symbol-Registry" class="headerlink" title="1.4.7.1 Global Symbol Registry"></a>1.4.7.1 Global Symbol Registry</h4><ul>
<li>可建立重複使用的全域symbol, 使用Symbol.for(‘someKey’)</li>
<li>如果有多個Symbol.for同樣key的symbol, 都是同一個物件</li>
<li>global和一般的symbol用同樣的key仍是不同的物件</li>
<li>Symbol.for()則是建立一個undefined的key</li>
<li>Symbol.keyFor能輸出global symbol的key值, 但一般的symbol只會輸出undefined</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sym1 = Symbol.for(&#x27;hello&#x27;);     console.log(typeof sym1); // 輸出 &quot;symbol&quot;     console.log(sym1); // 輸出 Symbol(hello)     let sym2 = Symbol.for(&#x27;hello&#x27;);     console.log(sym1 == sym2); // 輸出true     let sym3 = Symbol(&#x27;hello&#x27;);     console.log(sym1 == sym3); // 輸出false     let sym4 = Symbol.for();     console.log(sym4); // 輸出 Symbol(undefined)     console.log(Symbol.keyFor(sym1)); // 輸出hello     let sym5 = Symbol(&#x27;GUY&#x27;);     console.log(Symbol.keyFor(sym5)); // 輸出undefined     </span><br></pre></td></tr></table></figure>

<h4 id="1-4-7-2-Using-Symbols-as-Properties"><a href="#1-4-7-2-Using-Symbols-as-Properties" class="headerlink" title="1.4.7.2 Using Symbols as Properties"></a>1.4.7.2 Using Symbols as Properties</h4><ul>
<li>object除了string和number當property, 也能用Symbol</li>
<li>可用[]或 Object.defineProperty()、Object.defineProperties() 定義property</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sym1 = Symbol.for(&#x27;a&#x27;);     let sym2 = Symbol.for(&#x27;b&#x27;);     let sym3 = Symbol.for(&#x27;c&#x27;);     let sym4 = Symbol.for(&#x27;d&#x27;);     let obj1 = &#123;[sym1]: &#x27;sym1 value&#x27;&#125;;     console.log(obj1); // 輸出 &#123;Symbol(a): &quot;sym1 value&quot;&#125;          Object.defineProperty(obj1, sym2, &#123;value: &#x27;sym2 value&#x27;&#125;);     console.log(obj1); // 輸出 &#123;Symbol(a): &quot;sym1 value&quot;, Symbol(b): &quot;sym2 value&quot;&#125;          Object.defineProperties(obj1, &#123;        [sym3]: &#123;value: &#x27;sym3 value&#x27;&#125;,        [sym4]: &#123;value: &#x27;sym4 value&#x27;&#125;     &#125;);     console.log(obj1);      // 輸出 &#123;Symbol(a): &quot;sym1 value&quot;, Symbol(b): &quot;sym2 value&quot;     // , Symbol(c): &quot;sym3 value&quot;, Symbol(d): &quot;sym4 value&quot;&#125;     </span><br></pre></td></tr></table></figure>

<h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><ul>
<li><p>取object的property有區分Object.getOwnPropertyNames()和 Object.getOwnPropertySymbols(), 分別是回傳非Symbol和Symbol的Property  </p>
</li>
<li><p>Object.getOwnPropertyDescriptors()可回傳所有property與對應value的object描述</p>
</li>
<li><p>如果要全部回傳property, 可用Reflect.ownKeys()</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sym1 = Symbol.for(&#x27;a&#x27;);     let sym2 = Symbol.for(&#x27;b&#x27;);     let obj1 = &#123;[sym1]: &#x27;sym1 value&#x27;, [sym2]: &#x27;sym2 value&#x27;, test: &#x27;test value&#x27;, 4: &#x27;4 value&#x27;&#125;;     console.log(Object.getOwnPropertySymbols(obj1)); // 輸出 [Symbol(a), Symbol(b)]     console.log(Object.getOwnPropertyNames(obj1)); // 輸出 [&quot;4&quot;, &quot;test&quot;]     console.log(Object.getOwnPropertyDescriptors(obj1)); // 輸出 [&quot;4&quot;:&#123;...&#125;, &quot;test&quot;:&#123;...&#125;, Symbol(a):&#123;...&#125;, Symbol(b):&#123;...&#125;]     console.log(Reflect.ownKeys(obj1)); // 輸出 [&quot;4&quot;, &quot;test&quot;, Symbol(a), Symbol(b)]     </span><br></pre></td></tr></table></figure>

<h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><h4 id="1-4-7-3-Well-Known-Symbols"><a href="#1-4-7-3-Well-Known-Symbols" class="headerlink" title="1.4.7.3 Well-Known Symbols"></a>1.4.7.3 Well-Known Symbols</h4><ul>
<li>ES6有定義一些global的symbol, 有各別的用途</li>
<li>在MDN的Properties類別都是well-known symbols <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Symbol&#x2F;search</a></li>
</ul>
<h3 id="1-4-8-Object-Type"><a href="#1-4-8-Object-Type" class="headerlink" title="1.4.8 Object Type"></a>1.4.8 Object Type</h3><ul>
<li>一組資料和功能的集合</li>
<li>使用new Object()建立object物件</li>
<li>任何的object有預設的函式和屬性</li>
</ul>
<p>       1. constructor: 很特別這是property</p>
<p>       2. hasOwnProperty(propertyName): 檢查是否有property在此object(不是預設的property)</p>
<p>       3. isPrototypeOf(someObject): 是否為someObject的prototype</p>
<p>       4. propertyIsEnumerable(propertyName): 能否用在for-in</p>
<p>       5. toLocaleString(): 可輸出指定語系的string</p>
<p>       6. toString(): 回傳物件的string表示法</p>
<p>       7. valueOf(): 回傳物件的string、number或boolean的表示. 通常和toString()一樣</p>
<ul>
<li>Host object: 比如瀏覽器的DOM、BOM object, 不一定是繼承ECMAScript的object</li>
</ul>
<h2 id="1-5-Operators"><a href="#1-5-Operators" class="headerlink" title="1.5 Operators"></a>1.5 Operators</h2><h3 id="1-5-1-Unary-Operators"><a href="#1-5-1-Unary-Operators" class="headerlink" title="1.5.1 Unary Operators"></a>1.5.1 Unary Operators</h3><h4 id="1-5-1-1-Increment-Decrement"><a href="#1-5-1-1-Increment-Decrement" class="headerlink" title="1.5.1.1 Increment&#x2F;Decrement"></a>1.5.1.1 Increment&#x2F;Decrement</h4><ul>
<li>++x,  x++, –x, ++x</li>
<li>可用在非整數的值</li>
<li>字串可以轉成數字時, 用++&#x2F;–會先轉成數字再做+&#x2F;- 1的動作</li>
<li>字串不可以轉成數字時, 用++&#x2F;–會變成NaN</li>
<li>boolean的false用++&#x2F;–時, 會先轉成0再做+&#x2F;- 1的動作</li>
<li>boolean的true用++&#x2F;–時, 會先轉成1再做+&#x2F;- 1的動作</li>
<li>浮點數用++&#x2F;–時, 會做+&#x2F;- 1的動作, 也會有浮點數精準度的問題</li>
<li>對object使用++&#x2F;–時, 會先嘗試用valueOf()的值和前面的邏輯產生第一次結果, 如果結果是NaN, 再用toString()產生字串再依字串的邏輯產生第二次結果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = &quot;1&quot;;     let b = &quot;0xf&quot;;     let c = &quot;XD&quot;;     let d = true;     let e = false;     let f = 100;     let g = 1.1;     let h = &#123;1: 2&#125;;     a++; // 2     b++; // 16     c--; // NaN     d++; // 2     e--; // -1     f--; // 99     g--; // 0.10000000000000009     h++; // Nan     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-1-2-Unary-Plus-and-Minus"><a href="#1-5-1-2-Unary-Plus-and-Minus" class="headerlink" title="1.5.1.2 Unary Plus and Minus"></a>1.5.1.2 Unary Plus and Minus</h4><ul>
<li>正負符號</li>
<li>對於非number的變數, 會先以Number()轉換再套用+&#x2F;-, 不能轉換者會是NaN</li>
</ul>
<h3 id="1-5-2-Bitwise-Operators"><a href="#1-5-2-Bitwise-Operators" class="headerlink" title="1.5.2 Bitwise Operators"></a>1.5.2 Bitwise Operators</h3><ul>
<li>ECMAScript的Number都是以IEEE-754 64位元儲存</li>
<li>但Bitwise的操作都是先轉成32位元來操作, 運算結果再存回64位元</li>
<li>Signed的整數, 第32位元用來表示正(0)或負(1). 負數是用two’s complement表示</li>
<li>負數用toString(2)會是絕對值的2進位再加上負號, 而不是two’s complement</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num = -20;     console.log(num.toString(2)); // 輸出 -10100     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-1-Bitwise-NOT"><a href="#1-5-2-1-Bitwise-NOT" class="headerlink" title="1.5.2.1 Bitwise NOT"></a>1.5.2.1 Bitwise NOT</h4><ul>
<li>數字前面用~波浪符號, 把所有bit轉成反bit</li>
<li>~num &#x3D; -num - 1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 19;     let num2 = ~num1;     console.log(num2); // 輸出 -20          let num3 = -num1 - 1;     console.log(num3); // 輸出 -20     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-2-Bitwise-AND"><a href="#1-5-2-2-Bitwise-AND" class="headerlink" title="1.5.2.2 Bitwise AND"></a>1.5.2.2 Bitwise AND</h4><ul>
<li>用一個 &amp; 符號</li>
</ul>
<h4 id="1-5-2-3-Bitwise-OR"><a href="#1-5-2-3-Bitwise-OR" class="headerlink" title="1.5.2.3 Bitwise OR"></a>1.5.2.3 Bitwise OR</h4><ul>
<li>用一個 符號</li>
</ul>
<h4 id="1-5-2-4-Bitwise-XOR"><a href="#1-5-2-4-Bitwise-XOR" class="headerlink" title="1.5.2.4 Bitwise XOR"></a>1.5.2.4 Bitwise XOR</h4><ul>
<li>用一個 ^ 符號</li>
</ul>
<h4 id="1-5-2-5-Left-Shift"><a href="#1-5-2-5-Left-Shift" class="headerlink" title="1.5.2.5 Left Shift"></a>1.5.2.5 Left Shift</h4><ul>
<li>用 &lt;&lt; 符號, 將右邊bit往左移, 右邊補上0, 移動完的結果會是signed number</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 1;     let num2 = num1 &lt;&lt; 1;     console.log(num2); // 輸出 2          let num3 = -1;     let num4 = num3 &lt;&lt; 1;     console.log(num4); // 輸出 -2     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-6-Signed-Right-Shift"><a href="#1-5-2-6-Signed-Right-Shift" class="headerlink" title="1.5.2.6 Signed Right Shift"></a>1.5.2.6 Signed Right Shift</h4><ul>
<li>用 &gt;&gt; 符號, 將左邊第31個bit往右移, Sign bit保持不變, 移動完的結果會是signed number</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 19;     let num2 = num1 &gt;&gt; 1;     console.log(num2); // 輸出 9          let num3 = -23;     let num4 = num3 &gt;&gt; 1;     console.log(num4); // 輸出 -12     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-7-Unsigned-Right-Shift"><a href="#1-5-2-7-Unsigned-Right-Shift" class="headerlink" title="1.5.2.7 Unsigned Right Shift"></a>1.5.2.7 Unsigned Right Shift</h4><h2 id="-8"><a href="#-8" class="headerlink" title=""></a></h2><ul>
<li>用 &gt;&gt;&gt; 符號, 將左邊bit往右移, 左邊補上0, 移動完的結果會是正數或0</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = -5;     let num2 = num1 &gt;&gt;&gt; 1;     console.log(num2); // 輸出 2147483645          let num3 = 99;     let num4 = num3 &gt;&gt;&gt; 1;     console.log(num4); // 輸出 49</span><br></pre></td></tr></table></figure>

<h3 id="1-5-3-Boolean-Operators"><a href="#1-5-3-Boolean-Operators" class="headerlink" title="1.5.3 Boolean Operators"></a>1.5.3 Boolean Operators</h3><h4 id="1-5-3-1-Logical-NOT"><a href="#1-5-3-1-Logical-NOT" class="headerlink" title="1.5.3.1 Logical NOT"></a>1.5.3.1 Logical NOT</h4><ul>
<li>使用符號 ! , 可用在任何數值, 都是先轉成Boolean再求反的值</li>
</ul>
<h4 id="1-5-3-2-Logical-AND"><a href="#1-5-3-2-Logical-AND" class="headerlink" title="1.5.3.2 Logical AND"></a>1.5.3.2 Logical AND</h4><ul>
<li>使用符號 &amp;&amp;, 如果有一方不是boolean, 返回的值不一定是boolean</li>
<li>有短路的性質</li>
<li>如果左方是object, 則回傳右方</li>
<li>如果右方是object, 則左方必須是true才會回傳右方</li>
<li>如果兩邊都是object, 則回傳右方</li>
<li>如果有一方是null, 則回傳null, 並不是先回傳false</li>
<li>如果有一方是NaN, 則回傳NaN, 並不是回傳false</li>
<li>如果有一方是undefined, 則回傳undefined, 並不是回傳false</li>
</ul>
<h4 id="1-5-3-3-Logical-OR"><a href="#1-5-3-3-Logical-OR" class="headerlink" title="1.5.3.3 Logical OR"></a>1.5.3.3 Logical OR</h4><ul>
<li>使用符號 , 如果兩方都不是boolean, 返回的值不一定是boolean</li>
<li>有短路的性質</li>
<li>如果左方是object, 則回傳左方</li>
<li>如果左方是轉換boolean是false, 則回傳右方</li>
<li>如果兩邊都是object, 則回傳左方</li>
<li>如果兩邊都是null, 則回傳null, 並不是先回傳false</li>
<li>如果兩邊都是NaN, 則回傳NaN, 並不是先回傳false</li>
<li>如果兩邊都是undefined, 則回傳undefined, 並不是先回傳false</li>
</ul>
<h3 id="1-5-4-Multiplicative-Operators"><a href="#1-5-4-Multiplicative-Operators" class="headerlink" title="1.5.4 Multiplicative Operators"></a>1.5.4 Multiplicative Operators</h3><h4 id="1-5-4-1-Multiply"><a href="#1-5-4-1-Multiply" class="headerlink" title="1.5.4.1 Multiply"></a>1.5.4.1 Multiply</h4><ul>
<li>使用符號 * 做乘法運算</li>
<li>數字相乘超過可表示的範圍, 將是Infinity&#x2F;-Infinity</li>
<li>只要有一方是NaN, 乘法結果一定是NaN</li>
<li>Infinity * 0 &#x3D; NaN (!!??)</li>
<li>Infinity 乘以 非0的數仍是+&#x2F;-Infinity, 根據正負規則</li>
<li>Infinity 乘以 Infinity 仍是+&#x2F;-Infinity, 根據正負規則</li>
<li>其他非數字的會先用Number()轉換再用上述邏輯</li>
</ul>
<h4 id="1-5-4-2-Divide"><a href="#1-5-4-2-Divide" class="headerlink" title="1.5.4.2 Divide"></a>1.5.4.2 Divide</h4><h2 id="-9"><a href="#-9" class="headerlink" title=""></a></h2><ul>
<li>使用符號 &#x2F; 做除法運算</li>
<li>數字相除超過可表示的範圍, 將是Infinity&#x2F;-Infinity</li>
<li>只要有一方是NaN, 乘法結果一定是NaN</li>
<li>Infinity &#x2F; Infinity &#x3D; NaN</li>
<li>0 &#x2F; 0 &#x3D; NaN</li>
<li>非0 除以 0 &#x3D; +&#x2F;-Infinity, 根據正負規則</li>
<li>Infinity 除以 非0的數仍是+&#x2F;-Infinity, 根據正負規則</li>
<li>其他非數字的會先用Number()轉換再用上述邏輯</li>
</ul>
<h4 id="1-5-4-3-Modulus"><a href="#1-5-4-3-Modulus" class="headerlink" title="1.5.4.3 Modulus"></a>1.5.4.3 Modulus</h4><ul>
<li>使用符號 % 取餘數</li>
<li>和除法有相似的邏輯</li>
<li>都是正常的數字, 可以直接取餘數</li>
<li>Infinity % 非無限大的數 &#x3D; NaN</li>
<li>非無限大的數 % 0 &#x3D; NaN</li>
<li>Infinity % Infinity &#x3D; NaN</li>
<li>非無限大的數 % Infinity &#x3D; 非無限大的數</li>
<li>0 % 任何數 &#x3D; 0</li>
<li>其他非數字的會先用Number()轉換再用上述邏輯</li>
</ul>
<h3 id="1-5-5-Exponentiation-Operators"><a href="#1-5-5-Exponentiation-Operators" class="headerlink" title="1.5.5 Exponentiation Operators"></a>1.5.5 Exponentiation Operators</h3><ul>
<li>在ES7, 可使用a ** b, 代表Math.pow(a, b)</li>
<li>也能用 a **&#x3D; b</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 64;     let num2 = num1 ** 0.5;     console.log(num2); // 輸出 8          let num3 = 12;     num3 **= 2;     console.log(num3); // 輸出 144     </span><br></pre></td></tr></table></figure>

<h3 id="1-5-6-Additive-Operators"><a href="#1-5-6-Additive-Operators" class="headerlink" title="1.5.6 Additive Operators"></a>1.5.6 Additive Operators</h3><h4 id="1-5-6-1-Add"><a href="#1-5-6-1-Add" class="headerlink" title="1.5.6.1 Add"></a>1.5.6.1 Add</h4><ul>
<li>使用符號 + 相加</li>
<li>如果兩者都是數字, 則可套用下列4個規則</li>
</ul>
<p>      1. 只要有一方是NaN, 相加結果一定是NaN</p>
<p>      2. Infinity + Infinity &#x3D; Infinity</p>
<p>      3. -Infinity + -Infinity &#x3D; -Infinity</p>
<p>      4. Infinity + -Infinity &#x3D; NaN</p>
<ul>
<li>只要有一方是字串, 其他都會轉成字串做串接</li>
<li>非字串類的, 會先用Number()轉成數字, 再以Number計算</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 2;     let num2 = true;     console.log(num1 + num2); // 輸出 3          let num3 = &quot;4&quot;;     let num4 = 55;     console.log(num3 + num4); // &quot;4&quot;並不會轉成數字4, 輸出 455          let num5 = 1;     let num6 = null;     console.log(num5 + num6); // null轉成0, 輸出 1          let num7 = 2;     let num8 = undefined;     console.log(num7 + num8); // undefined轉成NaN, 輸出 NaN          let num9 = 3;     let num10 = &#123;&quot;test&quot;: true&#125;;     console.log(num9 + num10); // object轉成字串, 輸出 3[object Object]     </span><br></pre></td></tr></table></figure>

<h4 id="1-5-6-2-Subtract"><a href="#1-5-6-2-Subtract" class="headerlink" title="1.5.6.2 Subtract"></a>1.5.6.2 Subtract</h4><ul>
<li>使用符號 - 相減</li>
<li>如果兩者都是數字, 則可套用下列5個規則</li>
</ul>
<p>      1. 只要有一方是NaN, 相減結果一定是NaN</p>
<p>      2. Infinity - Infinity &#x3D; NaN</p>
<p>      3. -Infinity - -Infinity &#x3D; NaN</p>
<p>      4. Infinity - -Infinity &#x3D; Infinity</p>
<p>      5. -Infinity - Infinity &#x3D; -Infinity</p>
<ul>
<li>其他非數字類, 會先用Number()轉成數字, 再以Number計算</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 2;     let num2 = true;     console.log(num1 - num2); // 輸出 1          let num3 = &quot;4&quot;;     let num4 = 55;     console.log(num3 - num4); // &quot;4&quot;轉成數字4, 輸出 -51          let num5 = 1;     let num6 = null;     console.log(num5 - num6); // null轉成0, 輸出 1          let num7 = 2;     let num8 = undefined;     console.log(num7 - num8); // undefined轉成NaN, 輸出 NaN          let num9 = 3;     let num10 = &#123;&quot;test&quot;: true&#125;;     console.log(num9 - num10); // object轉成字串, 輸出 NaN     </span><br></pre></td></tr></table></figure>

<h3 id="1-5-7-Relational-Operators"><a href="#1-5-7-Relational-Operators" class="headerlink" title="1.5.7 Relational Operators"></a>1.5.7 Relational Operators</h3><ul>
<li>&gt; 、 &lt;、&gt;&#x3D; 、&lt;&#x3D; 4種比對</li>
<li>只要有一方是NaN, 比對結果一定是false</li>
<li>兩邊都是字串時, 用字串的字母順序比對</li>
<li>有非數字類, 則用Number()轉換再做number比對</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 2;     let num2 = true;     console.log(num1 &gt; num2); // 輸出 true          let num3 = &quot;4&quot;;     let num4 = 55;     console.log(num3 &gt; num4); // &quot;4&quot;轉成數字4, 輸出 false          let num5 = &quot;jack&quot;;     let num6 = &quot;rose&quot;;     console.log(num5 &gt; num6); // 輸出 fasle          let num7 = 2;     let num8 = undefined;     console.log(num7 &gt; num8); // undefined轉成NaN, 輸出 false          let num9 = 3;     let num10 = &#123;&quot;test&quot;: true&#125;;     console.log(num9 &gt; num10); // object轉成字串, 再Number()轉換成NaN, 輸出 false          let num11 = 1;     let num12 = NaN;     console.log(num11 &gt; num12); // 輸出 false     console.log(num1 &lt;= num12); // 還是輸出 false          </span><br></pre></td></tr></table></figure>

<h3 id="1-5-8-Equality-Operators"><a href="#1-5-8-Equality-Operators" class="headerlink" title="1.5.8 Equality Operators"></a>1.5.8 Equality Operators</h3><h2 id="-10"><a href="#-10" class="headerlink" title=""></a></h2><ul>
<li>區分轉換相等 &#x3D;&#x3D; &#x2F; !&#x3D; 和全等 &#x3D;&#x3D;&#x3D; &#x2F; !&#x3D;&#x3D;&#x3D;</li>
<li>轉換相等會先轉換成同型別再比較; 全等直接依目前型別來比較</li>
</ul>
<h4 id="1-5-8-1-轉換相等"><a href="#1-5-8-1-轉換相等" class="headerlink" title="1.5.8.1 轉換相等 &#x3D;&#x3D; &#x2F; !&#x3D;"></a>1.5.8.1 轉換相等 &#x3D;&#x3D; &#x2F; !&#x3D;</h4><ul>
<li>兩者型別不相同時, 將使用一些規則轉換</li>
</ul>
<ol>
<li>Boolean都轉換成數字, true&#x2F;false &#x3D; 1&#x2F;0</li>
<li>一邊是字串,另一邊是數字, 則將字串嘗試轉成數字</li>
<li>一邊是object, 另一邊不是, 則將object的valueOf()轉成一般類型再比對</li>
</ol>
<ul>
<li>經過前述轉換, 再來一些規則</li>
</ul>
<ol>
<li>null &#x3D;&#x3D; undefined</li>
<li>null和undefined是不會被轉換的</li>
<li>只要有NaN, 任何 &#x3D;&#x3D; 都是false, 任何 !&#x3D; 都是true</li>
<li>如果兩邊都是object, 用 &#x3D;&#x3D; 會比對是否指向同一個object</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 1;     let num2 = true;     console.log(num1 == num2); // 輸出 true          let num3 = &quot;4&quot;;     let num4 = 4;     console.log(num3 == num4); // &quot;4&quot;轉成數字4, 輸出 true          let num5 = &quot;0&quot;;     let num6 = null;     console.log(num5 == num6); // 輸出 false          let num7 = 1;     let num8 = undefined;     console.log(num7 != num8); // 輸出 true          let num9 = 2;     let num10 = null;     console.log(num9 != num10); // 輸出 true          let num11 = 3;     let num12 = NaN;     console.log(num11 == num12); // 輸出 false     console.log(num11 != num12); // 輸出 true          </span><br></pre></td></tr></table></figure>

<h4 id="1-5-8-2-全等"><a href="#1-5-8-2-全等" class="headerlink" title="1.5.8.2 全等 &#x3D;&#x3D;&#x3D; &#x2F; !&#x3D;&#x3D;"></a>1.5.8.2 全等 &#x3D;&#x3D;&#x3D; &#x2F; !&#x3D;&#x3D;</h4><h2 id="-11"><a href="#-11" class="headerlink" title=""></a></h2><ul>
<li>兩者型別不轉換型別直接比對</li>
<li>null &#x3D;&#x3D;&#x3D; undefined 會是false</li>
<li>建議任何等於比對, 都用全等</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 1;     let num2 = true;     console.log(num1 === num2); // 輸出 false          let num3 = &quot;4&quot;;     let num4 = 4;     console.log(num3 === num4); // 輸出 false          let num5 = &quot;0&quot;;     let num6 = null;     console.log(num5 === num6); // 輸出 false          let num7 = 1;     let num8 = undefined;     console.log(num7 !== num8); // 輸出 true          let num9 = 2;     let num10 = null;     console.log(num9 !== num10); // 輸出 true          let num11 = 3;     let num12 = NaN;     console.log(num11 === num12); // 輸出 false     console.log(num11 !== num12); // 輸出 true</span><br></pre></td></tr></table></figure>

<h3 id="1-5-9-Conditional-Operators"><a href="#1-5-9-Conditional-Operators" class="headerlink" title="1.5.9 Conditional Operators"></a>1.5.9 Conditional Operators</h3><ul>
<li>let x &#x3D; some_boolean_expression ? y : z;</li>
</ul>
<h3 id="1-5-10-Assignment-Operators"><a href="#1-5-10-Assignment-Operators" class="headerlink" title="1.5.10 Assignment Operators"></a>1.5.10 Assignment Operators</h3><ul>
<li>=</li>
<li>+&#x3D;</li>
<li>-&#x3D;</li>
<li>*&#x3D;</li>
<li>&#x2F;&#x3D;</li>
<li>&lt;&lt;&#x3D;</li>
<li>&gt;&gt;&#x3D;</li>
<li>&gt;&gt;&gt;&#x3D;</li>
</ul>
<h3 id="1-5-11-Comma-Operators"><a href="#1-5-11-Comma-Operators" class="headerlink" title="1.5.11 Comma Operators"></a>1.5.11 Comma Operators</h3><ul>
<li>多個運算只用一個statement</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 1, num2 = 2, num3 = 3;          let x = (1,2,3,4,5,6,7,8,9,10); // 會是指定最後一個數 10     </span><br></pre></td></tr></table></figure>

<h2 id="1-6-Statements"><a href="#1-6-Statements" class="headerlink" title="1.6 Statements"></a>1.6 Statements</h2><h3 id="1-6-1-if-statement"><a href="#1-6-1-if-statement" class="headerlink" title="1.6.1 if statement"></a>1.6.1 if statement</h3><ul>
<li>if(expression) 的expression會用Boolean()轉換</li>
</ul>
<h3 id="1-6-2-do-while-statement"><a href="#1-6-2-do-while-statement" class="headerlink" title="1.6.2 do-while statement"></a>1.6.2 do-while statement</h3><h3 id="1-6-3-while-statement"><a href="#1-6-3-while-statement" class="headerlink" title="1.6.3 while statement"></a>1.6.3 while statement</h3><h3 id="1-6-4-for-statement"><a href="#1-6-4-for-statement" class="headerlink" title="1.6.4 for statement"></a>1.6.4 for statement</h3><h3 id="1-6-5-for-in-statement"><a href="#1-6-5-for-in-statement" class="headerlink" title="1.6.5 for-in statement"></a>1.6.5 for-in statement</h3><ul>
<li>支援可Enumerable且非symbol的property</li>
<li>用在null或undefined會拋出錯誤</li>
<li>for-in無法保證順序</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;&#x27;t&#x27;: &#x27;test&#x27;, &#x27;1&#x27;: &#x27;hello&#x27;&#125;;     for(let x in obj1)&#123;         console.log(x); // 輸出property  t 和 1         console.log(obj1[x]); // 輸出property對應的value, test 和 hello     &#125;          let obj2 = [100,200];      for(let x in obj2)&#123;         console.log(x); // 輸出property  0 和 1, 也代表array的index         console.log(obj2[x]); // 輸出property對應的value, 100 和 200     &#125;     </span><br></pre></td></tr></table></figure>

<h3 id="1-6-6-for-of-statement"><a href="#1-6-6-for-of-statement" class="headerlink" title="1.6.6 for-of statement"></a>1.6.6 for-of statement</h3><h2 id="-12"><a href="#-12" class="headerlink" title=""></a></h2><ul>
<li>支援有iterator的next()的資料</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;&#x27;t&#x27;: &#x27;test&#x27;, &#x27;1&#x27;: &#x27;hello&#x27;&#125;;     for(let x of obj1)&#123;         console.log(x); // 產生錯誤 Uncaught TypeError: obj1 is not iterable         console.log(obj1[x]);     &#125;          let obj2 = [100,200];      for(let x of obj2)&#123;         console.log(x); // 輸出值  100 和 200     &#125;     </span><br></pre></td></tr></table></figure>

<h2 id="-13"><a href="#-13" class="headerlink" title=""></a></h2><h3 id="1-6-7-labeled-statement"><a href="#1-6-7-labeled-statement" class="headerlink" title="1.6.7 labeled statement"></a>1.6.7 labeled statement</h3><h2 id="-14"><a href="#-14" class="headerlink" title=""></a></h2><ul>
<li>statement可以加上標籤</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement1: for(let i = 0 ; i &lt; 5;++i)&#123;                console.log(i);            &#125;         </span><br></pre></td></tr></table></figure>

<h3 id="1-6-8-break-continue-statement"><a href="#1-6-8-break-continue-statement" class="headerlink" title="1.6.8 break&#x2F;continue statement"></a>1.6.8 break&#x2F;continue statement</h3><h2 id="-15"><a href="#-15" class="headerlink" title=""></a></h2><ul>
<li>用在迴圈可以跳出或繼續</li>
<li>break&#x2F;continue可加上label name, 指定要break&#x2F;continue的迴圈位置</li>
</ul>
<h3 id="1-6-9-with-statement"><a href="#1-6-9-with-statement" class="headerlink" title="1.6.9 with statement"></a>1.6.9 with statement</h3><h2 id="-16"><a href="#-16" class="headerlink" title=""></a></h2><ul>
<li>將code block內的scope, 都能用with裡的property</li>
<li>不建議用with</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with(window)&#123;         // 都來自widnow的屬性, 可不用window.xxxx的寫法         let myOrigin = origin;         let myHeight = outerHeight;         let myWidth = outerWidth;         console.log(myOrigin);         console.log(myHeight);         console.log(myWidth);     &#125;     </span><br></pre></td></tr></table></figure>

<h3 id="1-6-10-switch-statement"><a href="#1-6-10-switch-statement" class="headerlink" title="1.6.10 switch statement"></a>1.6.10 switch statement</h3><h2 id="-17"><a href="#-17" class="headerlink" title=""></a></h2><ul>
<li>和其他的程式語言相似, 但有一些特殊功能</li>
<li>switch的比對都是全等, 不會轉型</li>
<li>case的值不一定是變數, 也可以是運算式</li>
</ul>
<h2 id="1-7-Functions"><a href="#1-7-Functions" class="headerlink" title="1.7 Functions"></a>1.7 Functions</h2><ul>
<li><p>用function myFunctionName(arg1, arg2, ….){ }  </p>
</li>
<li><p>fumction沒有強制要return, 若沒回傳東西或者return; , 都是得到undefined</p>
</li>
<li><p>建議function的功能是全都要回傳東西或者都不回傳</p>
</li>
</ul>
<h2 id="2-心得"><a href="#2-心得" class="headerlink" title="2. 心得"></a>2. 心得</h2><p>       這一章節很重要, 之前看到很多網路對JS的謎音創作, 都是那null&#x2F;NaN&#x2F;undefined&#x2F;&#x3D;&#x3D;之類的觀念, 其實現在看到心想這怎麼天殺的難…但看了這本書解釋的定義和底層實作, 可以歸納出邏輯, 現階段就多看多寫吧~</p>
<h2 id="3-參考資料"><a href="#3-參考資料" class="headerlink" title="3. 參考資料"></a>3. 參考資料</h2><ol>
<li>Professional JavaScript for Web Developers 4th Edition, Chapter 3 : Language Basics, Matt Frisbie.</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
  <entry>
    <title>[讀書筆記] Professional JavaScript for Web Developers - 第4章 變數、作用範圍和記憶體</title>
    <url>/2020/06/13/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98-professional-javascript-for-web-developers-%E7%AC%AC4%E7%AB%A0-%E8%AE%8A%E6%95%B8%E3%80%81%E4%BD%9C%E7%94%A8%E7%AF%84%E5%9C%8D%E5%92%8C%E8%A8%98%E6%86%B6/</url>
    <content><![CDATA[<h2 id="1-1-Primitive-and-Reference-Values"><a href="#1-1-Primitive-and-Reference-Values" class="headerlink" title="1.1 Primitive and Reference Values"></a>1.1 Primitive and Reference Values</h2><ul>
<li>Primitive types: Undefined, Null, Boolean, Number, String and Symbol</li>
<li>所有Primitive的變數操作都是對值</li>
<li>Reference type: Object</li>
<li>Reference的變數都是指向記憶體的物件</li>
</ul>
<h3 id="1-1-1-Dynamic-Properties"><a href="#1-1-1-Dynamic-Properties" class="headerlink" title="1.1.1 Dynamic Properties"></a>1.1.1 Dynamic Properties</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul>
<li>可動態新增&#x2F;刪除Reference變數的屬性或方法</li>
<li>對於Primitive變數無法動態新增&#x2F;刪除變數或方法</li>
<li>用new 與 Primitive constructor的變數會是object</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let dog = new Object();dog.name = &quot;Lucky&quot;;console.log(dog.name); // 輸出 Luckylet cat = &quot;HelloKity&quot;;cat.age = 10;console.log(cat.age); // 輸出 undefinedlet horse = new String(&quot;Jack&quot;);horse.age = 12;console.log(horse.age); // 輸出 12console.log(typeof horse); // 輸出 object                    </span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-Copying-Values"><a href="#1-1-2-Copying-Values" class="headerlink" title="1.1.2 Copying Values"></a>1.1.2 Copying Values</h3><ul>
<li>Primitive變數複製時會建立新的記憶體空間, 並將值複製至新空間</li>
<li>Reference變數只是指標, 仍指向Heap同一個物件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num1 = 5566;let num2 = num1; // Primitive的複製let dog1 = new Object();let dog2 = dog1;dog1.name = &quot;Lucky&quot;;console.log(dog2.name); // Reference Copy, 輸出 Lucky                    </span><br><span class="line">``` ###  1.1.3 Argument Passing</span><br><span class="line"></span><br><span class="line">*   JS的函數都是passed by value</span><br><span class="line">    </span><br><span class="line">*   儘管參數是reference type, 仍是passed by value, 當作local變數來理解</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function productTen(arg){    return arg * 10;}let num1 &#x3D; 5566;let num2 &#x3D; productTen(num1);console.log(num1); &#x2F;&#x2F; 輸出 5566console.log(num2); &#x2F;&#x2F; 輸出 55660function changeName(obj){obj.name &#x3D; “Hello”;}let dog1 &#x3D; new Object();changeName(dog1);console.log(dog1.name); &#x2F;&#x2F; 輸出 Hellofunction changeNewName(obj){obj.name &#x3D; “Hello”;   obj &#x3D; new Object();   obj.name &#x3D; “John”;   &#x2F;&#x2F; obj是新的變數, 再new Object()後指向新的記憶體空間}let dog2 &#x3D; new Object();changeNewName(dog2);console.log(dog2.name); &#x2F;&#x2F; 輸出 Hello, 而不是John,                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 1.1.4 Determining Type</span><br><span class="line"></span><br><span class="line">*   Primitive變數可用typeof判斷</span><br><span class="line">    </span><br><span class="line">*   Reference變數用instanceof判斷可更仔細, 是否為某prototype</span><br><span class="line">    </span><br><span class="line">*   任何primitive變數用instanceof都是false</span><br><span class="line">    </span><br><span class="line">*   任何reference變數用instanceof object都是true</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>let x &#x3D; [1,2,3];console.log(x instanceof Array); &#x2F;&#x2F; 輸出 trueconsole.log(x instanceof Date); &#x2F;&#x2F; 輸出 falseconsole.log(x instanceof Object); &#x2F;&#x2F; 輸出 true                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 1.2 Execution context and scope</span><br><span class="line"></span><br><span class="line">*   Execution context代表該變數/函數執行的範圍</span><br><span class="line">*   ECMAScript的Host environment不同, 其全域context也不同, 瀏覽器的global context是window</span><br><span class="line">*   在瀏覽器非function內部宣告的var 變數或function, 都是window可存取的屬性</span><br><span class="line">*   let不會變成global context的變數</span><br><span class="line">*   進到function內, 又會是新的context</span><br><span class="line">*   依照context的順序, 可以形成scope chain, 當後續有方法存取某個變數時, 會檢查scope chain最近到最遠有無此變數.</span><br><span class="line">*   function的arguments參數也如同一般變數的scope規則</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>var dog &#x3D; ‘Lucky’;function feedSomething1(){let food &#x3D; “Meat”;   function feedSomething2(){   let snack &#x3D; “Apple”;    dog &#x3D; ‘Jack’;      &#x2F;&#x2F; 這可存取dog &#x2F; food &#x2F; snack 變數   }      feedSomething2();   &#x2F;&#x2F; 這可存取 dog &#x2F; food 變數}feedSomething1();&#x2F;&#x2F; 這可存取 dog 變數&#x2F;&#x2F; 在瀏覽器, dog會變成global context的變數console.log(window.dog);                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##  1.2.1 Scope Chain Augmentation</span><br><span class="line"></span><br><span class="line">*   延長scope chain的生命週期有2個方式</span><br><span class="line"></span><br><span class="line">1.  try-catch的catch block</span><br><span class="line">    </span><br><span class="line">2.  with statement</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function callPet(){  var dog &#x3D; ‘Harry’;        with(location){      var fullDog &#x3D; dog + ‘test’;    }       return fullDog;}let result &#x3D; callPet(); console.log(result); &#x2F;&#x2F; 輸出 Harrytest                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##  1.2.2 Variable Declaration</span><br><span class="line"></span><br><span class="line">*   ES6導入let和const, 使變數可侷限在特定scope</span><br><span class="line"></span><br><span class="line">####  1.2.2.1 Function Scope Declaration Using var</span><br><span class="line"></span><br><span class="line">*   在function用var宣告的變數, scope只在那function裡</span><br><span class="line">*   在function內仍是hosting的運作</span><br><span class="line">*   是function scope, 不是block scope</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function sayName(){ console.log(myWord); &#x2F;&#x2F; 因為hoisting所以輸出 undefined, 而不是Reference Error    var myWord &#x3D; ‘hi’ }sayName();console.log(myWord); &#x2F;&#x2F; var侷限在function, 所以是 Reference Error                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*   若在function沒用var宣告的變數, 將hoisting到外層, 使外層也能存取</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function sayName(){ myWord &#x3D; ‘hello’ + ‘world’; }sayName();console.log(myWord); &#x2F;&#x2F; 輸出 helloworld                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">####  1.2.2.2 Block Scope Declaration Using let</span><br><span class="line"></span><br><span class="line">*   相較於var, let多了 block scope</span><br><span class="line">    </span><br><span class="line">*   在for迴圈的條件式, 用var會溢出到外層可存取, 用let只限於那個for block </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">####  1.2.2.3 Constant Declaration Using const</span><br><span class="line"></span><br><span class="line">*   const必須在宣告時賦值</span><br><span class="line">    </span><br><span class="line">*   如果是Primitive變數, 它的值無法被修改</span><br><span class="line">    </span><br><span class="line">*   如果是Reference變數, 它的屬性的值可以改變, 但不可以再被new Object</span><br><span class="line">    </span><br><span class="line">*   如果想讓Reference變數的屬性都不再變化, 可用Object.freeze()方法</span><br><span class="line">    </span><br><span class="line">*   盡可能使用const, 以免被其他程式賦值而功能錯誤</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>const obj1; &#x2F;&#x2F; 顯示錯誤 Uncaught SyntaxError: Missing initializer in const declarationconst obj2 &#x3D; {};obj2 &#x3D; new Object(); &#x2F;&#x2F; 顯示錯誤  Uncaught TypeError: Assignment to constant variable.const obj3 &#x3D; {};obj3.name &#x3D; ‘Mary’;console.log(obj3.name); &#x2F;&#x2F; 輸出 Maryconst obj4 &#x3D; Object.freeze({});obj4.name &#x3D; ‘Mary’;console.log(obj4.name); &#x2F;&#x2F; 輸出 undefined                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">####  1.2.2.4 Identifier Lookup</span><br><span class="line"></span><br><span class="line">*   尋找變數時, 會從scope chain最接近的開始找, 找不到再往外層找</span><br><span class="line"></span><br><span class="line">## 1.3 Garbage Collection</span><br><span class="line"></span><br><span class="line">*   JS的執行環境會定時做GC, 將不再被使用的變數回收其記憶體</span><br><span class="line">*   常見GC有2種方式. </span><br><span class="line"></span><br><span class="line">##  1.3.1 Mark-And-Sweep</span><br><span class="line"></span><br><span class="line">*   每個變數都加上一個標記, 若被標記的變數沒再被引用, 將被刪除回收.</span><br><span class="line">    </span><br><span class="line">*   現行瀏覽器都採取此方式</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">##  1.3.2 Reference Couting</span><br><span class="line"></span><br><span class="line">*   紀錄變數被引用的次數, 如果引用次數為0, 將被刪除回收</span><br><span class="line">    </span><br><span class="line">*   Bug: 2個變數互相引用, 導致引用次數不會是0, 永不被刪除</span><br><span class="line">    </span><br><span class="line">*   早期IE的DOM、BOM是依照COM設計, 是採用引用次數做GC</span><br><span class="line">    </span><br><span class="line">*   手動斷開引用, 設變數為null, 將互相引用的狀況排除</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">##  1.3.3 Performance</span><br><span class="line"></span><br><span class="line">*   早期瀏覽器以固定的Threshold, 判斷記憶體使用量來觸發GC, 但當載入太多Script時, 使GC運作頻繁而導致瀏覽器性能變差</span><br><span class="line">    </span><br><span class="line">*   後來會動態調整Threshold, 大幅提升效能</span><br><span class="line">    </span><br><span class="line">*   有的瀏覽器在window物件提供GC手動的函式</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">##  1.3.4 Managing Memory</span><br><span class="line"></span><br><span class="line">*   一般瀏覽器可用記憶體比其他桌面軟體少 (?)</span><br><span class="line">    </span><br><span class="line">*   解除引用 (dereferencing) 是用設null值來釋放引用, 但並不代表將會立即刪除回收, 只是幫助下次GC時會清除它</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">###  1.3.4.1 Performance Boosts with const and let Declaration</span><br><span class="line"></span><br><span class="line">*   有了block scope, let / const比function scope的var還要早可清理</span><br><span class="line"></span><br><span class="line">###  1.3.4.2 Hidden Classes and the delete Operation</span><br><span class="line"></span><br><span class="line">*   在Chrome的JavaScript引擎 V8, 對於object會產生hidden class, 能追蹤每個物件的屬性, 越多的hidden class則管理效能花費越多</span><br><span class="line">    </span><br><span class="line">*   如果動態增加屬性或者用delete刪除屬性, 將產生不同的hidden class</span><br><span class="line">    </span><br><span class="line">*   在constructor可先寫好確定的屬性、用null釋放值, 將不會產生新的hidden class</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function Animal() {this.name &#x3D; ‘Hello’;}&#x2F;&#x2F; 使用同樣的hidden classlet a1 &#x3D; new Animal();let a2 &#x3D; new Animal();&#x2F;&#x2F; 變成2個不同的hidden classa2.height &#x3D; 30;                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x2F;&#x2F; 在constructor先產生共同的屬性function Animal(h) {this.name &#x3D; ‘Hello’;   this.height &#x3D; h;}&#x2F;&#x2F; 使用同樣的hidden classlet a1 &#x3D; new Animal(25);let a2 &#x3D; new Animal(30);&#x2F;&#x2F; 變成2個不同的hidden classdelete a2.height;                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>function Animal(h) {this.name &#x3D; ‘Hello’;   this.height &#x3D; h;}&#x2F;&#x2F; 使用同樣的hidden classlet a1 &#x3D; new Animal(25);let a2 &#x3D; new Animal(30);&#x2F;&#x2F; 仍用同樣的hidden classa2.height &#x3D; null;                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">###  1.3.4.3 Memory Leaks</span><br><span class="line"></span><br><span class="line">*   發生狀況1: 變成global object而未清除</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function setHeight() {height &#x3D; 90;}setHeight();&#x2F;&#x2F; window.height一直存在而未清除                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*   發生狀況2: setInterval一直使用某變數而未停止</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>let height &#x3D; 99;setInterval(() &#x3D;&gt; {console.log(height);}, 100);&#x2F;&#x2F; height一直被使用                    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*   發生狀況3: function closure的變數</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>let fun1 &#x3D; function(){let height &#x3D; 99;   return function(){    return height;   };};&#x2F;&#x2F; 只要fun1還在, height都不會被清除</p>
<pre><code>
#### 1.3.4.4 Static Allocation and Object Pools

*   如果在function內宣告object變數, function運作完會讓瀏覽器積極排程GC, 使系統變慢.
*   可以在function外用object pool管理所需的object, 再代入function做所需的運算.
*   這種可回收、重複使用物件的static allocation, 屬於過早的最佳化

  

## 2\. 參考資料

1.  Professional JavaScript for Web Developers 4th Edition, Chapter 4 : Variables, Scope, and Memory, Matt Frisbie.
</code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>讀書筆記</category>
      </categories>
  </entry>
</search>
